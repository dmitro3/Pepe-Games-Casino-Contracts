/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBankV2Interface extends ethers.utils.Interface {
  functions: {
    "cashIn(address,uint256)": FunctionFragment;
    "getDividends()": FunctionFragment;
    "getMaxBetAmount(address,uint256)": FunctionFragment;
    "getMinBetAmount(address)": FunctionFragment;
    "getTokenOwner(address)": FunctionFragment;
    "harvestDividends()": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "payout(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cashIn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBetAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBetAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cashIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;

  events: {};
}

export class IBankV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBankV2Interface;

  functions: {
    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getDividends(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "getDividends()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenOwner(token: string, overrides?: CallOverrides): Promise<[string]>;

    "getTokenOwner(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    harvestDividends(overrides?: Overrides): Promise<ContractTransaction>;

    "harvestDividends()"(overrides?: Overrides): Promise<ContractTransaction>;

    isAllowedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAllowedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  cashIn(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "cashIn(address,uint256)"(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getDividends(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "getDividends()"(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  getMaxBetAmount(
    token: string,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxBetAmount(address,uint256)"(
    token: string,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinBetAmount(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getMinBetAmount(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenOwner(token: string, overrides?: CallOverrides): Promise<string>;

  "getTokenOwner(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  harvestDividends(overrides?: Overrides): Promise<ContractTransaction>;

  "harvestDividends()"(overrides?: Overrides): Promise<ContractTransaction>;

  isAllowedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  "isAllowedToken(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payout(
    user: string,
    token: string,
    profit: BigNumberish,
    fees: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "payout(address,address,uint256,uint256)"(
    user: string,
    token: string,
    profit: BigNumberish,
    fees: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDividends(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "getDividends()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenOwner(token: string, overrides?: CallOverrides): Promise<string>;

    "getTokenOwner(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    harvestDividends(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "harvestDividends()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    isAllowedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    "isAllowedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getDividends(overrides?: CallOverrides): Promise<BigNumber>;

    "getDividends()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenOwner(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenOwner(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestDividends(overrides?: Overrides): Promise<BigNumber>;

    "harvestDividends()"(overrides?: Overrides): Promise<BigNumber>;

    isAllowedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getDividends(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDividends()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOwner(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenOwner(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestDividends(overrides?: Overrides): Promise<PopulatedTransaction>;

    "harvestDividends()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isAllowedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
