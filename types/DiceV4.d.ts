/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DiceV4Interface extends ethers.utils.Interface {
  functions: {
    "bank()": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "diceBets(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getBetData(uint256)": FunctionFragment;
    "getBetStatus(uint256)": FunctionFragment;
    "getLastUserBets(address,uint256)": FunctionFragment;
    "getTokenBalance(address)": FunctionFragment;
    "hasPendingBets(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "multiplier()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "refundBet(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "s_owner()": FunctionFragment;
    "s_randomWords()": FunctionFragment;
    "s_requestId()": FunctionFragment;
    "setBank(address)": FunctionFragment;
    "setHouseEdge(address,uint16)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMultiplier(uint256)": FunctionFragment;
    "wager(uint8,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(functionFragment: "bets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "diceBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBetData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUserBets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingBets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "refundBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_randomWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBank", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHouseEdge",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wager",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diceBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBetData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBetStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUserBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_randomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHouseEdge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wager", data: BytesLike): Result;

  events: {
    "BetRefunded(uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PlaceBet(uint256,address,address,uint256,uint8)": EventFragment;
    "Roll(uint256,address,address,uint256,uint8,uint8)": EventFragment;
    "SetBank(address)": EventFragment;
    "SetHouseEdge(address,uint16)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlaceBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Roll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBank"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHouseEdge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class DiceV4 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DiceV4Interface;

  functions: {
    bank(overrides?: CallOverrides): Promise<[string]>;

    "bank()"(overrides?: CallOverrides): Promise<[string]>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    diceBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { cap: number; rolled: number }>;

    "diceBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { cap: number; rolled: number }>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBetData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        }
      ] & {
        betData: [
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
      }
    >;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        }
      ] & {
        betData: [
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
      }
    >;

    getBetStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    getLastUserBets(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            resolved: boolean;
            user: string;
            token: string;
            id: BigNumber;
            amount: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          },
          [number, number] & { cap: number; rolled: number }
        ] & {
          bet: [
            boolean,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            resolved: boolean;
            user: string;
            token: string;
            id: BigNumber;
            amount: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          };
          diceBet: [number, number] & { cap: number; rolled: number };
        })[]
      ]
    >;

    "getLastUserBets(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            resolved: boolean;
            user: string;
            token: string;
            id: BigNumber;
            amount: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          },
          [number, number] & { cap: number; rolled: number }
        ] & {
          bet: [
            boolean,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            resolved: boolean;
            user: string;
            token: string;
            id: BigNumber;
            amount: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          };
          diceBet: [number, number] & { cap: number; rolled: number };
        })[]
      ]
    >;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTokenBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPendingBets(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPendingBets(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "multiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refundBet(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "refundBet(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    s_owner(overrides?: CallOverrides): Promise<[string]>;

    "s_owner()"(overrides?: CallOverrides): Promise<[string]>;

    s_randomWords(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_randomWords()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_requestId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBank(_bank: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setBank(address)"(
      _bank: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setHouseEdge(
      token: string,
      houseEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setHouseEdge(address,uint16)"(
      token: string,
      houseEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { houseEdge: number; pendingCount: BigNumber }
    >;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { houseEdge: number; pendingCount: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMultiplier(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMultiplier(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wager(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "wager(uint8,address,uint256)"(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  bank(overrides?: CallOverrides): Promise<string>;

  "bank()"(overrides?: CallOverrides): Promise<string>;

  bets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  "bets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  diceBets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { cap: number; rolled: number }>;

  "diceBets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { cap: number; rolled: number }>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBetData(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  "getBetData(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  getBetStatus(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "getBetStatus(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLastUserBets(
    user: string,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      },
      [number, number] & { cap: number; rolled: number }
    ] & {
      bet: [
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      };
      diceBet: [number, number] & { cap: number; rolled: number };
    })[]
  >;

  "getLastUserBets(address,uint256)"(
    user: string,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      },
      [number, number] & { cap: number; rolled: number }
    ] & {
      bet: [
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      };
      diceBet: [number, number] & { cap: number; rolled: number };
    })[]
  >;

  getTokenBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTokenBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPendingBets(token: string, overrides?: CallOverrides): Promise<boolean>;

  "hasPendingBets(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rawFulfillRandomWords(uint256,uint256[])"(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refundBet(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "refundBet(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  s_owner(overrides?: CallOverrides): Promise<string>;

  "s_owner()"(overrides?: CallOverrides): Promise<string>;

  s_randomWords(overrides?: CallOverrides): Promise<BigNumber>;

  "s_randomWords()"(overrides?: CallOverrides): Promise<BigNumber>;

  s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

  "s_requestId()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBank(_bank: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setBank(address)"(
    _bank: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setHouseEdge(
    token: string,
    houseEdge: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setHouseEdge(address,uint16)"(
    token: string,
    houseEdge: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { houseEdge: number; pendingCount: BigNumber }
  >;

  "tokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { houseEdge: number; pendingCount: BigNumber }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMultiplier(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMultiplier(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wager(
    cap: BigNumberish,
    token: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "wager(uint8,address,uint256)"(
    cap: BigNumberish,
    token: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    bank(overrides?: CallOverrides): Promise<string>;

    "bank()"(overrides?: CallOverrides): Promise<string>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    diceBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { cap: number; rolled: number }>;

    "diceBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { cap: number; rolled: number }>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBetData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    getBetStatus(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLastUserBets(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        },
        [number, number] & { cap: number; rolled: number }
      ] & {
        bet: [
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
        diceBet: [number, number] & { cap: number; rolled: number };
      })[]
    >;

    "getLastUserBets(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [boolean, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        },
        [number, number] & { cap: number; rolled: number }
      ] & {
        bet: [
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          resolved: boolean;
          user: string;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
        diceBet: [number, number] & { cap: number; rolled: number };
      })[]
    >;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingBets(token: string, overrides?: CallOverrides): Promise<boolean>;

    "hasPendingBets(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    refundBet(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "refundBet(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    s_owner(overrides?: CallOverrides): Promise<string>;

    "s_owner()"(overrides?: CallOverrides): Promise<string>;

    s_randomWords(overrides?: CallOverrides): Promise<BigNumber>;

    "s_randomWords()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    "s_requestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBank(_bank: string, overrides?: CallOverrides): Promise<void>;

    "setBank(address)"(_bank: string, overrides?: CallOverrides): Promise<void>;

    setHouseEdge(
      token: string,
      houseEdge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setHouseEdge(address,uint16)"(
      token: string,
      houseEdge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { houseEdge: number; pendingCount: BigNumber }
    >;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { houseEdge: number; pendingCount: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiplier(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMultiplier(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wager(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wager(uint8,address,uint256)"(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BetRefunded(
      id: null,
      user: null,
      amount: null,
      chainlinkVRFCost: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    PlaceBet(
      id: null,
      user: string | null,
      token: string | null,
      amount: null,
      cap: null
    ): EventFilter;

    Roll(
      id: null,
      user: string | null,
      token: string | null,
      amount: null,
      cap: null,
      rolled: null
    ): EventFilter;

    SetBank(bank: null): EventFilter;

    SetHouseEdge(token: string | null, houseEdge: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    bank(overrides?: CallOverrides): Promise<BigNumber>;

    "bank()"(overrides?: CallOverrides): Promise<BigNumber>;

    bets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diceBets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "diceBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBetData(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBetStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUserBets(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastUserBets(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingBets(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPendingBets(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: Overrides): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    refundBet(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "refundBet(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    s_owner(overrides?: CallOverrides): Promise<BigNumber>;

    "s_owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_randomWords(overrides?: CallOverrides): Promise<BigNumber>;

    "s_randomWords()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    "s_requestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBank(_bank: string, overrides?: Overrides): Promise<BigNumber>;

    "setBank(address)"(
      _bank: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setHouseEdge(
      token: string,
      houseEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setHouseEdge(address,uint16)"(
      token: string,
      houseEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMultiplier(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMultiplier(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wager(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "wager(uint8,address,uint256)"(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diceBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "diceBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBetData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUserBets(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastUserBets(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPendingBets(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPendingBets(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multiplier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refundBet(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "refundBet(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    s_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_randomWords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_randomWords()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_requestId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBank(
      _bank: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBank(address)"(
      _bank: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setHouseEdge(
      token: string,
      houseEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setHouseEdge(address,uint16)"(
      token: string,
      houseEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMultiplier(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wager(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "wager(uint8,address,uint256)"(
      cap: BigNumberish,
      token: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
