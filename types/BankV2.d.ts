/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BankV2Interface extends ethers.utils.Interface {
  functions: {
    "accountFees(address,uint256)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "cashIn(address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getDividends()": FunctionFragment;
    "getMaxBetAmount(address,uint256)": FunctionFragment;
    "getMinBetAmount(address)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "harvestDividends()": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "payout(address,address,uint256,uint256)": FunctionFragment;
    "setAllowedToken(address,bool)": FunctionFragment;
    "setBalanceRisk(address,uint16)": FunctionFragment;
    "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)": FunctionFragment;
    "setTeamWallet(address)": FunctionFragment;
    "setTokenMinBetAmount(address,uint256)": FunctionFragment;
    "teamWallet()": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawHouseEdgeAmount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cashIn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBetAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBetAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalanceRisk",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHouseEdgeSplit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMinBetAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "teamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHouseEdgeAmount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cashIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalanceRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHouseEdgeSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHouseEdgeAmount",
    data: BytesLike
  ): Result;

  events: {
    "AccountFees(address,uint256,uint256)": EventFragment;
    "AddToken(address)": EventFragment;
    "AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CashIn(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "HarvestDividend(address,uint256)": EventFragment;
    "HouseEdgeDistribution(address,uint256,uint256)": EventFragment;
    "Payout(address,uint256,uint256)": EventFragment;
    "SetAllowedToken(address,bool)": EventFragment;
    "SetBalanceRisk(address,uint16)": EventFragment;
    "SetTeamWallet(address)": EventFragment;
    "SetTokenHouseEdgeSplit(address,uint16,uint16,uint16,uint16)": EventFragment;
    "SetTokenMinBetAmount(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocateHouseEdgeAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CashIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseEdgeDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAllowedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBalanceRisk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTeamWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenHouseEdgeSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenMinBetAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BankV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BankV2Interface;

  functions: {
    accountFees(
      token: string,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "accountFees(address,uint256)"(
      token: string,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDividends(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    "getDividends()"(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minBetAmount: BigNumber }>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minBetAmount: BigNumber }>;

    getTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          string,
          string,
          string,
          [
            boolean,
            boolean,
            number,
            BigNumber,
            [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            }
          ] & {
            allowed: boolean;
            paused: boolean;
            balanceRisk: number;
            minBetAmount: BigNumber;
            houseEdgeSplit: [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            };
          }
        ] & {
          decimals: number;
          tokenAddress: string;
          name: string;
          symbol: string;
          token: [
            boolean,
            boolean,
            number,
            BigNumber,
            [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            }
          ] & {
            allowed: boolean;
            paused: boolean;
            balanceRisk: number;
            minBetAmount: BigNumber;
            houseEdgeSplit: [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            };
          };
        })[]
      ]
    >;

    "getTokens()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          string,
          string,
          string,
          [
            boolean,
            boolean,
            number,
            BigNumber,
            [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            }
          ] & {
            allowed: boolean;
            paused: boolean;
            balanceRisk: number;
            minBetAmount: BigNumber;
            houseEdgeSplit: [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            };
          }
        ] & {
          decimals: number;
          tokenAddress: string;
          name: string;
          symbol: string;
          token: [
            boolean,
            boolean,
            number,
            BigNumber,
            [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            }
          ] & {
            allowed: boolean;
            paused: boolean;
            balanceRisk: number;
            minBetAmount: BigNumber;
            houseEdgeSplit: [
              number,
              number,
              number,
              number,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              bank: number;
              dividend: number;
              treasury: number;
              team: number;
              dividendAmount: BigNumber;
              treasuryAmount: BigNumber;
              teamAmount: BigNumber;
            };
          };
        })[]
      ]
    >;

    harvestDividends(overrides?: Overrides): Promise<ContractTransaction>;

    "harvestDividends()"(overrides?: Overrides): Promise<ContractTransaction>;

    isAllowedToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAllowedToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowedToken(address,bool)"(
      token: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBalanceRisk(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBalanceRisk(address,uint16)"(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setHouseEdgeSplit(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)"(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTeamWallet(
      _teamWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTeamWallet(address)"(
      _teamWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenMinBetAmount(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenMinBetAmount(address,uint256)"(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    teamWallet(overrides?: CallOverrides): Promise<[string]>;

    "teamWallet()"(overrides?: CallOverrides): Promise<[string]>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      }
    >;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      }
    >;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawHouseEdgeAmount(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawHouseEdgeAmount(address)"(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountFees(
    token: string,
    fees: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "accountFees(address,uint256)"(
    token: string,
    fees: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addToken(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cashIn(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "cashIn(address,uint256)"(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDividends(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  "getDividends()"(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getMaxBetAmount(
    token: string,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxBetAmount(address,uint256)"(
    token: string,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinBetAmount(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getMinBetAmount(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokens(
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      string,
      string,
      string,
      [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      }
    ] & {
      decimals: number;
      tokenAddress: string;
      name: string;
      symbol: string;
      token: [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      };
    })[]
  >;

  "getTokens()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      string,
      string,
      string,
      [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      }
    ] & {
      decimals: number;
      tokenAddress: string;
      name: string;
      symbol: string;
      token: [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      };
    })[]
  >;

  harvestDividends(overrides?: Overrides): Promise<ContractTransaction>;

  "harvestDividends()"(overrides?: Overrides): Promise<ContractTransaction>;

  isAllowedToken(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllowedToken(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payout(
    user: string,
    token: string,
    profit: BigNumberish,
    fees: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "payout(address,address,uint256,uint256)"(
    user: string,
    token: string,
    profit: BigNumberish,
    fees: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setAllowedToken(
    token: string,
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowedToken(address,bool)"(
    token: string,
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBalanceRisk(
    token: string,
    balanceRisk: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBalanceRisk(address,uint16)"(
    token: string,
    balanceRisk: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setHouseEdgeSplit(
    token: string,
    bank: BigNumberish,
    dividend: BigNumberish,
    _treasury: BigNumberish,
    team: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)"(
    token: string,
    bank: BigNumberish,
    dividend: BigNumberish,
    _treasury: BigNumberish,
    team: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTeamWallet(
    _teamWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTeamWallet(address)"(
    _teamWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenMinBetAmount(
    token: string,
    tokenMinBetAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenMinBetAmount(address,uint256)"(
    token: string,
    tokenMinBetAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  teamWallet(overrides?: CallOverrides): Promise<string>;

  "teamWallet()"(overrides?: CallOverrides): Promise<string>;

  tokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      BigNumber,
      [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
        bank: number;
        dividend: number;
        treasury: number;
        team: number;
        dividendAmount: BigNumber;
        treasuryAmount: BigNumber;
        teamAmount: BigNumber;
      }
    ] & {
      allowed: boolean;
      paused: boolean;
      balanceRisk: number;
      minBetAmount: BigNumber;
      houseEdgeSplit: [
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bank: number;
        dividend: number;
        treasury: number;
        team: number;
        dividendAmount: BigNumber;
        treasuryAmount: BigNumber;
        teamAmount: BigNumber;
      };
    }
  >;

  "tokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      BigNumber,
      [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
        bank: number;
        dividend: number;
        treasury: number;
        team: number;
        dividendAmount: BigNumber;
        treasuryAmount: BigNumber;
        teamAmount: BigNumber;
      }
    ] & {
      allowed: boolean;
      paused: boolean;
      balanceRisk: number;
      minBetAmount: BigNumber;
      houseEdgeSplit: [
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bank: number;
        dividend: number;
        treasury: number;
        team: number;
        dividendAmount: BigNumber;
        treasuryAmount: BigNumber;
        teamAmount: BigNumber;
      };
    }
  >;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawHouseEdgeAmount(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawHouseEdgeAmount(address)"(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountFees(
      token: string,
      fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "accountFees(address,uint256)"(
      token: string,
      fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(token: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDividends(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    "getDividends()"(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        string,
        string,
        string,
        [
          boolean,
          boolean,
          number,
          BigNumber,
          [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          }
        ] & {
          allowed: boolean;
          paused: boolean;
          balanceRisk: number;
          minBetAmount: BigNumber;
          houseEdgeSplit: [
            number,
            number,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          };
        }
      ] & {
        decimals: number;
        tokenAddress: string;
        name: string;
        symbol: string;
        token: [
          boolean,
          boolean,
          number,
          BigNumber,
          [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          }
        ] & {
          allowed: boolean;
          paused: boolean;
          balanceRisk: number;
          minBetAmount: BigNumber;
          houseEdgeSplit: [
            number,
            number,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          };
        };
      })[]
    >;

    "getTokens()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        string,
        string,
        string,
        [
          boolean,
          boolean,
          number,
          BigNumber,
          [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          }
        ] & {
          allowed: boolean;
          paused: boolean;
          balanceRisk: number;
          minBetAmount: BigNumber;
          houseEdgeSplit: [
            number,
            number,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          };
        }
      ] & {
        decimals: number;
        tokenAddress: string;
        name: string;
        symbol: string;
        token: [
          boolean,
          boolean,
          number,
          BigNumber,
          [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          }
        ] & {
          allowed: boolean;
          paused: boolean;
          balanceRisk: number;
          minBetAmount: BigNumber;
          houseEdgeSplit: [
            number,
            number,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            bank: number;
            dividend: number;
            treasury: number;
            team: number;
            dividendAmount: BigNumber;
            treasuryAmount: BigNumber;
            teamAmount: BigNumber;
          };
        };
      })[]
    >;

    harvestDividends(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "harvestDividends()"(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    isAllowedToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowedToken(address,bool)"(
      token: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBalanceRisk(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBalanceRisk(address,uint16)"(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHouseEdgeSplit(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)"(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamWallet(
      _teamWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTeamWallet(address)"(
      _teamWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMinBetAmount(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenMinBetAmount(address,uint256)"(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    teamWallet(overrides?: CallOverrides): Promise<string>;

    "teamWallet()"(overrides?: CallOverrides): Promise<string>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      }
    >;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        }
      ] & {
        allowed: boolean;
        paused: boolean;
        balanceRisk: number;
        minBetAmount: BigNumber;
        houseEdgeSplit: [
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          bank: number;
          dividend: number;
          treasury: number;
          team: number;
          dividendAmount: BigNumber;
          treasuryAmount: BigNumber;
          teamAmount: BigNumber;
        };
      }
    >;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawHouseEdgeAmount(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawHouseEdgeAmount(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountFees(
      token: string | null,
      newBalance: null,
      fees: null
    ): EventFilter;

    AddToken(token: null): EventFilter;

    AllocateHouseEdgeAmount(
      token: string | null,
      bank: null,
      dividend: null,
      treasury: null,
      team: null
    ): EventFilter;

    CashIn(token: string | null, newBalance: null, amount: null): EventFilter;

    Deposit(token: string | null, amount: null): EventFilter;

    HarvestDividend(token: string | null, amount: null): EventFilter;

    HouseEdgeDistribution(
      token: string | null,
      treasuryAmount: null,
      teamAmount: null
    ): EventFilter;

    Payout(token: string | null, newBalance: null, profit: null): EventFilter;

    SetAllowedToken(token: string | null, allowed: null): EventFilter;

    SetBalanceRisk(token: string | null, balanceRisk: null): EventFilter;

    SetTeamWallet(teamWallet: null): EventFilter;

    SetTokenHouseEdgeSplit(
      token: string | null,
      bank: null,
      dividend: null,
      treasury: null,
      team: null
    ): EventFilter;

    SetTokenMinBetAmount(token: string | null, minBetAmount: null): EventFilter;

    Withdraw(token: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    accountFees(
      token: string,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "accountFees(address,uint256)"(
      token: string,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "addToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDividends(overrides?: CallOverrides): Promise<BigNumber>;

    "getDividends()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestDividends(overrides?: Overrides): Promise<BigNumber>;

    "harvestDividends()"(overrides?: Overrides): Promise<BigNumber>;

    isAllowedToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowedToken(address,bool)"(
      token: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBalanceRisk(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBalanceRisk(address,uint16)"(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setHouseEdgeSplit(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)"(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTeamWallet(
      _teamWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTeamWallet(address)"(
      _teamWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenMinBetAmount(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenMinBetAmount(address,uint256)"(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    teamWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "teamWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawHouseEdgeAmount(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawHouseEdgeAmount(address)"(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountFees(
      token: string,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "accountFees(address,uint256)"(
      token: string,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cashIn(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "cashIn(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDividends(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDividends()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxBetAmount(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxBetAmount(address,uint256)"(
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBetAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinBetAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestDividends(overrides?: Overrides): Promise<PopulatedTransaction>;

    "harvestDividends()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isAllowedToken(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payout(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "payout(address,address,uint256,uint256)"(
      user: string,
      token: string,
      profit: BigNumberish,
      fees: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowedToken(address,bool)"(
      token: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBalanceRisk(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBalanceRisk(address,uint16)"(
      token: string,
      balanceRisk: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setHouseEdgeSplit(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)"(
      token: string,
      bank: BigNumberish,
      dividend: BigNumberish,
      _treasury: BigNumberish,
      team: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTeamWallet(
      _teamWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTeamWallet(address)"(
      _teamWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenMinBetAmount(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenMinBetAmount(address,uint256)"(
      token: string,
      tokenMinBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    teamWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "teamWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawHouseEdgeAmount(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawHouseEdgeAmount(address)"(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
