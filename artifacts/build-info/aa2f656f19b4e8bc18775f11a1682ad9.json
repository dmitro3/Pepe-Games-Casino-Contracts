{"id":"aa2f656f19b4e8bc18775f11a1682ad9","_format":"hh-sol-build-info-1","solcVersion":"0.8.12","solcLongVersion":"0.8.12+commit.f00d7308","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/AutomationBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/AutomationCompatible.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/KeeperCompatible.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatible as KeeperCompatible} from \"./AutomationCompatible.sol\";\nimport {AutomationBase as KeeperBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/AccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Multicall.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/BankV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nimport {AccessControlEnumerable} from \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport {IERC20Metadata, IERC20} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Multicall} from \"@openzeppelin/contracts/utils/Multicall.sol\";\n\nimport {KeeperCompatibleInterface} from \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\n\ncontract BankV2 {\n    using SafeERC20 for IERC20;\n\n    /// @notice Token's house edge allocations struct.\n    /// The games house edge is split into several allocations.\n    /// The allocated amounts stays in the bank until authorized parties withdraw. They are subtracted from the balance.\n    /// @param bank Rate to be allocated to the bank, on bet payout.\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\n    /// @param treasury Rate to be allocated to the treasury, on bet payout.\n    /// @param team Rate to be allocated to the team, on bet payout.\n    /// @param dividendAmount The number of tokens to be sent as staking rewards.\n    /// @param treasuryAmount The number of tokens to be sent to the treasury.\n    /// @param teamAmount The number of tokens to be sent to the team.\n    struct HouseEdgeSplit {\n        uint16 bank;\n        uint16 dividend;\n        uint16 treasury;\n        uint16 team;\n        uint256 dividendAmount;\n        uint256 treasuryAmount;\n        uint256 teamAmount;\n    }\n\n    struct Token {\n        bool allowed;\n        bool paused;\n        uint16 balanceRisk;\n        uint256 minBetAmount;\n        HouseEdgeSplit houseEdgeSplit;\n    }\n\n    struct TokenMetadata {\n        uint8 decimals;\n        address tokenAddress;\n        string name;\n        string symbol;\n        Token token;\n    }\n\n    /// @notice Number of tokens added.\n    uint8 private _tokensCount;\n\n    /// @notice Treasury multi-sig wallet.\n    address public immutable treasury;\n\n    /// @notice Team wallet.\n    address public teamWallet;\n\n    /// @notice Maps tokens addresses to token configuration.\n    mapping(address => Token) public tokens;\n\n    /// @notice Maps tokens indexes to token address.\n    mapping(uint8 => address) private _tokensList;\n\n    /// @notice Emitted after a token is added.\n    /// @param token Address of the token.\n    event AddToken(address token);\n\n    /// @notice Emitted after the balance risk is set.\n    /// @param balanceRisk Rate defining the balance risk.\n    event SetBalanceRisk(address indexed token, uint16 balanceRisk);\n\n    /// @notice Emitted after a token is allowed.\n    /// @param token Address of the token.\n    /// @param allowed Whether the token is allowed for betting.\n    event SetAllowedToken(address indexed token, bool allowed);\n\n    /// @notice Emitted after the minimum bet amount is set for a token.\n    /// @param token Address of the token.\n    /// @param minBetAmount Minimum bet amount.\n    event SetTokenMinBetAmount(address indexed token, uint256 minBetAmount);\n\n    /// @notice Emitted after a token deposit.\n    /// @param token Address of the token.\n    /// @param amount The number of token deposited.\n    event Deposit(address indexed token, uint256 amount);\n\n    /// @notice Emitted after a token withdrawal.\n    /// @param token Address of the token.\n    /// @param amount The number of token withdrawn.\n    event Withdraw(address indexed token, uint256 amount);\n\n    event SetTokenHouseEdgeSplit(\n        address indexed token,\n        uint16 bank,\n        uint16 dividend,\n        uint16 treasury,\n        uint16 team\n    );\n\n    /// @notice Emitted after the token's treasury and team allocations are distributed.\n    /// @param token Address of the token.\n    /// @param treasuryAmount The number of tokens sent to the treasury.\n    /// @param teamAmount The number of tokens sent to the team.\n    event HouseEdgeDistribution(\n        address indexed token,\n        uint256 treasuryAmount,\n        uint256 teamAmount\n    );\n\n    /// @notice Emitted after the token's dividend allocation is distributed.\n    /// @param token Address of the token.\n    /// @param amount The number of tokens sent to the SwirlMaster.\n    event HarvestDividend(address indexed token, uint256 amount);\n\n    /// @notice Emitted after the token's house edge is allocated.\n    /// @param token Address of the token.\n    /// @param bank The number of tokens allocated to bank.\n    /// @param dividend The number of tokens allocated as staking rewards.\n    /// @param treasury The number of tokens allocated to the treasury.\n    /// @param team The number of tokens allocated to the team.\n    event AllocateHouseEdgeAmount(\n        address indexed token,\n        uint256 bank,\n        uint256 dividend,\n        uint256 treasury,\n        uint256 team\n    );\n\n    /// @notice Emitted after the game's fees are sent to the bank.\n    /// @param token Address of the token.\n    /// @param newBalance New token balance.\n    /// @param fees Fees received from game.\n    event AccountFees(address indexed token, uint256 newBalance, uint256 fees);\n\n    /// @notice Emitted after the bet profit amount is sent to the user.\n    /// @param token Address of the token.\n    /// @param newBalance New token balance.\n    /// @param profit Bet profit amount sent.\n    event Payout(address indexed token, uint256 newBalance, uint256 profit);\n\n    /// @notice Emitted after the bet amount is collected from the game smart contract.\n    /// @param token Address of the token.\n    /// @param newBalance New token balance.\n    /// @param amount Bet amount collected.\n    event CashIn(address indexed token, uint256 newBalance, uint256 amount);\n\n    /// @notice Reverting error when trying to add an existing token.\n    error TokenExists();\n    /// @notice Reverting error when setting the house edge allocations, but the sum isn't 100%.\n    /// @param splitSum Sum of the house edge allocations rates.\n    error WrongHouseEdgeSplit(uint16 splitSum);\n    /// @notice Reverting error when sender isn't allowed.\n    error AccessDenied();\n    /// @notice Reverting error when team wallet or treasury is the zero address.\n    error WrongAddress();\n    /// @notice Reverting error when withdrawing a non paused token.\n    error TokenNotPaused();\n    /// @notice Reverting error when token has pending bets on a game.\n    error TokenHasPendingBets();\n\n    /// @notice Emitted after the team wallet is set.\n    /// @param teamWallet The team wallet address.\n    event SetTeamWallet(address teamWallet);\n\n    /// @notice Initialize the contract's admin role to the deployer, and state variables.\n    /// @param treasuryAddress Treasury multi-sig wallet.\n    /// @param teamWalletAddress Team wallet.\n    constructor(address treasuryAddress, address teamWalletAddress) {\n        if (treasuryAddress == address(0)) {\n            revert WrongAddress();\n        }\n\n        treasury = treasuryAddress;\n\n        // The ownership should then be transfered to a multi-sig.\n        // _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        setTeamWallet(teamWalletAddress);\n    }\n\n    /// @notice Transfers a specific amount of token to an address.\n    /// Uses native transfer or ERC20 transfer depending on the token.\n    /// @dev The 0x address is considered the gas token.\n    /// @param user Address of destination.\n    /// @param token Address of the token.\n    /// @param amount Number of tokens.\n    function _safeTransfer(\n        address user,\n        address token,\n        uint256 amount\n    ) private {\n        if (_isGasToken(token)) {\n            payable(user).transfer(amount);\n        } else {\n            IERC20(token).safeTransfer(user, amount);\n        }\n    }\n\n    /// @notice Check if the token has the 0x address.\n    /// @param token Address of the token.\n    /// @return Whether the token's address is the 0x address.\n    function _isGasToken(address token) private pure returns (bool) {\n        return token == address(0);\n    }\n\n    /// @notice Deposit funds in the bank to allow gamers to win more.\n    /// ERC20 token allowance should be given prior to deposit.\n    /// @param token Address of the token.\n    /// @param amount Number of tokens.\n    function deposit(address token, uint256 amount)\n        external\n        payable\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\n    {\n        if (_isGasToken(token)) {\n            amount = msg.value;\n        } else {\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        }\n        emit Deposit(token, amount);\n    }\n\n    /// @notice Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\n    /// @param token Address of the token.\n    /// @param amount Number of tokens.\n    function withdraw(address token, uint256 amount)\n        public\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\n    {\n        uint256 balance = getBalance(token);\n        if (balance != 0) {\n            if (!tokens[token].paused) {\n                revert TokenNotPaused();\n            }\n\n            // uint256 roleMemberCount = getRoleMemberCount(GAME_ROLE);\n            // for (uint256 i; i < roleMemberCount; i++) {\n            //     if (IGame(getRoleMember(GAME_ROLE, i)).hasPendingBets(token)) {\n            //         revert TokenHasPendingBets();\n            //     }\n            // }\n        }\n\n        if (amount > balance) {\n            amount = balance;\n        }\n        _safeTransfer(msg.sender, token, amount);\n        emit Withdraw(token, amount);\n    }\n\n    /// @notice Sets the new token balance risk.\n    /// @param token Address of the token.\n    /// @param balanceRisk Risk rate.\n    function setBalanceRisk(address token, uint16 balanceRisk)\n        external\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\n    {\n        tokens[token].balanceRisk = balanceRisk;\n        emit SetBalanceRisk(token, balanceRisk);\n    }\n\n    /// @notice Adds a new token that'll be enabled for the games' betting.\n    /// Token shouldn't exist yet.\n    /// @param token Address of the token.\n    function addToken(\n        address token // onlyRole(DEFAULT_ADMIN_ROLE)\n    ) external {\n        if (_tokensCount != 0) {\n            for (uint8 i; i < _tokensCount; i++) {\n                if (_tokensList[i] == token) {\n                    revert TokenExists();\n                }\n            }\n        }\n        _tokensList[_tokensCount] = token;\n        _tokensCount += 1;\n        emit AddToken(token);\n    }\n\n    /// @notice Changes the token's bet permission.\n    /// @param token Address of the token.\n    /// @param allowed Whether the token is enabled for bets.\n    function setAllowedToken(address token, bool allowed)\n        external\n    // onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        tokens[token].allowed = allowed;\n        emit SetAllowedToken(token, allowed);\n    }\n\n    /// @notice Sets the token's house edge allocations for bet payout.\n    /// @param token Address of the token.\n    /// @param bank Rate to be allocated to the bank, on bet payout.\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\n    /// @param _treasury Rate to be allocated to the treasury, on bet payout.\n    /// @param team Rate to be allocated to the team, on bet payout.\n    /// @dev `bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.\n    function setHouseEdgeSplit(\n        address token,\n        uint16 bank,\n        uint16 dividend,\n        uint16 _treasury,\n        uint16 team\n    ) external {\n        uint16 splitSum = bank + dividend + team + _treasury;\n        if (splitSum != 10000) {\n            revert WrongHouseEdgeSplit(splitSum);\n        }\n\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\n        tokenHouseEdge.bank = bank;\n        tokenHouseEdge.dividend = dividend;\n        tokenHouseEdge.treasury = _treasury;\n        tokenHouseEdge.team = team;\n\n        emit SetTokenHouseEdgeSplit(token, bank, dividend, _treasury, team);\n    }\n\n    /// @notice Sets the minimum bet amount for a specific token.\n    /// @param token Address of the token.\n    /// @param tokenMinBetAmount Minimum bet amount.\n    function setTokenMinBetAmount(address token, uint256 tokenMinBetAmount)\n        external\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\n    {\n        tokens[token].minBetAmount = tokenMinBetAmount;\n        emit SetTokenMinBetAmount(token, tokenMinBetAmount);\n    }\n\n    /// @notice Harvests tokens dividends.\n    /// @return The list of tokens addresses.\n    /// @return The list of tokens' amounts harvested.\n    function harvestDividends()\n        external\n        returns (\n            // onlyRole(SWIRLMASTER_ROLE)\n            address[] memory,\n            uint256[] memory\n        )\n    {\n        address[] memory _tokens = new address[](_tokensCount);\n        uint256[] memory _amounts = new uint256[](_tokensCount);\n\n        for (uint8 i; i < _tokensCount; i++) {\n            address tokenAddress = _tokensList[i];\n            Token storage token = tokens[tokenAddress];\n            uint256 dividendAmount = token.houseEdgeSplit.dividendAmount;\n            if (dividendAmount != 0) {\n                delete token.houseEdgeSplit.dividendAmount;\n                _safeTransfer(msg.sender, tokenAddress, dividendAmount);\n                emit HarvestDividend(tokenAddress, dividendAmount);\n                _tokens[i] = tokenAddress;\n                _amounts[i] = dividendAmount;\n            }\n        }\n\n        return (_tokens, _amounts);\n    }\n\n    /// @notice Get the available tokens dividends amounts.\n    /// @return The list of tokens addresses.\n    /// @return The list of tokens' amounts harvested.\n    function getDividends()\n        external\n        view\n        returns (address[] memory, uint256[] memory)\n    {\n        address[] memory _tokens = new address[](_tokensCount);\n        uint256[] memory _amounts = new uint256[](_tokensCount);\n\n        for (uint8 i; i < _tokensCount; i++) {\n            address tokenAddress = _tokensList[i];\n            Token storage token = tokens[tokenAddress];\n            uint256 dividendAmount = token.houseEdgeSplit.dividendAmount;\n            if (dividendAmount != 0) {\n                _tokens[i] = tokenAddress;\n                _amounts[i] = dividendAmount;\n            }\n        }\n\n        return (_tokens, _amounts);\n    }\n\n    /// @notice Splits the house edge fees and allocates them as dividends, to the partner, the bank, the treasury, and team.\n    /// @param token Address of the token.\n    /// @param fees Bet amount and bet profit fees amount.\n    function _allocateHouseEdge(address token, uint256 fees) private {\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\n\n        uint256 dividendAmount = (fees * tokenHouseEdge.dividend) / 10000;\n        tokenHouseEdge.dividendAmount += dividendAmount;\n\n        // The bank also get allocated a share of the house edge.\n        uint256 bankAmount = (fees * tokenHouseEdge.bank) / 10000;\n\n        uint256 treasuryAmount = (fees * tokenHouseEdge.treasury) / 10000;\n        tokenHouseEdge.treasuryAmount += treasuryAmount;\n\n        uint256 teamAmount = (fees * tokenHouseEdge.team) / 10000;\n        tokenHouseEdge.teamAmount += teamAmount;\n\n        emit AllocateHouseEdgeAmount(\n            token,\n            bankAmount,\n            dividendAmount,\n            treasuryAmount,\n            teamAmount\n        );\n    }\n\n    /// @notice Receive game's fees.\n    /// @param token Address of the token.\n    /// @param fees Bet amount and bet profit fees amount.\n    function accountFees(address token, uint256 fees)\n        external\n        payable\n    // onlyRole(GAME_ROLE)\n    {\n        _allocateHouseEdge(token, fees);\n\n        emit AccountFees(\n            token,\n            getBalance(token),\n            _isGasToken(token) ? msg.value : fees\n        );\n    }\n\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\n    /// @param user Address of the gamer.\n    /// @param token Address of the token.\n    /// @param profit Number of tokens to be sent to the gamer.\n    /// @param fees Bet amount and bet profit fees amount.\n    function payout(\n        address payable user,\n        address token,\n        uint256 profit,\n        uint256 fees // onlyRole(GAME_ROLE)\n    ) external payable {\n        _allocateHouseEdge(token, fees);\n\n        // Pay the user\n        _safeTransfer(user, token, profit);\n        emit Payout(token, getBalance(token), profit);\n    }\n\n    /// @notice Accounts a loss bet.\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\n    /// @param tokenAddress Address of the token.\n    /// @param amount Loss bet amount.\n    function cashIn(address tokenAddress, uint256 amount)\n        external\n        payable\n    // onlyRole(GAME_ROLE)\n    {\n        emit CashIn(\n            tokenAddress,\n            getBalance(tokenAddress),\n            _isGasToken(tokenAddress) ? msg.value : amount\n        );\n    }\n\n    /// @dev For the front-end\n    function getTokens() external view returns (TokenMetadata[] memory) {\n        TokenMetadata[] memory _tokens = new TokenMetadata[](_tokensCount);\n        for (uint8 i; i < _tokensCount; i++) {\n            address tokenAddress = _tokensList[i];\n            Token memory token = tokens[tokenAddress];\n            if (_isGasToken(tokenAddress)) {\n                _tokens[i] = TokenMetadata({\n                    decimals: 18,\n                    tokenAddress: tokenAddress,\n                    name: \"ETH\",\n                    symbol: \"ETH\",\n                    token: token\n                });\n            } else {\n                IERC20Metadata erc20Metadata = IERC20Metadata(tokenAddress);\n                _tokens[i] = TokenMetadata({\n                    decimals: erc20Metadata.decimals(),\n                    tokenAddress: tokenAddress,\n                    name: erc20Metadata.name(),\n                    symbol: erc20Metadata.symbol(),\n                    token: token\n                });\n            }\n        }\n        return _tokens;\n    }\n\n    /// @notice Gets the token's min bet amount.\n    /// @param token Address of the token.\n    /// @return minBetAmount Min bet amount.\n    /// @dev The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.\n    function getMinBetAmount(address token)\n        external\n        view\n        returns (uint256 minBetAmount)\n    {\n        minBetAmount = tokens[token].minBetAmount;\n        if (minBetAmount == 0) {\n            minBetAmount = 10000;\n        }\n    }\n\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\n    /// @param token Address of the token.\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\n    /// @return Maximum bet amount for the token.\n    /// @dev The multiplier should be at least 10000.\n    function getMaxBetAmount(address token, uint256 multiplier)\n        external\n        view\n        returns (uint256)\n    {\n        return (getBalance(token) * tokens[token].balanceRisk) / multiplier;\n    }\n\n    /// @notice Gets the token's allow status used on the games smart contracts.\n    /// @param tokenAddress Address of the token.\n    /// @return Whether the token is enabled for bets.\n    function isAllowedToken(address tokenAddress) external view returns (bool) {\n        Token memory token = tokens[tokenAddress];\n        return token.allowed && !token.paused;\n    }\n\n    // /// @notice Gets the token's owner.\n    // /// @param token Address of the token.\n    // /// @return Address of the owner.\n    // function getTokenOwner(address token) external view returns (address) {\n    //     address partner = tokens[token].partner;\n    //     if (partner == address(0)) {\n    //         return getRoleMember(DEFAULT_ADMIN_ROLE, 0);\n    //     } else {\n    //         return partner;\n    //     }\n    // }\n\n    /// @notice Sets the new team wallet.\n    /// @param _teamWallet The team wallet address.\n    function setTeamWallet(address _teamWallet)\n        public\n    // onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        if (_teamWallet == address(0)) {\n            revert WrongAddress();\n        }\n        teamWallet = _teamWallet;\n        emit SetTeamWallet(teamWallet);\n    }\n\n    /// @notice Distributes the token's treasury and team allocations amounts.\n    /// @param tokenAddress Address of the token.\n    function withdrawHouseEdgeAmount(address tokenAddress) public {\n        HouseEdgeSplit storage tokenHouseEdge = tokens[tokenAddress]\n            .houseEdgeSplit;\n        uint256 treasuryAmount = tokenHouseEdge.treasuryAmount;\n        uint256 teamAmount = tokenHouseEdge.teamAmount;\n        if (treasuryAmount != 0) {\n            delete tokenHouseEdge.treasuryAmount;\n            _safeTransfer(treasury, tokenAddress, treasuryAmount);\n        }\n        if (teamAmount != 0) {\n            delete tokenHouseEdge.teamAmount;\n            _safeTransfer(teamWallet, tokenAddress, teamAmount);\n        }\n        if (treasuryAmount != 0 || teamAmount != 0) {\n            emit HouseEdgeDistribution(\n                tokenAddress,\n                treasuryAmount,\n                teamAmount\n            );\n        }\n    }\n\n    /// @notice Gets the token's balance.\n    /// The token's house edge allocation amounts are subtracted from the balance.\n    /// @param token Address of the token.\n    /// @return The amount of token available for profits.\n    function getBalance(address token) public view returns (uint256) {\n        uint256 balance;\n        if (_isGasToken(token)) {\n            balance = address(this).balance;\n        } else {\n            balance = IERC20(token).balanceOf(address(this));\n        }\n        HouseEdgeSplit memory tokenHouseEdgeSplit = tokens[token]\n            .houseEdgeSplit;\n        return\n            balance -\n            tokenHouseEdgeSplit.dividendAmount -\n            tokenHouseEdgeSplit.treasuryAmount -\n            tokenHouseEdgeSplit.teamAmount;\n    }\n}\n"},"contracts/CoinToss.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Multicall} from \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\nimport {IBankV2} from \"./interface/IBankV2.sol\";\n\n// import {WalletV2} from \"./WalletV2.sol\";\n\ncontract CoinTossV5 is\n    VRFConsumerBaseV2,\n    Ownable,\n    Pausable,\n    Multicall,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n    IBankV2 public bank;\n\n    uint64 s_subscriptionId;\n\n    VRFCoordinatorV2Interface COORDINATOR;\n\n    address vrfCoordinator = 0xbd13f08b8352A3635218ab9418E340c60d6Eb418;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    // For a list of available gas lanes on each network,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    bytes32 keyHash =\n        0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4;\n\n    uint32 callbackGasLimit = 200000;\n\n    // The default is 3, but you can set this higher.\n    uint16 requestConfirmations = 3;\n\n    // For this example, retrieve 2 random values in one request.\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\n    uint32 numWords = 2;\n\n    uint256 public s_randomWords;\n    uint256 public s_requestId;\n    address public s_owner;\n\n    /// @notice Emitted after the bank is set.\n    /// @param bank Address of the bank contract.\n    event SetBank(address bank);\n    /// @notice Emitted after the house edge is set for a token.\n    /// @param token Address of the token.\n    /// @param houseEdge House edge rate.\n    event SetHouseEdge(address indexed token, uint16 houseEdge);\n\n    error ExcessiveHouseEdge();\n    error ForbiddenToken();\n    error WrongGasValueToCoverFee();\n    error AccessDenied();\n    error InvalidAddress();\n    error TokenHasPendingBets();\n\n    struct Token {\n        uint16 houseEdge;\n        uint64 pendingCount;\n    }\n    /// @notice Maps tokens addresses to token configuration.\n    mapping(address => Token) public tokens;\n\n    struct Bet {\n        bool resolved;\n        address payable user;\n        address token;\n        uint256 id;\n        uint256 amount;\n        uint256 blockTime;\n        bool betStatus;\n        // uint256 payout;\n    }\n\n    // Fee struct\n    struct Fee {\n        uint256 betAmountFee;\n        uint256 ProfitFee;\n    }\n\n    /// @notice Maps bets IDs to Bet information.\n    mapping(uint256 => Bet) public bets;\n\n    /// @notice Maps users addrejsses to bets IDs\n    mapping(address => uint256[]) internal _userBets;\n\n    /// @notice Emitted after the bet amount is transfered to the user.\n    /// @param id The bet ID.\n    /// @param user Address of the gamer.\n    /// @param amount Number of tokens refunded.\n    /// @param chainlinkVRFCost The Chainlink VRF cost refunded to player.\n    event BetRefunded(\n        uint256 id,\n        address user,\n        uint256 amount,\n        uint256 chainlinkVRFCost\n    );\n\n    /// @notice Insufficient bet amount.\n    /// @param minBetAmount Bet amount.\n    error UnderMinBetAmount(uint256 minBetAmount);\n\n    /// @notice Bet isn't resolved yet.\n    error NotFulfilled();\n\n    /// @notice Bet provided doesn't exist or was already resolved.\n    error NotPendingBet();\n\n    // Coin toss\n    /// @notice Full coin toss bet information struct.\n    /// @param bet The Bet struct information.\n    /// @param diceBet The Coin Toss bet struct information.\n    /// @dev Used to package bet information for the front-end.\n    struct FullCoinTossBet {\n        Bet bet;\n        CoinTossBet coinTossBet;\n    }\n\n    /// @notice Coin Toss bet information struct.\n    /// @param face The chosen coin face.\n    /// @param rolled The rolled coin face.\n    struct CoinTossBet {\n        bool face;\n        bool rolled;\n    }\n\n    /// @notice Maps bets IDs to chosen and rolled coin faces.\n    /// @dev Coin faces: true = Tails, false = Heads.\n    mapping(uint256 => CoinTossBet) public coinTossBets;\n\n    /// @notice Emitted after a bet is placed.\n    /// @param id The bet ID.\n    /// @param user Address of the gamer.\n    /// @param token Address of the token.\n    /// @param amount The bet amount.\n    /// @param face The chosen coin face.\n    event PlaceBet(\n        uint256 id,\n        address indexed user,\n        address indexed token,\n        uint256 amount,\n        bool face\n    );\n\n    /// @notice Emitted after a bet is rolled.\n    /// @param id The bet ID.\n    /// @param user Address of the gamer.\n    /// @param token Address of the token.\n    /// @param amount The bet amount.\n    /// @param face The chosen coin face.\n    /// @param rolled The rolled coin face.\n    event Roll(\n        uint256 id,\n        address indexed user,\n        address indexed token,\n        uint256 amount,\n        bool face,\n        bool rolled\n        // uint256 payout\n    );\n\n    // Ends heref\n\n    constructor(uint64 subscriptionId, address bankAddress)\n        VRFConsumerBaseV2(vrfCoordinator)\n    {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        s_owner = msg.sender;\n        s_subscriptionId = subscriptionId;\n        setBank(IBankV2(bankAddress));\n    }\n\n    /// @notice Returns whether the token has pending bets.\n    /// @return Whether the token has pending bets.\n    function hasPendingBets(address token) public view returns (bool) {\n        return tokens[token].pendingCount != 0;\n    }\n\n    function _getFees(address token, uint256 amount)\n        private\n        view\n        returns (uint256)\n    {\n        return (tokens[token].houseEdge * amount) / 10000;\n    }\n\n    /// @notice Sets the Bank contract.\n    /// @param _bank Address of the Bank contract.\n    function setBank(IBankV2 _bank) public onlyOwner {\n        if (address(_bank) == address(0)) {\n            // revert InvalidAddress();\n            // return false;\n        }\n        bank = _bank;\n        emit SetBank(address(_bank));\n    }\n\n    /// @notice Sets the game house edge rate for a specific token.\n    /// @param token Address of the token.\n    /// @param houseEdge House edge rate.\n    /// @dev The house edge rate couldn't exceed 4%.\n    function setHouseEdge(address token, uint16 houseEdge) external onlyOwner {\n        if (houseEdge > 400) {\n            revert ExcessiveHouseEdge();\n        }\n        if (hasPendingBets(token)) {\n            revert TokenHasPendingBets();\n        }\n        tokens[token].houseEdge = houseEdge;\n        emit SetHouseEdge(token, houseEdge);\n    }\n\n    /// @notice Check if the token has the 0x address.\n    /// @param token Address of the token.\n    /// @return Whether the token's address is the 0x address.\n    function _isGasToken(address token) private pure returns (bool) {\n        return token == address(0);\n    }\n\n    function _newBet(\n        address tokenAddress,\n        uint256 tokenAmount,\n        uint256 multi\n    ) internal whenNotPaused nonReentrant returns (Bet memory) {\n        Token storage token = tokens[tokenAddress];\n        if (\n            bank.isAllowedToken(tokenAddress) == false || token.houseEdge == 0\n        ) {\n            revert ForbiddenToken();\n        }\n\n        address user = msg.sender;\n        bool isGasToken = tokenAddress == address(0);\n        uint256 betAmount = tokenAmount;\n\n        {\n            uint256 minBetAmount = bank.getMinBetAmount(tokenAddress);\n            if (betAmount < minBetAmount) {\n                revert UnderMinBetAmount(minBetAmount);\n            }\n\n            uint256 maxBetAmount = bank.getMaxBetAmount(tokenAddress, multi);\n            if (betAmount > maxBetAmount) {\n                if (isGasToken) {\n                    payable(user).transfer(betAmount - maxBetAmount);\n                }\n                betAmount = maxBetAmount;\n            }\n        }\n\n        s_requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            s_subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n\n        Bet memory newBet = Bet(\n            false,\n            payable(user),\n            tokenAddress,\n            s_requestId,\n            betAmount,\n            block.timestamp,\n            false\n            // 0\n        );\n        _userBets[user].push(s_requestId);\n        bets[s_requestId] = newBet;\n\n        // If ERC20, transfer the tokens\n        if (!isGasToken) {\n            IERC20(tokenAddress).safeTransferFrom(\n                user,\n                address(bank),\n                betAmount\n            );\n            // tokens goes to either this contract or bank\n            // might change to address(this)\n        }\n\n        return newBet;\n    }\n\n    uint256 public multiplier = 3;\n\n    function updateMultiplier(uint256 amount) external onlyOwner {\n        multiplier = amount;\n    }\n\n    function getMultiplier() private view returns (uint256) {\n        return multiplier;\n    }\n\n    /// @notice Gets the list of the last user bets.\n    /// @param user Address of the gamer.\n    /// @param dataLength The amount of bets to return.\n    /// @return A list of Bet.\n    function _getLastUserBets(address user, uint256 dataLength)\n        internal\n        view\n        returns (Bet[] memory)\n    {\n        uint256[] memory userBetsIds = _userBets[user];\n        uint256 betsLength = userBetsIds.length;\n\n        if (betsLength < dataLength) {\n            dataLength = betsLength;\n        }\n\n        Bet[] memory userBets = new Bet[](dataLength);\n        if (dataLength != 0) {\n            uint256 userBetsIndex;\n            for (uint256 i = betsLength; i > betsLength - dataLength; i--) {\n                userBets[userBetsIndex] = bets[userBetsIds[i - 1]];\n                userBetsIndex++;\n            }\n        }\n\n        return userBets;\n    }\n\n    function getBetData(uint256 id) public view returns (Bet memory betData) {\n        Bet storage data = bets[id];\n        return data;\n    }\n\n    function getBetStatus(uint256 id) public view returns (bool status) {\n        Bet storage data = bets[id];\n        return data.betStatus;\n    }\n\n    /// @notice Refunds the bet to the user if the Chainlink VRF callback failed.\n    /// @param id The Bet ID.\n    function refundBet(uint256 id) external nonReentrant {\n        Bet storage bet = bets[id];\n        if (bet.resolved == true) {\n            revert NotPendingBet();\n        } else if (block.timestamp < bet.blockTime + 30) {\n            revert NotFulfilled();\n        }\n\n        Token storage token = tokens[bet.token];\n        token.pendingCount--;\n\n        bet.resolved = true;\n        // bet.payout = bet.amount;\n\n        if (bet.token == address(0)) {\n            payable(bet.user).transfer(bet.amount);\n        } else {\n            IERC20(bet.token).safeTransfer(bet.user, bet.amount);\n        }\n    }\n\n    // Coin toss start here\n    /// @notice Calculates the target payout amount.\n    /// @param betAmount Bet amount.\n    /// @return The target payout amount.\n    function _getPayout(uint256 betAmount) private view returns (uint256) {\n        return betAmount * multiplier;\n    }\n\n    /// @notice Creates a new bet and stores the chosen coin face.\n    /// @param face The chosen color number from the struct .\n    /// @param token Address of the token.\n    /// @param tokenAmount The number of tokens bet.\n    function wager(\n        bool face,\n        address token,\n        uint256 tokenAmount\n    ) external payable whenNotPaused {\n        Bet memory bet = _newBet(token, tokenAmount, _getPayout(10000));\n\n        coinTossBets[bet.id].face = face;\n\n        emit PlaceBet(bet.id, bet.user, bet.token, bet.amount, face);\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Gets the token's balance.\n    /// The token's house edge allocation amounts are subtracted from the balance.\n    /// @param token Address of the token.\n    /// @return The amount of token available for profits.\n    function getTokenBalance(address token) public view returns (uint256) {\n        uint256 tokenBal;\n        if (_isGasToken(token)) {\n            return tokenBal = address(this).balance;\n        } else {\n            return tokenBal = IERC20(token).balanceOf(address(this));\n        }\n    }\n\n    function fulfillRandomWords(\n        uint256 id, /* requestId */\n        uint256[] memory randomWords\n    ) internal override {\n        CoinTossBet storage coinTossBet = coinTossBets[id];\n        Bet storage bet = bets[id];\n        uint256 roller = randomWords[0] % 2;\n\n        bool[2] memory coinSides = [false, true];\n        bool rolledCoinSide = coinSides[roller];\n        coinTossBet.rolled = rolledCoinSide;\n\n        if (rolledCoinSide == coinTossBet.face) {\n            bet.resolved = true;\n            bet.betStatus = true;\n            address token = bet.token;\n            address payable user = bet.user;\n            uint256 betAmount = bet.amount;\n\n            // processPayouts(bet, bet.betStatus, _getPayout(bet.amount));\n\n            uint256 payout = _getPayout(betAmount);\n            uint256 profit = payout;\n\n            uint256 profitFee = _getFees(token, betAmount);\n\n            uint256 profitPayout = profit - profitFee;\n\n            // Transfer the payout from the bank, the bet amount fee to the bank, and account fees.\n            bank.payout(user, token, profitPayout, profitFee);\n\n        } else {\n            bet.resolved = true;\n            bet.betStatus = false;\n        }\n\n        emit Roll(\n            bet.id,\n            bet.user,\n            bet.token,\n            bet.amount,\n            coinTossBet.face,\n            rolledCoinSide\n            // payout\n        );\n    }\n\n    /// @notice Pauses the contract to disable new bets.\n    function pause() external onlyOwner {\n        if (paused()) {\n            _unpause();\n        } else {\n            _pause();\n        }\n    }\n\n    /// @notice Gets the list of the last user bets.\n    /// @param user Address of the gamer.\n    /// @param dataLength The amount of bets to return.\n    /// @return A list of Coin Toss bet.\n    function getLastUserBets(address user, uint256 dataLength)\n        external\n        view\n        returns (FullCoinTossBet[] memory)\n    {\n        Bet[] memory lastBets = _getLastUserBets(user, dataLength);\n        FullCoinTossBet[] memory lastCoinTossBets = new FullCoinTossBet[](\n            lastBets.length\n        );\n        for (uint256 i; i < lastBets.length; i++) {\n            lastCoinTossBets[i] = FullCoinTossBet(\n                lastBets[i],\n                coinTossBets[lastBets[i].id]\n            );\n        }\n        return lastCoinTossBets;\n    }\n}"},"contracts/Dice.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Multicall} from \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\nimport {IBankV2} from \"./interface/IBankV2.sol\";\n\ncontract DiceV4 is\n    VRFConsumerBaseV2,\n    Ownable,\n    Pausable,\n    Multicall,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n\n    uint64 s_subscriptionId;\n\n    VRFCoordinatorV2Interface COORDINATOR;\n\n    address vrfCoordinator = 0xbd13f08b8352A3635218ab9418E340c60d6Eb418;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    // For a list of available gas lanes on each network,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    bytes32 keyHash =\n        0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4;\n\n    uint32 callbackGasLimit = 200000;\n\n    // The default is 3, but you can set this higher.\n    uint16 requestConfirmations = 3;\n\n    // For this example, retrieve 2 random values in one request.\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\n    uint32 numWords = 2;\n\n    uint256 public s_randomWords;\n    uint256 public s_requestId;\n    address public s_owner;\n\n    IBankV2 public bank;\n    /// @notice Emitted after the bank is set.\n    /// @param bank Address of the bank contract.\n    event SetBank(address bank);\n    /// @notice Emitted after the house edge is set for a token.\n    /// @param token Address of the token.\n    /// @param houseEdge House edge rate.\n    event SetHouseEdge(address indexed token, uint16 houseEdge);\n\n    error ExcessiveHouseEdge();\n    error ForbiddenToken();\n    error WrongGasValueToCoverFee();\n    error AccessDenied();\n    error InvalidAddress();\n    error TokenHasPendingBets();\n\n    struct Bet {\n        bool resolved;\n        address payable user;\n        address token;\n        uint256 id;\n        uint256 amount;\n        uint256 blockTime;\n        bool betStatus;\n        // uint256 payout;\n    }\n\n    /// @notice Maps bets IDs to Bet information.\n    mapping(uint256 => Bet) public bets;\n\n    /// @notice Maps users addrejsses to bets IDs\n    mapping(address => uint256[]) internal _userBets;\n\n    /// @notice Emitted after the bet amount is transfered to the user.\n    /// @param id The bet ID.\n    /// @param user Address of the gamer.\n    /// @param amount Number of tokens refunded.\n    /// @param chainlinkVRFCost The Chainlink VRF cost refunded to player.\n    event BetRefunded(\n        uint256 id,\n        address user,\n        uint256 amount,\n        uint256 chainlinkVRFCost\n    );\n\n    /// @notice Insufficient bet amount.\n    /// @param minBetAmount Bet amount.\n    error UnderMinBetAmount(uint256 minBetAmount);\n\n    /// @notice Bet isn't resolved yet.\n    error NotFulfilled();\n\n    /// @notice Bet provided doesn't exist or was already resolved.\n    error NotPendingBet();\n\n    /// @notice Full dice bet information struct.\n    /// @param bet The Bet struct information.\n    /// @param diceBet The Dice bet struct information.\n    /// @dev Used to package bet information for the front-end.\n    struct FullDiceBet {\n        Bet bet;\n        DiceBet diceBet;\n    }\n\n    /// @notice Dice bet information struct.\n    /// @param cap The chosen dice number.\n    /// @param rolled The rolled dice number.\n    struct DiceBet {\n        uint8 cap;\n        uint8 rolled;\n    }\n\n    /// @notice Maps bets IDs to chosen and rolled dice numbers.\n    mapping(uint256 => DiceBet) public diceBets;\n\n    struct betAudit {\n        bool paid;\n        uint256 betId;\n    }\n\n    mapping(uint256 => betAudit) betAuditCheck;\n\n    /// @notice Emitted after a bet is placed.\n    /// @param id The bet ID.\n    /// @param user Address of the gamer.\n    /// @param token Address of the token.\n    /// @param amount The bet amount.\n    /// @param cap The chosen coin face.\n    event PlaceBet(\n        uint256 id,\n        address indexed user,\n        address indexed token,\n        uint256 amount,\n        uint8 cap\n    );\n\n    /// @notice Emitted after a bet is rolled.\n    /// @param id The bet ID.\n    /// @param user Address of the gamer.\n    /// @param token Address of the token.\n    /// @param amount The bet amount.\n    /// @param cap The chosen dice number.\n    /// @param rolled The rolled dice number.\n    // / @param payout The payout amount.\n    event Roll(\n        uint256 id,\n        address indexed user,\n        address indexed token,\n        uint256 amount,\n        uint8 cap,\n        uint8 rolled\n        // uint256 payout\n    );\n\n    /// @notice Provided cap is not within 1 and 99 included.\n    /// @param minCap The minimum cap.\n    /// @param maxCap The maximum cap.\n    error CapNotInRange(uint8 minCap, uint8 maxCap);\n\n    struct Token {\n        uint16 houseEdge;\n        uint64 pendingCount;\n    }\n    /// @notice Maps tokens addresses to token configuration.\n    mapping(address => Token) public tokens;\n\n    // Ends here\n\n    constructor(uint64 subscriptionId, address bankAddress)\n        VRFConsumerBaseV2(vrfCoordinator)\n    {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        s_owner = msg.sender;\n        s_subscriptionId = subscriptionId;\n        setBank(IBankV2(bankAddress));\n    }\n\n    /// @notice Returns whether the token has pending bets.\n    /// @return Whether the token has pending bets.\n    function hasPendingBets(address token) public view returns (bool) {\n        return tokens[token].pendingCount != 0;\n    }\n\n    /// @notice Sets the Bank contract.\n    /// @param _bank Address of the Bank contract.\n    function setBank(IBankV2 _bank) public onlyOwner {\n        if (address(_bank) == address(0)) {\n            // revert InvalidAddress();\n            // return false;\n        }\n        bank = _bank;\n        emit SetBank(address(_bank));\n    }\n\n    /// @notice Sets the game house edge rate for a specific token.\n    /// @param token Address of the token.\n    /// @param houseEdge House edge rate.\n    /// @dev The house edge rate couldn't exceed 4%.\n    function setHouseEdge(address token, uint16 houseEdge) external onlyOwner {\n        if (houseEdge > 400) {\n            revert ExcessiveHouseEdge();\n        }\n        if (hasPendingBets(token)) {\n            revert TokenHasPendingBets();\n        }\n        tokens[token].houseEdge = houseEdge;\n        emit SetHouseEdge(token, houseEdge);\n    }\n\n    /// @notice Check if the token has the 0x address.\n    /// @param token Address of the token.\n    /// @return Whether the token's address is the 0x address.\n    function _isGasToken(address token) private pure returns (bool) {\n        return token == address(0);\n    }\n\n    function _getFees(address token, uint256 amount)\n        private\n        view\n        returns (uint256)\n    {\n        return (tokens[token].houseEdge * amount) / 10000;\n    }\n\n    function _newBet(\n        address tokenAddress,\n        uint256 tokenAmount,\n        uint256 multi\n    ) internal whenNotPaused nonReentrant returns (Bet memory) {\n        Token storage token = tokens[tokenAddress];\n        if (\n            bank.isAllowedToken(tokenAddress) == false || token.houseEdge == 0\n        ) {\n            revert ForbiddenToken();\n        }\n\n        address user = msg.sender;\n        bool isGasToken = tokenAddress == address(0);\n        uint256 betAmount = tokenAmount;\n\n        {\n            uint256 minBetAmount = bank.getMinBetAmount(tokenAddress);\n            if (betAmount < minBetAmount) {\n                revert UnderMinBetAmount(minBetAmount);\n            }\n\n            uint256 maxBetAmount = bank.getMaxBetAmount(tokenAddress, multi);\n            if (betAmount > maxBetAmount) {\n                if (isGasToken) {\n                    payable(user).transfer(betAmount - maxBetAmount);\n                }\n                betAmount = maxBetAmount;\n            }\n        }\n\n        s_requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            s_subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n\n        Bet memory newBet = Bet(\n            false,\n            payable(user),\n            tokenAddress,\n            s_requestId,\n            betAmount,\n            block.number,\n            false\n            // 0\n        );\n        _userBets[user].push(s_requestId);\n        bets[s_requestId] = newBet;\n\n        // If ERC20, transfer the tokens\n        if (!isGasToken) {\n            IERC20(tokenAddress).safeTransferFrom(\n                user,\n                address(bank),\n                betAmount\n            );\n            // tokens goes to either this contract or bank\n            // might change to address(this)\n        }\n\n        return newBet;\n    }\n\n    // Wallet\n\n    uint256 public multiplier = 3;\n\n    function updateMultiplier(uint256 amount) external onlyOwner {\n        multiplier = amount;\n    }\n\n    function getMultiplier() private view returns (uint256) {\n        return multiplier;\n    }\n\n    /// @notice Gets the list of the last user bets.\n    /// @param user Address of the gamer.\n    /// @param dataLength The amount of bets to return.\n    /// @return A list of Bet.\n    function _getLastUserBets(address user, uint256 dataLength)\n        internal\n        view\n        returns (Bet[] memory)\n    {\n        uint256[] memory userBetsIds = _userBets[user];\n        uint256 betsLength = userBetsIds.length;\n\n        if (betsLength < dataLength) {\n            dataLength = betsLength;\n        }\n\n        Bet[] memory userBets = new Bet[](dataLength);\n        if (dataLength != 0) {\n            uint256 userBetsIndex;\n            for (uint256 i = betsLength; i > betsLength - dataLength; i--) {\n                userBets[userBetsIndex] = bets[userBetsIds[i - 1]];\n                userBetsIndex++;\n            }\n        }\n\n        return userBets;\n    }\n\n    function getBetData(uint256 id) public view returns (Bet memory betData) {\n        Bet storage data = bets[id];\n        return data;\n    }\n\n    function getBetStatus(uint256 id) public view returns (bool status) {\n        Bet storage data = bets[id];\n        return data.betStatus;\n    }\n\n    /// @notice Refunds the bet to the user if the Chainlink VRF callback failed.\n    /// @param id The Bet ID.\n    function refundBet(uint256 id) external nonReentrant {\n        Bet storage bet = bets[id];\n        if (bet.resolved == true) {\n            revert NotPendingBet();\n        } else if (block.timestamp < bet.blockTime + 30) {\n            revert NotFulfilled();\n        }\n\n        Token storage token = tokens[bet.token];\n        token.pendingCount--;\n\n        bet.resolved = true;\n        // bet.payout = bet.amount;\n\n        if (bet.token == address(0)) {\n            payable(bet.user).transfer(bet.amount);\n        } else {\n            IERC20(bet.token).safeTransfer(bet.user, bet.amount);\n        }\n    }\n\n    /// @notice Calculates the target payout amount.\n    /// @param betAmount Bet amount.\n    /// @param cap The chosen dice number.\n    /// @return The target payout amount.\n    function _getPayout(uint256 betAmount, uint8 cap)\n        private\n        pure\n        returns (uint256)\n    {\n        return (betAmount * 100) / (100 - cap);\n    }\n\n    /// @notice Creates a new bet and stores the chosen coin face.\n    /// @param cap The chosen number .\n    /// @param token Address of the token.\n    /// @param tokenAmount The number of tokens bet.\n    function wager(\n        uint8 cap,\n        address token,\n        uint256 tokenAmount\n    ) external payable whenNotPaused {\n        /// Dice cap 1 gives 99% chance.\n        /// Dice cap 99 gives 1% chance.\n        if (cap == 0 || cap > 99) {\n            revert CapNotInRange(1, 99);\n        }\n\n        Bet memory bet = _newBet(token, tokenAmount, _getPayout(10000, cap));\n        diceBets[bet.id].cap = cap;\n\n        emit PlaceBet(bet.id, bet.user, bet.token, bet.amount, cap);\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Gets the token's balance.\n    /// The token's house edge allocation amounts are subtracted from the balance.\n    /// @param token Address of the token.\n    /// @return The amount of token available for profits.\n    function getTokenBalance(address token) public view returns (uint256) {\n        uint256 tokenBal;\n        if (_isGasToken(token)) {\n            return tokenBal = address(this).balance;\n        } else {\n            return tokenBal = IERC20(token).balanceOf(address(this));\n        }\n    }\n\n    function fulfillRandomWords(\n        uint256 id, /* requestId */\n        uint256[] memory randomWords\n    ) internal override {\n        DiceBet storage diceBet = diceBets[id];\n        Bet storage bet = bets[id];\n        uint8 rolled = uint8((randomWords[0] % 100) + 1);\n        diceBet.rolled = rolled;\n\n        if (rolled > diceBet.cap) {\n            bet.resolved = true;\n            bet.betStatus = true;\n            // processPayouts(bet, bet.betStatus, payout);\n            address token = bet.token;\n            address payable user = bet.user;\n            uint256 betAmount = bet.amount;\n\n            uint256 payout = _getPayout(betAmount, diceBet.cap);\n            uint256 profit = payout;\n            uint256 profitFee = _getFees(token, betAmount);\n            uint256 profitPayout = profit - profitFee;\n\n            // Transfer the payout from the bank, the bet amount fee to the bank, and account fees.\n            bank.payout(user, token, profitPayout, profitFee);\n        } else {\n            bet.resolved = true;\n            bet.betStatus = false;\n        }\n\n        emit Roll(\n            bet.id,\n            bet.user,\n            bet.token,\n            bet.amount,\n            diceBet.cap,\n            rolled\n            // payout\n        );\n    }\n\n    /// @notice Pauses the contract to disable new bets.\n    function pause() external onlyOwner {\n        if (paused()) {\n            _unpause();\n        } else {\n            _pause();\n        }\n    }\n\n    /// @notice Gets the list of the last user bets.\n    /// @param user Address of the gamer.\n    /// @param dataLength The amount of bets to return.\n    /// @return A list of Dice bet.\n    function getLastUserBets(address user, uint256 dataLength)\n        external\n        view\n        returns (FullDiceBet[] memory)\n    {\n        Bet[] memory lastBets = _getLastUserBets(user, dataLength);\n        FullDiceBet[] memory lastDiceBets = new FullDiceBet[](lastBets.length);\n        for (uint256 i; i < lastBets.length; i++) {\n            lastDiceBets[i] = FullDiceBet(\n                lastBets[i],\n                diceBets[lastBets[i].id]\n            );\n        }\n        return lastDiceBets;\n    }\n}\n"},"contracts/interface/IBankV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n/// @notice Minimal interface for Bank.\n/// @author Romuald Hog.\ninterface IBankV2 {\n    /// @notice Gets the token's allow status used on the games smart contracts.\n    /// @param token Address of the token.\n    /// @return Whether the token is enabled for bets.\n    function isAllowedToken(address token) external view returns (bool);\n\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\n    /// @param user Address of the gamer.\n    /// @param token Address of the token.\n    /// @param profit Number of tokens to be sent to the gamer.\n    /// @param fees Bet amount and bet profit fees amount.\n    function payout(\n        address payable user,\n        address token,\n        uint256 profit,\n        uint256 fees\n    ) external payable;\n\n    /// @notice Accounts a loss bet.\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\n    /// @param tokenAddress Address of the token.\n    /// @param amount Loss bet amount.\n    function cashIn(address tokenAddress, uint256 amount) external payable;\n\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\n    /// @param token Address of the token.\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\n    /// @return Maximum bet amount for the token.\n    /// @dev The multiplier should be at least 10000.\n    function getMaxBetAmount(address token, uint256 multiplier)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Harvests tokens dividends.\n    /// @return tokens The list of tokens addresses.\n    /// @return amounts The list of tokens' amounts harvested.\n    function harvestDividends()\n        external\n        returns (address[] memory tokens, uint256[] memory amounts);\n\n    /// @notice Get the available tokens dividends amounts.\n    /// @return tokens The list of tokens addresses.\n    /// @return amounts The list of tokens' amounts harvested.\n    function getDividends()\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts);\n\n\n    function getTokenOwner(address token) external view returns (address);\n\n    function getMinBetAmount(address token) external view returns (uint256);\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/AutomationBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/AutomationBase.sol","exportedSymbols":{"AutomationBase":[29]},"id":30,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationBase","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":29,"linearizedBaseContracts":[29],"name":"AutomationBase","nameLocation":"66:14:0","nodeType":"ContractDefinition","nodes":[{"id":3,"name":"OnlySimulatedBackend","nameLocation":"91:20:0","nodeType":"ErrorDefinition","parameters":{"id":2,"nodeType":"ParameterList","parameters":[],"src":"111:2:0"},"src":"85:29:0"},{"body":{"id":19,"nodeType":"Block","src":"290:83:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":13,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"300:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":8,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"origin","nodeType":"MemberAccess","src":"300:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":11,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"321:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"313:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:0","typeDescriptions":{}}},"id":12,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"313:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"300:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":18,"nodeType":"IfStatement","src":"296:73:0","trueBody":{"id":17,"nodeType":"Block","src":"325:44:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":14,"name":"OnlySimulatedBackend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"340:20:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":15,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"340:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":16,"nodeType":"RevertStatement","src":"333:29:0"}]}}]},"documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"118:127:0","text":" @notice method that allows it to be simulated via eth_call by checking that\n the sender is the zero address."},"id":20,"implemented":true,"kind":"function","modifiers":[],"name":"preventExecution","nameLocation":"257:16:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[],"src":"273:2:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"290:0:0"},"scope":29,"src":"248:125:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":27,"nodeType":"Block","src":"534:36:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":23,"name":"preventExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"540:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"540:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25,"nodeType":"ExpressionStatement","src":"540:18:0"},{"id":26,"nodeType":"PlaceholderStatement","src":"564:1:0"}]},"documentation":{"id":21,"nodeType":"StructuredDocumentation","src":"377:129:0","text":" @notice modifier that allows it to be simulated via eth_call by checking\n that the sender is the zero address."},"id":28,"name":"cannotExecute","nameLocation":"518:13:0","nodeType":"ModifierDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"531:2:0"},"src":"509:61:0","virtual":false,"visibility":"internal"}],"scope":30,"src":"57:515:0","usedErrors":[3]}],"src":"32:541:0"},"id":0},"@chainlink/contracts/src/v0.8/AutomationCompatible.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/AutomationCompatible.sol","exportedSymbols":{"AutomationBase":[29],"AutomationCompatible":[38],"AutomationCompatibleInterface":[123]},"id":39,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":31,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/AutomationBase.sol","file":"./AutomationBase.sol","id":32,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":39,"sourceUnit":30,"src":"57:30:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"./interfaces/AutomationCompatibleInterface.sol","id":33,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":39,"sourceUnit":124,"src":"88:56:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":34,"name":"AutomationBase","nodeType":"IdentifierPath","referencedDeclaration":29,"src":"188:14:1"},"id":35,"nodeType":"InheritanceSpecifier","src":"188:14:1"},{"baseName":{"id":36,"name":"AutomationCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":123,"src":"204:29:1"},"id":37,"nodeType":"InheritanceSpecifier","src":"204:29:1"}],"canonicalName":"AutomationCompatible","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":38,"linearizedBaseContracts":[38,123,29],"name":"AutomationCompatible","nameLocation":"164:20:1","nodeType":"ContractDefinition","nodes":[],"scope":39,"src":"146:90:1","usedErrors":[3]}],"src":"32:205:1"},"id":1},"@chainlink/contracts/src/v0.8/KeeperCompatible.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/KeeperCompatible.sol","exportedSymbols":{"KeeperBase":[29],"KeeperCompatible":[38],"KeeperCompatibleInterface":[123]},"id":47,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":40,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"125:23:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/AutomationCompatible.sol","file":"./AutomationCompatible.sol","id":42,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":47,"sourceUnit":39,"src":"149:84:2","symbolAliases":[{"foreign":{"id":41,"name":"AutomationCompatible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"157:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AutomationCompatible_$38_$","typeString":"type(contract AutomationCompatible)"}},"local":"KeeperCompatible","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/AutomationBase.sol","file":"./AutomationBase.sol","id":44,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":47,"sourceUnit":30,"src":"234:66:2","symbolAliases":[{"foreign":{"id":43,"name":"AutomationBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"242:14:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AutomationBase_$29_$","typeString":"type(contract AutomationBase)"}},"local":"KeeperBase","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"./interfaces/AutomationCompatibleInterface.sol","id":46,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":47,"sourceUnit":124,"src":"301:122:2","symbolAliases":[{"foreign":{"id":45,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"309:29:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AutomationCompatibleInterface_$123_$","typeString":"type(contract AutomationCompatibleInterface)"}},"local":"KeeperCompatibleInterface","nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"125:299:2"},"id":2},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[104]},"id":105,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":48,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"57:5275:3","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":104,"linearizedBaseContracts":[104],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:3","nodeType":"ContractDefinition","nodes":[{"id":55,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:3","nodeType":"ErrorDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"have","nameLocation":"5413:4:3","nodeType":"VariableDeclaration","scope":55,"src":"5405:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"want","nameLocation":"5427:4:3","nodeType":"VariableDeclaration","scope":55,"src":"5419:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:3"},"src":"5373:60:3"},{"constant":false,"id":57,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:3","nodeType":"VariableDeclaration","scope":104,"src":"5436:40:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":67,"nodeType":"Block","src":"5593:43:3","statements":[{"expression":{"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":63,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"5599:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":64,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"5616:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":66,"nodeType":"ExpressionStatement","src":"5599:32:3"}]},"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"5481:72:3","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":68,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:3","nodeType":"VariableDeclaration","scope":68,"src":"5568:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:3"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"5593:0:3"},"scope":104,"src":"5556:80:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"5640:686:3","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":77,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:3","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:3","nodeType":"VariableDeclaration","scope":77,"src":"6357:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:3","nodeType":"VariableDeclaration","scope":77,"src":"6376:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":72,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":73,"nodeType":"ArrayTypeName","src":"6376:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:3"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[],"src":"6422:0:3"},"scope":104,"src":"6329:94:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":102,"nodeType":"Block","src":"6707:167:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":85,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":87,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"6731:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":96,"nodeType":"IfStatement","src":"6713:109:3","trueBody":{"id":95,"nodeType":"Block","src":"6747:75:3","statements":[{"errorCall":{"arguments":[{"expression":{"id":90,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":92,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"6800:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":89,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"6762:25:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":94,"nodeType":"RevertStatement","src":"6755:60:3"}]}},{"expression":{"arguments":[{"id":98,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"6846:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":99,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"6857:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":97,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"6827:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"ExpressionStatement","src":"6827:42:3"}]},"functionSelector":"1fe543e3","id":103,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:3","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:3","nodeType":"VariableDeclaration","scope":103,"src":"6649:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":78,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:3","nodeType":"VariableDeclaration","scope":103,"src":"6668:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":80,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":81,"nodeType":"ArrayTypeName","src":"6668:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:3"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"6707:0:3"},"scope":104,"src":"6618:256:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":105,"src":"5333:1543:3","usedErrors":[55]}],"src":"32:6845:3"},"id":3},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[123]},"id":124,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":106,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationCompatibleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":123,"linearizedBaseContracts":[123],"name":"AutomationCompatibleInterface","nameLocation":"67:29:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"101:985:4","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":116,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:4","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:4","nodeType":"VariableDeclaration","scope":116,"src":"1110:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":108,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:4"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:4","nodeType":"VariableDeclaration","scope":116,"src":"1154:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":111,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":114,"mutability":"mutable","name":"performData","nameLocation":"1186:11:4","nodeType":"VariableDeclaration","scope":116,"src":"1173:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":113,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:4"},"scope":123,"src":"1089:110:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"1203:1003:4","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":122,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:4","nodeType":"FunctionDefinition","parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"performData","nameLocation":"2247:11:4","nodeType":"VariableDeclaration","scope":122,"src":"2232:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":118,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:4"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"2268:0:4"},"scope":123,"src":"2209:60:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":124,"src":"57:2214:4","usedErrors":[]}],"src":"32:2240:4"},"id":4},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[219]},"id":220,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":125,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":219,"linearizedBaseContracts":[219],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"97:267:5","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":136,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:5","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"392:2:5"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":136,"src":"437:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":128,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":136,"src":"451:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":130,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":136,"src":"465:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":133,"nodeType":"ArrayTypeName","src":"465:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:5"},"scope":219,"src":"367:121:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"492:1511:5","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:5","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:5","nodeType":"VariableDeclaration","scope":152,"src":"2039:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":141,"mutability":"mutable","name":"subId","nameLocation":"2067:5:5","nodeType":"VariableDeclaration","scope":152,"src":"2060:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":140,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":143,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:5","nodeType":"VariableDeclaration","scope":152,"src":"2078:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":142,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:5","nodeType":"VariableDeclaration","scope":152,"src":"2118:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":144,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":147,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:5","nodeType":"VariableDeclaration","scope":152,"src":"2147:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":146,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:5"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:5","nodeType":"VariableDeclaration","scope":152,"src":"2185:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":149,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:5"},"scope":219,"src":"2006:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"2208:384:5","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":158,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:5","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[],"src":"2622:2:5"},"returnParameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"subId","nameLocation":"2650:5:5","nodeType":"VariableDeclaration","scope":158,"src":"2643:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":155,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:5"},"scope":219,"src":"2595:62:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"2661:381:5","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":173,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:5","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"subId","nameLocation":"3077:5:5","nodeType":"VariableDeclaration","scope":173,"src":"3070:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":160,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:5"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"balance","nameLocation":"3133:7:5","nodeType":"VariableDeclaration","scope":173,"src":"3126:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":163,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:5","nodeType":"VariableDeclaration","scope":173,"src":"3148:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":165,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"owner","nameLocation":"3179:5:5","nodeType":"VariableDeclaration","scope":173,"src":"3171:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":167,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:5","nodeType":"VariableDeclaration","scope":173,"src":"3192:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":169,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":170,"nodeType":"ArrayTypeName","src":"3192:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:5"},"scope":219,"src":"3045:180:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":174,"nodeType":"StructuredDocumentation","src":"3229:164:5","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":181,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:5","nodeType":"FunctionDefinition","parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"subId","nameLocation":"3445:5:5","nodeType":"VariableDeclaration","scope":181,"src":"3438:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":175,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:5","nodeType":"VariableDeclaration","scope":181,"src":"3452:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:5"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[],"src":"3478:0:5"},"scope":219,"src":"3396:83:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"3483:212:5","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":187,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:5","nodeType":"FunctionDefinition","parameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"subId","nameLocation":"3746:5:5","nodeType":"VariableDeclaration","scope":187,"src":"3739:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":183,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:5"},"returnParameters":{"id":186,"nodeType":"ParameterList","parameters":[],"src":"3761:0:5"},"scope":219,"src":"3698:64:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"3766:170:5","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":195,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:5","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"subId","nameLocation":"3967:5:5","nodeType":"VariableDeclaration","scope":195,"src":"3960:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":189,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:5","nodeType":"VariableDeclaration","scope":195,"src":"3974:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:5"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"4000:0:5"},"scope":219,"src":"3939:62:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"4005:172:5","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":203,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:5","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"subId","nameLocation":"4211:5:5","nodeType":"VariableDeclaration","scope":203,"src":"4204:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":197,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:5","nodeType":"VariableDeclaration","scope":203,"src":"4218:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:5"},"returnParameters":{"id":202,"nodeType":"ParameterList","parameters":[],"src":"4244:0:5"},"scope":219,"src":"4180:65:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"4249:140:5","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":211,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:5","nodeType":"FunctionDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"subId","nameLocation":"4427:5:5","nodeType":"VariableDeclaration","scope":211,"src":"4420:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":205,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"to","nameLocation":"4442:2:5","nodeType":"VariableDeclaration","scope":211,"src":"4434:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:5"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"4454:0:5"},"scope":219,"src":"4392:63:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":218,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:5","nodeType":"FunctionDefinition","parameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"subId","nameLocation":"4788:5:5","nodeType":"VariableDeclaration","scope":218,"src":"4781:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":212,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:5"},"returnParameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":218,"src":"4818:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":215,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:5"},"scope":219,"src":"4751:73:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":220,"src":"57:4769:5","usedErrors":[]}],"src":"32:4795:5"},"id":5},"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[535],"Context":[1911],"ERC165":[2219],"IAccessControl":[733],"IERC165":[2231],"Math":[3097],"SignedMath":[3202],"Strings":[2195]},"id":536,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":221,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:6"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":222,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":536,"sourceUnit":734,"src":"133:30:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":223,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":536,"sourceUnit":1912,"src":"164:30:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":224,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":536,"sourceUnit":2196,"src":"195:30:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":225,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":536,"sourceUnit":2220,"src":"226:43:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":227,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1911,"src":"1967:7:6"},"id":228,"nodeType":"InheritanceSpecifier","src":"1967:7:6"},{"baseName":{"id":229,"name":"IAccessControl","nodeType":"IdentifierPath","referencedDeclaration":733,"src":"1976:14:6"},"id":230,"nodeType":"InheritanceSpecifier","src":"1976:14:6"},{"baseName":{"id":231,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":2219,"src":"1992:6:6"},"id":232,"nodeType":"InheritanceSpecifier","src":"1992:6:6"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":226,"nodeType":"StructuredDocumentation","src":"271:1660:6","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":535,"linearizedBaseContracts":[535,2219,2231,733,1911],"name":"AccessControl","nameLocation":"1950:13:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":239,"members":[{"constant":false,"id":236,"mutability":"mutable","name":"members","nameLocation":"2056:7:6","nodeType":"VariableDeclaration","scope":239,"src":"2031:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":235,"keyType":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"2039:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2031:24:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":234,"name":"bool","nodeType":"ElementaryTypeName","src":"2050:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"adminRole","nameLocation":"2081:9:6","nodeType":"VariableDeclaration","scope":239,"src":"2073:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2073:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2012:8:6","nodeType":"StructDefinition","scope":535,"src":"2005:92:6","visibility":"public"},{"constant":false,"id":244,"mutability":"mutable","name":"_roles","nameLocation":"2140:6:6","nodeType":"VariableDeclaration","scope":535,"src":"2103:43:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":243,"keyType":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2103:28:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueType":{"id":242,"nodeType":"UserDefinedTypeName","pathNode":{"id":241,"name":"RoleData","nodeType":"IdentifierPath","referencedDeclaration":239,"src":"2122:8:6"},"referencedDeclaration":239,"src":"2122:8:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$239_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":247,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2177:18:6","nodeType":"VariableDeclaration","scope":535,"src":"2153:49:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2198:4:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":257,"nodeType":"Block","src":"2621:44:6","statements":[{"expression":{"arguments":[{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2642:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":252,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[312,351],"referencedDeclaration":312,"src":"2631:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2631:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":255,"nodeType":"ExpressionStatement","src":"2631:16:6"},{"id":256,"nodeType":"PlaceholderStatement","src":"2657:1:6"}]},"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"2209:375:6","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":258,"name":"onlyRole","nameLocation":"2598:8:6","nodeType":"ModifierDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"role","nameLocation":"2615:4:6","nodeType":"VariableDeclaration","scope":258,"src":"2607:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2607:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2606:14:6"},"src":"2589:76:6","virtual":false,"visibility":"internal"},{"baseFunctions":[2218],"body":{"id":279,"nodeType":"Block","src":"2823:111:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":267,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"2840:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":269,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"2860:14:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$733_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$733_$","typeString":"type(contract IAccessControl)"}],"id":268,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2855:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2855:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$733","typeString":"type(contract IAccessControl)"}},"id":271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2855:32:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2840:47:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":275,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"2915:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":273,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2891:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$535_$","typeString":"type(contract super AccessControl)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2218,"src":"2891:23:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2891:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2840:87:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":266,"id":278,"nodeType":"Return","src":"2833:94:6"}]},"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"2671:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":280,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2741:17:6","nodeType":"FunctionDefinition","overrides":{"id":263,"nodeType":"OverrideSpecifier","overrides":[],"src":"2799:8:6"},"parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"interfaceId","nameLocation":"2766:11:6","nodeType":"VariableDeclaration","scope":280,"src":"2759:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":260,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2759:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2758:20:6"},"returnParameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":280,"src":"2817:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":264,"name":"bool","nodeType":"ElementaryTypeName","src":"2817:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2816:6:6"},"scope":535,"src":"2732:202:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[700],"body":{"id":298,"nodeType":"Block","src":"3113:53:6","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":291,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"3130:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":293,"indexExpression":{"id":292,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3137:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$239_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":236,"src":"3130:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":296,"indexExpression":{"id":295,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3151:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":290,"id":297,"nodeType":"Return","src":"3123:36:6"}]},"documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"2940:76:6","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":299,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3030:7:6","nodeType":"FunctionDefinition","overrides":{"id":287,"nodeType":"OverrideSpecifier","overrides":[],"src":"3089:8:6"},"parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"mutability":"mutable","name":"role","nameLocation":"3046:4:6","nodeType":"VariableDeclaration","scope":299,"src":"3038:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3038:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"account","nameLocation":"3060:7:6","nodeType":"VariableDeclaration","scope":299,"src":"3052:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"3052:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3037:31:6"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"3107:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":288,"name":"bool","nodeType":"ElementaryTypeName","src":"3107:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3106:6:6"},"scope":535,"src":"3021:145:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":311,"nodeType":"Block","src":"3516:47:6","statements":[{"expression":{"arguments":[{"id":306,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"3537:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":307,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"3543:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3543:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":305,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[312,351],"referencedDeclaration":351,"src":"3526:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3526:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"ExpressionStatement","src":"3526:30:6"}]},"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"3172:283:6","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":312,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3469:10:6","nodeType":"FunctionDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"role","nameLocation":"3488:4:6","nodeType":"VariableDeclaration","scope":312,"src":"3480:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3480:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3479:14:6"},"returnParameters":{"id":304,"nodeType":"ParameterList","parameters":[],"src":"3516:0:6"},"scope":535,"src":"3460:103:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"3917:406:6","statements":[{"condition":{"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3931:23:6","subExpression":{"arguments":[{"id":321,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"3940:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":322,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"3946:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":320,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"3932:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3932:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"3927:390:6","trueBody":{"id":348,"nodeType":"Block","src":"3956:361:6","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4064:25:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":333,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4135:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":331,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"4115:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2195_$","typeString":"type(library Strings)"}},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"4115:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4115:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4169:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":340,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"4242:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4234:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":338,"name":"uint256","nodeType":"ElementaryTypeName","src":"4234:7:6","typeDescriptions":{}}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4234:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4249:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":336,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"4214:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2195_$","typeString":"type(library Strings)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2149,"src":"4214:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4214:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":328,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4022:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4022:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4022:252:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3994:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":326,"name":"string","nodeType":"ElementaryTypeName","src":"3994:6:6","typeDescriptions":{}}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3994:298:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":325,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3970:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3970:336:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":347,"nodeType":"ExpressionStatement","src":"3970:336:6"}]}}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"3569:270:6","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3853:10:6","nodeType":"FunctionDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"role","nameLocation":"3872:4:6","nodeType":"VariableDeclaration","scope":351,"src":"3864:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3864:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":317,"mutability":"mutable","name":"account","nameLocation":"3886:7:6","nodeType":"VariableDeclaration","scope":351,"src":"3878:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"3878:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3863:31:6"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"3917:0:6"},"scope":535,"src":"3844:479:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[708],"body":{"id":365,"nodeType":"Block","src":"4587:46:6","statements":[{"expression":{"expression":{"baseExpression":{"id":360,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"4604:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":362,"indexExpression":{"id":361,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4611:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4604:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$239_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":238,"src":"4604:22:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":359,"id":364,"nodeType":"Return","src":"4597:29:6"}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4329:170:6","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":366,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4513:12:6","nodeType":"FunctionDefinition","overrides":{"id":356,"nodeType":"OverrideSpecifier","overrides":[],"src":"4560:8:6"},"parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"role","nameLocation":"4534:4:6","nodeType":"VariableDeclaration","scope":366,"src":"4526:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4526:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4525:14:6"},"returnParameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":366,"src":"4578:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4578:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4577:9:6"},"scope":535,"src":"4504:129:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[716],"body":{"id":385,"nodeType":"Block","src":"5032:42:6","statements":[{"expression":{"arguments":[{"id":381,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"5053:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":382,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"5059:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":380,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"5042:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5042:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":384,"nodeType":"ExpressionStatement","src":"5042:25:6"}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"4639:285:6","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":386,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":376,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"5025:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":375,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5012:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5012:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":378,"kind":"modifierInvocation","modifierName":{"id":374,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":258,"src":"5003:8:6"},"nodeType":"ModifierInvocation","src":"5003:28:6"}],"name":"grantRole","nameLocation":"4938:9:6","nodeType":"FunctionDefinition","overrides":{"id":373,"nodeType":"OverrideSpecifier","overrides":[],"src":"4994:8:6"},"parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"role","nameLocation":"4956:4:6","nodeType":"VariableDeclaration","scope":386,"src":"4948:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":368,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4948:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"account","nameLocation":"4970:7:6","nodeType":"VariableDeclaration","scope":386,"src":"4962:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"4962:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4947:31:6"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[],"src":"5032:0:6"},"scope":535,"src":"4929:145:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[724],"body":{"id":405,"nodeType":"Block","src":"5458:43:6","statements":[{"expression":{"arguments":[{"id":401,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"5480:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":402,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"5486:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":400,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"5468:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5468:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":404,"nodeType":"ExpressionStatement","src":"5468:26:6"}]},"documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"5080:269:6","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":406,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":396,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"5451:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":395,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5438:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5438:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":398,"kind":"modifierInvocation","modifierName":{"id":394,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":258,"src":"5429:8:6"},"nodeType":"ModifierInvocation","src":"5429:28:6"}],"name":"revokeRole","nameLocation":"5363:10:6","nodeType":"FunctionDefinition","overrides":{"id":393,"nodeType":"OverrideSpecifier","overrides":[],"src":"5420:8:6"},"parameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"role","nameLocation":"5382:4:6","nodeType":"VariableDeclaration","scope":406,"src":"5374:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5374:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":391,"mutability":"mutable","name":"account","nameLocation":"5396:7:6","nodeType":"VariableDeclaration","scope":406,"src":"5388:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":390,"name":"address","nodeType":"ElementaryTypeName","src":"5388:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5373:31:6"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[],"src":"5458:0:6"},"scope":535,"src":"5354:147:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[732],"body":{"id":428,"nodeType":"Block","src":"6115:137:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6133:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":417,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"6144:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6144:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6133:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6158:49:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6125:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6125:83:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":422,"nodeType":"ExpressionStatement","src":"6125:83:6"},{"expression":{"arguments":[{"id":424,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6231:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":425,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6237:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":423,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"6219:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6219:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":427,"nodeType":"ExpressionStatement","src":"6219:26:6"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"5507:526:6","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":429,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6047:12:6","nodeType":"FunctionDefinition","overrides":{"id":413,"nodeType":"OverrideSpecifier","overrides":[],"src":"6106:8:6"},"parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"role","nameLocation":"6068:4:6","nodeType":"VariableDeclaration","scope":429,"src":"6060:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6060:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"account","nameLocation":"6082:7:6","nodeType":"VariableDeclaration","scope":429,"src":"6074:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"6074:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6059:31:6"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[],"src":"6115:0:6"},"scope":535,"src":"6038:214:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":442,"nodeType":"Block","src":"7005:42:6","statements":[{"expression":{"arguments":[{"id":438,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"7026:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":439,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"7032:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":437,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"7015:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7015:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"ExpressionStatement","src":"7015:25:6"}]},"documentation":{"id":430,"nodeType":"StructuredDocumentation","src":"6258:674:6","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6946:10:6","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"role","nameLocation":"6965:4:6","nodeType":"VariableDeclaration","scope":443,"src":"6957:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6957:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"account","nameLocation":"6979:7:6","nodeType":"VariableDeclaration","scope":443,"src":"6971:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"6971:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6956:31:6"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[],"src":"7005:0:6"},"scope":535,"src":"6937:110:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":470,"nodeType":"Block","src":"7245:174:6","statements":[{"assignments":[452],"declarations":[{"constant":false,"id":452,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7263:17:6","nodeType":"VariableDeclaration","scope":470,"src":"7255:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7255:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":456,"initialValue":{"arguments":[{"id":454,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":453,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"7283:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7283:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7255:46:6"},{"expression":{"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":457,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"7311:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":459,"indexExpression":{"id":458,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"7318:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7311:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$239_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":238,"src":"7311:22:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":461,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"7336:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7311:34:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":463,"nodeType":"ExpressionStatement","src":"7311:34:6"},{"eventCall":{"arguments":[{"id":465,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"7377:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":466,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"7383:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":467,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"7402:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":464,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"7360:16:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7360:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":469,"nodeType":"EmitStatement","src":"7355:57:6"}]},"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"7053:114:6","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":471,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7181:13:6","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"role","nameLocation":"7203:4:6","nodeType":"VariableDeclaration","scope":471,"src":"7195:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7195:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"adminRole","nameLocation":"7217:9:6","nodeType":"VariableDeclaration","scope":471,"src":"7209:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7209:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7194:33:6"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"7245:0:6"},"scope":535,"src":"7172:247:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":502,"nodeType":"Block","src":"7655:165:6","statements":[{"condition":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7669:23:6","subExpression":{"arguments":[{"id":480,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7678:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":481,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"7684:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":479,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"7670:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7670:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":501,"nodeType":"IfStatement","src":"7665:149:6","trueBody":{"id":500,"nodeType":"Block","src":"7694:120:6","statements":[{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":484,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"7708:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":486,"indexExpression":{"id":485,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7715:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7708:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$239_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":236,"src":"7708:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":489,"indexExpression":{"id":488,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"7729:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7708:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7740:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7708:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":492,"nodeType":"ExpressionStatement","src":"7708:36:6"},{"eventCall":{"arguments":[{"id":494,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7775:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":495,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"7781:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":496,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"7790:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7790:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":493,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"7763:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7763:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":499,"nodeType":"EmitStatement","src":"7758:45:6"}]}}]},"documentation":{"id":472,"nodeType":"StructuredDocumentation","src":"7425:157:6","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":503,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7596:10:6","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"role","nameLocation":"7615:4:6","nodeType":"VariableDeclaration","scope":503,"src":"7607:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7607:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"account","nameLocation":"7629:7:6","nodeType":"VariableDeclaration","scope":503,"src":"7621:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"7621:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7606:31:6"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"7655:0:6"},"scope":535,"src":"7587:233:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":533,"nodeType":"Block","src":"8060:165:6","statements":[{"condition":{"arguments":[{"id":512,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"8082:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":513,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"8088:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":511,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"8074:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8074:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":532,"nodeType":"IfStatement","src":"8070:149:6","trueBody":{"id":531,"nodeType":"Block","src":"8098:121:6","statements":[{"expression":{"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":515,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"8112:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$239_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":517,"indexExpression":{"id":516,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"8119:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8112:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$239_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":518,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":236,"src":"8112:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":520,"indexExpression":{"id":519,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"8133:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8112:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8144:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8112:37:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":523,"nodeType":"ExpressionStatement","src":"8112:37:6"},{"eventCall":{"arguments":[{"id":525,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"8180:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":526,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"8186:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":527,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"8195:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8195:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":524,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"8168:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8168:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":530,"nodeType":"EmitStatement","src":"8163:45:6"}]}}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"7826:160:6","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":534,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8000:11:6","nodeType":"FunctionDefinition","parameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"role","nameLocation":"8020:4:6","nodeType":"VariableDeclaration","scope":534,"src":"8012:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8012:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"account","nameLocation":"8034:7:6","nodeType":"VariableDeclaration","scope":534,"src":"8026:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"8026:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8011:31:6"},"returnParameters":{"id":510,"nodeType":"ParameterList","parameters":[],"src":"8060:0:6"},"scope":535,"src":"7991:234:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":536,"src":"1932:6295:6","usedErrors":[]}],"src":"108:8120:6"},"id":6},"@openzeppelin/contracts/access/AccessControlEnumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControlEnumerable.sol","exportedSymbols":{"AccessControl":[535],"AccessControlEnumerable":[660],"Context":[1911],"ERC165":[2219],"EnumerableSet":[3815],"IAccessControl":[733],"IAccessControlEnumerable":[758],"IERC165":[2231],"Math":[3097],"SignedMath":[3202],"Strings":[2195]},"id":661,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":537,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:7"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControlEnumerable.sol","file":"./IAccessControlEnumerable.sol","id":538,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":661,"sourceUnit":759,"src":"143:40:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"./AccessControl.sol","id":539,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":661,"sourceUnit":536,"src":"184:29:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"../utils/structs/EnumerableSet.sol","id":540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":661,"sourceUnit":3816,"src":"214:44:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":542,"name":"IAccessControlEnumerable","nodeType":"IdentifierPath","referencedDeclaration":758,"src":"400:24:7"},"id":543,"nodeType":"InheritanceSpecifier","src":"400:24:7"},{"baseName":{"id":544,"name":"AccessControl","nodeType":"IdentifierPath","referencedDeclaration":535,"src":"426:13:7"},"id":545,"nodeType":"InheritanceSpecifier","src":"426:13:7"}],"canonicalName":"AccessControlEnumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"260:94:7","text":" @dev Extension of {AccessControl} that allows enumerating the members of each role."},"fullyImplemented":true,"id":660,"linearizedBaseContracts":[660,535,2219,2231,758,733,1911],"name":"AccessControlEnumerable","nameLocation":"373:23:7","nodeType":"ContractDefinition","nodes":[{"id":549,"libraryName":{"id":546,"name":"EnumerableSet","nodeType":"IdentifierPath","referencedDeclaration":3815,"src":"452:13:7"},"nodeType":"UsingForDirective","src":"446:49:7","typeName":{"id":548,"nodeType":"UserDefinedTypeName","pathNode":{"id":547,"name":"EnumerableSet.AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"470:24:7"},"referencedDeclaration":3528,"src":"470:24:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"constant":false,"id":554,"mutability":"mutable","name":"_roleMembers","nameLocation":"554:12:7","nodeType":"VariableDeclaration","scope":660,"src":"501:65:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3528_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"typeName":{"id":553,"keyType":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"509:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"501:44:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3528_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"valueType":{"id":552,"nodeType":"UserDefinedTypeName","pathNode":{"id":551,"name":"EnumerableSet.AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"520:24:7"},"referencedDeclaration":3528,"src":"520:24:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"private"},{"baseFunctions":[280],"body":{"id":575,"nodeType":"Block","src":"725:121:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":563,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"742:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":565,"name":"IAccessControlEnumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"762:24:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$758_$","typeString":"type(contract IAccessControlEnumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$758_$","typeString":"type(contract IAccessControlEnumerable)"}],"id":564,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"757:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"757:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlEnumerable_$758","typeString":"type(contract IAccessControlEnumerable)"}},"id":567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"757:42:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"742:57:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":571,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"827:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":569,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"803:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$660_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":280,"src":"803:23:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"803:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"742:97:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":562,"id":574,"nodeType":"Return","src":"735:104:7"}]},"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"573:56:7","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":576,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"643:17:7","nodeType":"FunctionDefinition","overrides":{"id":559,"nodeType":"OverrideSpecifier","overrides":[],"src":"701:8:7"},"parameters":{"id":558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"mutability":"mutable","name":"interfaceId","nameLocation":"668:11:7","nodeType":"VariableDeclaration","scope":576,"src":"661:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":556,"name":"bytes4","nodeType":"ElementaryTypeName","src":"661:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"660:20:7"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":576,"src":"719:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":560,"name":"bool","nodeType":"ElementaryTypeName","src":"719:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"718:6:7"},"scope":660,"src":"634:212:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[749],"body":{"id":594,"nodeType":"Block","src":"1530:52:7","statements":[{"expression":{"arguments":[{"id":591,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"1569:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":587,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1547:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3528_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":589,"indexExpression":{"id":588,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"1560:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1547:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"at","nodeType":"MemberAccess","referencedDeclaration":3651,"src":"1547:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3528_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$3528_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1547:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":586,"id":593,"nodeType":"Return","src":"1540:35:7"}]},"documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"852:574:7","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":595,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"1440:13:7","nodeType":"FunctionDefinition","overrides":{"id":583,"nodeType":"OverrideSpecifier","overrides":[],"src":"1503:8:7"},"parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"role","nameLocation":"1462:4:7","nodeType":"VariableDeclaration","scope":595,"src":"1454:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1454:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"index","nameLocation":"1476:5:7","nodeType":"VariableDeclaration","scope":595,"src":"1468:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1453:29:7"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":595,"src":"1521:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"1521:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1520:9:7"},"scope":660,"src":"1431:151:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[757],"body":{"id":610,"nodeType":"Block","src":"1839:51:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":604,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1856:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3528_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":606,"indexExpression":{"id":605,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"1869:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1856:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":607,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":3624,"src":"1856:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3528_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$3528_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1856:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":603,"id":609,"nodeType":"Return","src":"1849:34:7"}]},"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"1588:157:7","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":611,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1759:18:7","nodeType":"FunctionDefinition","overrides":{"id":600,"nodeType":"OverrideSpecifier","overrides":[],"src":"1812:8:7"},"parameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"role","nameLocation":"1786:4:7","nodeType":"VariableDeclaration","scope":611,"src":"1778:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1778:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1777:14:7"},"returnParameters":{"id":603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":611,"src":"1830:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":601,"name":"uint256","nodeType":"ElementaryTypeName","src":"1830:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1829:9:7"},"scope":660,"src":"1750:140:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[503],"body":{"id":634,"nodeType":"Block","src":"2055:89:7","statements":[{"expression":{"arguments":[{"id":623,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"2082:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":624,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"2088:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":620,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2065:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$660_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_grantRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"2065:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2065:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":626,"nodeType":"ExpressionStatement","src":"2065:31:7"},{"expression":{"arguments":[{"id":631,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"2129:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":627,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2106:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3528_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":629,"indexExpression":{"id":628,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"2119:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2106:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3555,"src":"2106:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3528_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3528_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2106:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":633,"nodeType":"ExpressionStatement","src":"2106:31:7"}]},"documentation":{"id":612,"nodeType":"StructuredDocumentation","src":"1896:77:7","text":" @dev Overload {_grantRole} to track enumerable memberships"},"id":635,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"1987:10:7","nodeType":"FunctionDefinition","overrides":{"id":618,"nodeType":"OverrideSpecifier","overrides":[],"src":"2046:8:7"},"parameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"role","nameLocation":"2006:4:7","nodeType":"VariableDeclaration","scope":635,"src":"1998:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1998:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":616,"mutability":"mutable","name":"account","nameLocation":"2020:7:7","nodeType":"VariableDeclaration","scope":635,"src":"2012:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"2012:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1997:31:7"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[],"src":"2055:0:7"},"scope":660,"src":"1978:166:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[534],"body":{"id":658,"nodeType":"Block","src":"2311:93:7","statements":[{"expression":{"arguments":[{"id":647,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2339:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":648,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"2345:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":644,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2321:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$660_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_revokeRole","nodeType":"MemberAccess","referencedDeclaration":534,"src":"2321:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2321:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":650,"nodeType":"ExpressionStatement","src":"2321:32:7"},{"expression":{"arguments":[{"id":655,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"2389:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":651,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2363:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3528_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":653,"indexExpression":{"id":652,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2376:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2363:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":654,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":3582,"src":"2363:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3528_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3528_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2363:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":657,"nodeType":"ExpressionStatement","src":"2363:34:7"}]},"documentation":{"id":636,"nodeType":"StructuredDocumentation","src":"2150:78:7","text":" @dev Overload {_revokeRole} to track enumerable memberships"},"id":659,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"2242:11:7","nodeType":"FunctionDefinition","overrides":{"id":642,"nodeType":"OverrideSpecifier","overrides":[],"src":"2302:8:7"},"parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"role","nameLocation":"2262:4:7","nodeType":"VariableDeclaration","scope":659,"src":"2254:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2254:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"account","nameLocation":"2276:7:7","nodeType":"VariableDeclaration","scope":659,"src":"2268:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":639,"name":"address","nodeType":"ElementaryTypeName","src":"2268:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2253:31:7"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"2311:0:7"},"scope":660,"src":"2233:171:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":661,"src":"355:2051:7","usedErrors":[]}],"src":"118:2289:7"},"id":7},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[733]},"id":734,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":662,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":663,"nodeType":"StructuredDocumentation","src":"119:89:8","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":733,"linearizedBaseContracts":[733],"name":"IAccessControl","nameLocation":"219:14:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":664,"nodeType":"StructuredDocumentation","src":"240:292:8","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"id":672,"name":"RoleAdminChanged","nameLocation":"543:16:8","nodeType":"EventDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":666,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:8","nodeType":"VariableDeclaration","scope":672,"src":"560:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":668,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:8","nodeType":"VariableDeclaration","scope":672,"src":"582:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":670,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:8","nodeType":"VariableDeclaration","scope":672,"src":"617:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":669,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:8"},"src":"537:110:8"},{"anonymous":false,"documentation":{"id":673,"nodeType":"StructuredDocumentation","src":"653:212:8","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"id":681,"name":"RoleGranted","nameLocation":"876:11:8","nodeType":"EventDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":675,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:8","nodeType":"VariableDeclaration","scope":681,"src":"888:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":677,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:8","nodeType":"VariableDeclaration","scope":681,"src":"910:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":679,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:8","nodeType":"VariableDeclaration","scope":681,"src":"935:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:8"},"src":"870:89:8"},{"anonymous":false,"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"965:275:8","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"id":690,"name":"RoleRevoked","nameLocation":"1251:11:8","nodeType":"EventDefinition","parameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:8","nodeType":"VariableDeclaration","scope":690,"src":"1263:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":686,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:8","nodeType":"VariableDeclaration","scope":690,"src":"1285:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":688,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:8","nodeType":"VariableDeclaration","scope":690,"src":"1310:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:8"},"src":"1245:89:8"},{"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"1340:76:8","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":700,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:8","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"role","nameLocation":"1446:4:8","nodeType":"VariableDeclaration","scope":700,"src":"1438:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"account","nameLocation":"1460:7:8","nodeType":"VariableDeclaration","scope":700,"src":"1452:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":694,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:8"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"1492:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":697,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:8"},"scope":733,"src":"1421:77:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":701,"nodeType":"StructuredDocumentation","src":"1504:184:8","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":708,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:8","nodeType":"FunctionDefinition","parameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"role","nameLocation":"1723:4:8","nodeType":"VariableDeclaration","scope":708,"src":"1715:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:8"},"returnParameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":708,"src":"1752:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:8"},"scope":733,"src":"1693:68:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":709,"nodeType":"StructuredDocumentation","src":"1767:239:8","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":716,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:8","nodeType":"FunctionDefinition","parameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"role","nameLocation":"2038:4:8","nodeType":"VariableDeclaration","scope":716,"src":"2030:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"account","nameLocation":"2052:7:8","nodeType":"VariableDeclaration","scope":716,"src":"2044:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":712,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:8"},"returnParameters":{"id":715,"nodeType":"ParameterList","parameters":[],"src":"2069:0:8"},"scope":733,"src":"2011:59:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"2076:223:8","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":724,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:8","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"role","nameLocation":"2332:4:8","nodeType":"VariableDeclaration","scope":724,"src":"2324:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"account","nameLocation":"2346:7:8","nodeType":"VariableDeclaration","scope":724,"src":"2338:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:8"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[],"src":"2363:0:8"},"scope":733,"src":"2304:60:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":725,"nodeType":"StructuredDocumentation","src":"2370:480:8","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":732,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:8","nodeType":"FunctionDefinition","parameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"role","nameLocation":"2885:4:8","nodeType":"VariableDeclaration","scope":732,"src":"2877:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":729,"mutability":"mutable","name":"account","nameLocation":"2899:7:8","nodeType":"VariableDeclaration","scope":732,"src":"2891:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:8"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2916:0:8"},"scope":733,"src":"2855:62:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":734,"src":"209:2710:8","usedErrors":[]}],"src":"94:2826:8"},"id":8},"@openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControlEnumerable.sol","exportedSymbols":{"IAccessControl":[733],"IAccessControlEnumerable":[758]},"id":759,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":735,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"104:23:9"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":759,"sourceUnit":734,"src":"129:30:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":738,"name":"IAccessControl","nodeType":"IdentifierPath","referencedDeclaration":733,"src":"299:14:9"},"id":739,"nodeType":"InheritanceSpecifier","src":"299:14:9"}],"canonicalName":"IAccessControlEnumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"161:99:9","text":" @dev External interface of AccessControlEnumerable declared to support ERC165 detection."},"fullyImplemented":false,"id":758,"linearizedBaseContracts":[758,733],"name":"IAccessControlEnumerable","nameLocation":"271:24:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"320:574:9","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":749,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"908:13:9","nodeType":"FunctionDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"role","nameLocation":"930:4:9","nodeType":"VariableDeclaration","scope":749,"src":"922:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"922:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"index","nameLocation":"944:5:9","nodeType":"VariableDeclaration","scope":749,"src":"936:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":743,"name":"uint256","nodeType":"ElementaryTypeName","src":"936:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"921:29:9"},"returnParameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":749,"src":"974:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":746,"name":"address","nodeType":"ElementaryTypeName","src":"974:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"973:9:9"},"scope":758,"src":"899:84:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":750,"nodeType":"StructuredDocumentation","src":"989:157:9","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":757,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1160:18:9","nodeType":"FunctionDefinition","parameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"role","nameLocation":"1187:4:9","nodeType":"VariableDeclaration","scope":757,"src":"1179:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1179:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1178:14:9"},"returnParameters":{"id":756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":757,"src":"1216:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":754,"name":"uint256","nodeType":"ElementaryTypeName","src":"1216:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1215:9:9"},"scope":758,"src":"1151:74:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":759,"src":"261:966:9","usedErrors":[]}],"src":"104:1124:9"},"id":9},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1911],"Ownable":[871]},"id":872,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":760,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":761,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":872,"sourceUnit":1912,"src":"127:30:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":763,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1911,"src":"683:7:10"},"id":764,"nodeType":"InheritanceSpecifier","src":"683:7:10"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"159:494:10","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":871,"linearizedBaseContracts":[871,1911],"name":"Ownable","nameLocation":"672:7:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":766,"mutability":"mutable","name":"_owner","nameLocation":"713:6:10","nodeType":"VariableDeclaration","scope":871,"src":"697:22:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":772,"name":"OwnershipTransferred","nameLocation":"732:20:10","nodeType":"EventDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:10","nodeType":"VariableDeclaration","scope":772,"src":"753:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":767,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":770,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:10","nodeType":"VariableDeclaration","scope":772,"src":"784:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:10"},"src":"726:84:10"},{"body":{"id":781,"nodeType":"Block","src":"926:49:10","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":777,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"955:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":776,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"936:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":780,"nodeType":"ExpressionStatement","src":"936:32:10"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"816:91:10","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":782,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[],"src":"923:2:10"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"926:0:10"},"scope":871,"src":"912:63:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":789,"nodeType":"Block","src":"1084:41:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":785,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"1094:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"1094:13:10"},{"id":788,"nodeType":"PlaceholderStatement","src":"1117:1:10"}]},"documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"981:77:10","text":" @dev Throws if called by any account other than the owner."},"id":790,"name":"onlyOwner","nameLocation":"1072:9:10","nodeType":"ModifierDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[],"src":"1081:2:10"},"src":"1063:62:10","virtual":false,"visibility":"internal"},{"body":{"id":798,"nodeType":"Block","src":"1256:30:10","statements":[{"expression":{"id":796,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1273:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":795,"id":797,"nodeType":"Return","src":"1266:13:10"}]},"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"1131:65:10","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":799,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:10","nodeType":"FunctionDefinition","parameters":{"id":792,"nodeType":"ParameterList","parameters":[],"src":"1215:2:10"},"returnParameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":799,"src":"1247:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:10"},"scope":871,"src":"1201:85:10","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":812,"nodeType":"Block","src":"1404:85:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":804,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1422:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":806,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"1433:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":803,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":811,"nodeType":"ExpressionStatement","src":"1414:68:10"}]},"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"1292:62:10","text":" @dev Throws if the sender is not the owner."},"id":813,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:10","nodeType":"FunctionDefinition","parameters":{"id":801,"nodeType":"ParameterList","parameters":[],"src":"1379:2:10"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[],"src":"1404:0:10"},"scope":871,"src":"1359:130:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":826,"nodeType":"Block","src":"1878:47:10","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:10","typeDescriptions":{}}},"id":823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1907:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":819,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"1888:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1888:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":825,"nodeType":"ExpressionStatement","src":"1888:30:10"}]},"documentation":{"id":814,"nodeType":"StructuredDocumentation","src":"1495:324:10","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":827,"implemented":true,"kind":"function","modifiers":[{"id":817,"kind":"modifierInvocation","modifierName":{"id":816,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"1868:9:10"},"nodeType":"ModifierInvocation","src":"1868:9:10"}],"name":"renounceOwnership","nameLocation":"1833:17:10","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[],"src":"1850:2:10"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"1878:0:10"},"scope":871,"src":"1824:101:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":849,"nodeType":"Block","src":"2144:128:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":836,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"2162:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:10","typeDescriptions":{}}},"id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2174:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2154:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"2154:73:10"},{"expression":{"arguments":[{"id":846,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"2256:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":845,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2237:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2237:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":848,"nodeType":"ExpressionStatement","src":"2237:28:10"}]},"documentation":{"id":828,"nodeType":"StructuredDocumentation","src":"1931:138:10","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":850,"implemented":true,"kind":"function","modifiers":[{"id":833,"kind":"modifierInvocation","modifierName":{"id":832,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"2134:9:10"},"nodeType":"ModifierInvocation","src":"2134:9:10"}],"name":"transferOwnership","nameLocation":"2083:17:10","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:10","nodeType":"VariableDeclaration","scope":850,"src":"2101:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:10"},"returnParameters":{"id":834,"nodeType":"ParameterList","parameters":[],"src":"2144:0:10"},"scope":871,"src":"2074:198:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":869,"nodeType":"Block","src":"2489:124:10","statements":[{"assignments":[857],"declarations":[{"constant":false,"id":857,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:10","nodeType":"VariableDeclaration","scope":869,"src":"2499:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":856,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":859,"initialValue":{"id":858,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2518:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:10"},{"expression":{"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":860,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2534:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":861,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"2543:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":863,"nodeType":"ExpressionStatement","src":"2534:17:10"},{"eventCall":{"arguments":[{"id":865,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"2587:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":866,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"2597:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":864,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"2566:20:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2566:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"EmitStatement","src":"2561:45:10"}]},"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"2278:143:10","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":870,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:10","nodeType":"FunctionDefinition","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:10","nodeType":"VariableDeclaration","scope":870,"src":"2454:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:10"},"returnParameters":{"id":855,"nodeType":"ParameterList","parameters":[],"src":"2489:0:10"},"scope":871,"src":"2426:187:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":872,"src":"654:1961:10","usedErrors":[]}],"src":"102:2514:10"},"id":10},"@openzeppelin/contracts/security/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","exportedSymbols":{"Context":[1911],"Pausable":[979]},"id":980,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":873,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":874,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":980,"sourceUnit":1912,"src":"130:30:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":876,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1911,"src":"632:7:11"},"id":877,"nodeType":"InheritanceSpecifier","src":"632:7:11"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"162:439:11","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":979,"linearizedBaseContracts":[979,1911],"name":"Pausable","nameLocation":"620:8:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"646:73:11","text":" @dev Emitted when the pause is triggered by `account`."},"id":882,"name":"Paused","nameLocation":"730:6:11","nodeType":"EventDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"745:7:11","nodeType":"VariableDeclaration","scope":882,"src":"737:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":879,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"736:17:11"},"src":"724:30:11"},{"anonymous":false,"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"760:70:11","text":" @dev Emitted when the pause is lifted by `account`."},"id":887,"name":"Unpaused","nameLocation":"841:8:11","nodeType":"EventDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"858:7:11","nodeType":"VariableDeclaration","scope":887,"src":"850:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"850:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"849:17:11"},"src":"835:32:11"},{"constant":false,"id":889,"mutability":"mutable","name":"_paused","nameLocation":"886:7:11","nodeType":"VariableDeclaration","scope":979,"src":"873:20:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":888,"name":"bool","nodeType":"ElementaryTypeName","src":"873:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":897,"nodeType":"Block","src":"986:32:11","statements":[{"expression":{"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":893,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"996:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1006:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"996:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":896,"nodeType":"ExpressionStatement","src":"996:15:11"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"900:67:11","text":" @dev Initializes the contract in unpaused state."},"id":898,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":891,"nodeType":"ParameterList","parameters":[],"src":"983:2:11"},"returnParameters":{"id":892,"nodeType":"ParameterList","parameters":[],"src":"986:0:11"},"scope":979,"src":"972:46:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":905,"nodeType":"Block","src":"1229:47:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":901,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"1239:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1239:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":903,"nodeType":"ExpressionStatement","src":"1239:19:11"},{"id":904,"nodeType":"PlaceholderStatement","src":"1268:1:11"}]},"documentation":{"id":899,"nodeType":"StructuredDocumentation","src":"1024:175:11","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":906,"name":"whenNotPaused","nameLocation":"1213:13:11","nodeType":"ModifierDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[],"src":"1226:2:11"},"src":"1204:72:11","virtual":false,"visibility":"internal"},{"body":{"id":913,"nodeType":"Block","src":"1476:44:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":909,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"1486:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1486:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"ExpressionStatement","src":"1486:16:11"},{"id":912,"nodeType":"PlaceholderStatement","src":"1512:1:11"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"1282:167:11","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":914,"name":"whenPaused","nameLocation":"1463:10:11","nodeType":"ModifierDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[],"src":"1473:2:11"},"src":"1454:66:11","virtual":false,"visibility":"internal"},{"body":{"id":922,"nodeType":"Block","src":"1668:31:11","statements":[{"expression":{"id":920,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1685:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":919,"id":921,"nodeType":"Return","src":"1678:14:11"}]},"documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"1526:84:11","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":923,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1624:6:11","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[],"src":"1630:2:11"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":923,"src":"1662:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":917,"name":"bool","nodeType":"ElementaryTypeName","src":"1662:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1661:6:11"},"scope":979,"src":"1615:84:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":934,"nodeType":"Block","src":"1818:55:11","statements":[{"expression":{"arguments":[{"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1836:9:11","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":928,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"1837:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1837:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1847:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":927,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1828:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1828:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"1828:38:11"}]},"documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"1705:57:11","text":" @dev Throws if the contract is paused."},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1776:17:11","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[],"src":"1793:2:11"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"1818:0:11"},"scope":979,"src":"1767:106:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":945,"nodeType":"Block","src":"1993:58:11","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":940,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"2011:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2011:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2021:22:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":939,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2003:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2003:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":944,"nodeType":"ExpressionStatement","src":"2003:41:11"}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"1879:61:11","text":" @dev Throws if the contract is not paused."},"id":946,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"1954:14:11","nodeType":"FunctionDefinition","parameters":{"id":937,"nodeType":"ParameterList","parameters":[],"src":"1968:2:11"},"returnParameters":{"id":938,"nodeType":"ParameterList","parameters":[],"src":"1993:0:11"},"scope":979,"src":"1945:106:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":961,"nodeType":"Block","src":"2235:66:11","statements":[{"expression":{"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":952,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"2245:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2255:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2245:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":955,"nodeType":"ExpressionStatement","src":"2245:14:11"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":957,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"2281:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2281:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":956,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"2274:6:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2274:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":960,"nodeType":"EmitStatement","src":"2269:25:11"}]},"documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"2057:124:11","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":962,"implemented":true,"kind":"function","modifiers":[{"id":950,"kind":"modifierInvocation","modifierName":{"id":949,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":906,"src":"2221:13:11"},"nodeType":"ModifierInvocation","src":"2221:13:11"}],"name":"_pause","nameLocation":"2195:6:11","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[],"src":"2201:2:11"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[],"src":"2235:0:11"},"scope":979,"src":"2186:115:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":977,"nodeType":"Block","src":"2481:69:11","statements":[{"expression":{"id":970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":968,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"2491:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2501:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2491:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":971,"nodeType":"ExpressionStatement","src":"2491:15:11"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":973,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"2530:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2530:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":972,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"2521:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2521:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":976,"nodeType":"EmitStatement","src":"2516:27:11"}]},"documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"2307:121:11","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":978,"implemented":true,"kind":"function","modifiers":[{"id":966,"kind":"modifierInvocation","modifierName":{"id":965,"name":"whenPaused","nodeType":"IdentifierPath","referencedDeclaration":914,"src":"2470:10:11"},"nodeType":"ModifierInvocation","src":"2470:10:11"}],"name":"_unpause","nameLocation":"2442:8:11","nodeType":"FunctionDefinition","parameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"2450:2:11"},"returnParameters":{"id":967,"nodeType":"ParameterList","parameters":[],"src":"2481:0:11"},"scope":979,"src":"2433:117:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":980,"src":"602:1950:11","usedErrors":[]}],"src":"105:2448:11"},"id":11},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1044]},"id":1045,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":981,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:12"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":982,"nodeType":"StructuredDocumentation","src":"137:750:12","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1044,"linearizedBaseContracts":[1044],"name":"ReentrancyGuard","nameLocation":"906:15:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":985,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:12","nodeType":"VariableDeclaration","scope":1044,"src":"1676:41:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":988,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:12","nodeType":"VariableDeclaration","scope":1044,"src":"1723:37:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":990,"mutability":"mutable","name":"_status","nameLocation":"1783:7:12","nodeType":"VariableDeclaration","scope":1044,"src":"1767:23:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":989,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":997,"nodeType":"Block","src":"1811:39:12","statements":[{"expression":{"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":993,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"1821:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":994,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"1831:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":996,"nodeType":"ExpressionStatement","src":"1821:22:12"}]},"id":998,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":991,"nodeType":"ParameterList","parameters":[],"src":"1808:2:12"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[],"src":"1811:0:12"},"scope":1044,"src":"1797:53:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"2251:79:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1001,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"2261:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1003,"nodeType":"ExpressionStatement","src":"2261:21:12"},{"id":1004,"nodeType":"PlaceholderStatement","src":"2292:1:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1005,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"2303:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2303:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"2303:20:12"}]},"documentation":{"id":999,"nodeType":"StructuredDocumentation","src":"1856:366:12","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1009,"name":"nonReentrant","nameLocation":"2236:12:12","nodeType":"ModifierDefinition","parameters":{"id":1000,"nodeType":"ParameterList","parameters":[],"src":"2248:2:12"},"src":"2227:103:12","virtual":false,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"2375:248:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1013,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"2468:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1014,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"2479:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1012,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1018,"nodeType":"ExpressionStatement","src":"2460:63:12"},{"expression":{"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1019,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"2598:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1020,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"2608:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1022,"nodeType":"ExpressionStatement","src":"2598:18:12"}]},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:12","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[],"src":"2364:2:12"},"returnParameters":{"id":1011,"nodeType":"ParameterList","parameters":[],"src":"2375:0:12"},"scope":1044,"src":"2336:287:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1031,"nodeType":"Block","src":"2667:171:12","statements":[{"expression":{"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1027,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"2809:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1028,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"2819:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1030,"nodeType":"ExpressionStatement","src":"2809:22:12"}]},"id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:12","nodeType":"FunctionDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"2656:2:12"},"returnParameters":{"id":1026,"nodeType":"ParameterList","parameters":[],"src":"2667:0:12"},"scope":1044,"src":"2629:209:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1042,"nodeType":"Block","src":"3081:43:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1038,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"3098:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1039,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3109:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3098:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1037,"id":1041,"nodeType":"Return","src":"3091:26:12"}]},"documentation":{"id":1033,"nodeType":"StructuredDocumentation","src":"2844:168:12","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3026:23:12","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[],"src":"3049:2:12"},"returnParameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1043,"src":"3075:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1035,"name":"bool","nodeType":"ElementaryTypeName","src":"3075:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3074:6:12"},"scope":1044,"src":"3017:107:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1045,"src":"888:2238:12","usedErrors":[]}],"src":"112:3015:12"},"id":12},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1122]},"id":1123,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1046,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1047,"nodeType":"StructuredDocumentation","src":"131:70:13","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1122,"linearizedBaseContracts":[1122],"name":"IERC20","nameLocation":"212:6:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"225:158:13","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":1056,"name":"Transfer","nameLocation":"394:8:13","nodeType":"EventDefinition","parameters":{"id":1055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:13","nodeType":"VariableDeclaration","scope":1056,"src":"403:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1052,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:13","nodeType":"VariableDeclaration","scope":1056,"src":"425:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1051,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1054,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:13","nodeType":"VariableDeclaration","scope":1056,"src":"445:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:13"},"src":"388:72:13"},{"anonymous":false,"documentation":{"id":1057,"nodeType":"StructuredDocumentation","src":"466:148:13","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":1065,"name":"Approval","nameLocation":"625:8:13","nodeType":"EventDefinition","parameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:13","nodeType":"VariableDeclaration","scope":1065,"src":"634:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1061,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:13","nodeType":"VariableDeclaration","scope":1065,"src":"657:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1060,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1063,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:13","nodeType":"VariableDeclaration","scope":1065,"src":"682:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:13"},"src":"619:78:13"},{"documentation":{"id":1066,"nodeType":"StructuredDocumentation","src":"703:66:13","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1071,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:13","nodeType":"FunctionDefinition","parameters":{"id":1067,"nodeType":"ParameterList","parameters":[],"src":"794:2:13"},"returnParameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1069,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1071,"src":"820:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1068,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:13"},"scope":1122,"src":"774:55:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1072,"nodeType":"StructuredDocumentation","src":"835:72:13","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1079,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:13","nodeType":"FunctionDefinition","parameters":{"id":1075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1074,"mutability":"mutable","name":"account","nameLocation":"939:7:13","nodeType":"VariableDeclaration","scope":1079,"src":"931:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1073,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:13"},"returnParameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1079,"src":"971:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1076,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:13"},"scope":1122,"src":"912:68:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1080,"nodeType":"StructuredDocumentation","src":"986:202:13","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1089,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:13","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"to","nameLocation":"1219:2:13","nodeType":"VariableDeclaration","scope":1089,"src":"1211:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"amount","nameLocation":"1231:6:13","nodeType":"VariableDeclaration","scope":1089,"src":"1223:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:13"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1089,"src":"1257:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1086,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:13"},"scope":1122,"src":"1193:70:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1090,"nodeType":"StructuredDocumentation","src":"1269:264:13","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1099,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:13","nodeType":"FunctionDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"owner","nameLocation":"1565:5:13","nodeType":"VariableDeclaration","scope":1099,"src":"1557:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"spender","nameLocation":"1580:7:13","nodeType":"VariableDeclaration","scope":1099,"src":"1572:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:13"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1099,"src":"1612:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1096,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:13"},"scope":1122,"src":"1538:83:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"1627:642:13","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1109,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:13","nodeType":"FunctionDefinition","parameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"spender","nameLocation":"2299:7:13","nodeType":"VariableDeclaration","scope":1109,"src":"2291:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1104,"mutability":"mutable","name":"amount","nameLocation":"2316:6:13","nodeType":"VariableDeclaration","scope":1109,"src":"2308:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:13"},"returnParameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1109,"src":"2342:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1106,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:13"},"scope":1122,"src":"2274:74:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1110,"nodeType":"StructuredDocumentation","src":"2354:287:13","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1121,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:13","nodeType":"FunctionDefinition","parameters":{"id":1117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"from","nameLocation":"2676:4:13","nodeType":"VariableDeclaration","scope":1121,"src":"2668:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1111,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1114,"mutability":"mutable","name":"to","nameLocation":"2690:2:13","nodeType":"VariableDeclaration","scope":1121,"src":"2682:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1113,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1116,"mutability":"mutable","name":"amount","nameLocation":"2702:6:13","nodeType":"VariableDeclaration","scope":1121,"src":"2694:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1115,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:13"},"returnParameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1121,"src":"2728:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1118,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:13"},"scope":1122,"src":"2646:88:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1123,"src":"202:2534:13","usedErrors":[]}],"src":"106:2631:13"},"id":13},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1122],"IERC20Metadata":[1147]},"id":1148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1124,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1125,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1148,"sourceUnit":1123,"src":"135:23:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1127,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"305:6:14"},"id":1128,"nodeType":"InheritanceSpecifier","src":"305:6:14"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1126,"nodeType":"StructuredDocumentation","src":"160:116:14","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1147,"linearizedBaseContracts":[1147,1122],"name":"IERC20Metadata","nameLocation":"287:14:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"318:54:14","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1134,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:14","nodeType":"FunctionDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[],"src":"390:2:14"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1134,"src":"416:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1131,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:14"},"scope":1147,"src":"377:54:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"437:56:14","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1140,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:14","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[],"src":"513:2:14"},"returnParameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1140,"src":"539:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1137,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:14"},"scope":1147,"src":"498:56:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"560:65:14","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1146,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:14","nodeType":"FunctionDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[],"src":"647:2:14"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1146,"src":"673:5:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1143,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:14"},"scope":1147,"src":"630:50:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1148,"src":"277:405:14","usedErrors":[]}],"src":"110:573:14"},"id":14},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1183]},"id":1184,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1149,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1150,"nodeType":"StructuredDocumentation","src":"148:480:15","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1183,"linearizedBaseContracts":[1183],"name":"IERC20Permit","nameLocation":"639:12:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"658:792:15","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1168,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:15","nodeType":"FunctionDefinition","parameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1153,"mutability":"mutable","name":"owner","nameLocation":"1488:5:15","nodeType":"VariableDeclaration","scope":1168,"src":"1480:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1152,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1155,"mutability":"mutable","name":"spender","nameLocation":"1511:7:15","nodeType":"VariableDeclaration","scope":1168,"src":"1503:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1154,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"value","nameLocation":"1536:5:15","nodeType":"VariableDeclaration","scope":1168,"src":"1528:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1159,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:15","nodeType":"VariableDeclaration","scope":1168,"src":"1551:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"v","nameLocation":"1583:1:15","nodeType":"VariableDeclaration","scope":1168,"src":"1577:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1160,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"r","nameLocation":"1602:1:15","nodeType":"VariableDeclaration","scope":1168,"src":"1594:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"s","nameLocation":"1621:1:15","nodeType":"VariableDeclaration","scope":1168,"src":"1613:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:15"},"returnParameters":{"id":1167,"nodeType":"ParameterList","parameters":[],"src":"1637:0:15"},"scope":1183,"src":"1455:183:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"1644:294:15","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1176,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:15","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"owner","nameLocation":"1967:5:15","nodeType":"VariableDeclaration","scope":1176,"src":"1959:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:15"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1176,"src":"1997:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:15"},"scope":1183,"src":"1943:63:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"2012:128:15","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1182,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:15","nodeType":"FunctionDefinition","parameters":{"id":1178,"nodeType":"ParameterList","parameters":[],"src":"2223:2:15"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1182,"src":"2249:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:15"},"scope":1183,"src":"2198:60:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1184,"src":"629:1631:15","usedErrors":[]}],"src":"123:2138:15"},"id":15},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1889],"IERC20":[1122],"IERC20Permit":[1183],"SafeERC20":[1559]},"id":1560,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1185,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1186,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1560,"sourceUnit":1123,"src":"140:23:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":1187,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1560,"sourceUnit":1184,"src":"164:40:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1188,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1560,"sourceUnit":1890,"src":"205:36:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1189,"nodeType":"StructuredDocumentation","src":"243:457:16","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1559,"linearizedBaseContracts":[1559],"name":"SafeERC20","nameLocation":"709:9:16","nodeType":"ContractDefinition","nodes":[{"id":1192,"libraryName":{"id":1190,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"731:7:16"},"nodeType":"UsingForDirective","src":"725:26:16","typeName":{"id":1191,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1215,"nodeType":"Block","src":"1013:103:16","statements":[{"expression":{"arguments":[{"id":1204,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"1043:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1207,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"1073:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"1073:14:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1073:23:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1210,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"1098:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1211,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"1102:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1205,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1050:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1203,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"1023:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1023:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1214,"nodeType":"ExpressionStatement","src":"1023:86:16"}]},"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"757:179:16","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1216,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:16","nodeType":"FunctionDefinition","parameters":{"id":1201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"token","nameLocation":"970:5:16","nodeType":"VariableDeclaration","scope":1216,"src":"963:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1195,"nodeType":"UserDefinedTypeName","pathNode":{"id":1194,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"963:6:16"},"referencedDeclaration":1122,"src":"963:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"to","nameLocation":"985:2:16","nodeType":"VariableDeclaration","scope":1216,"src":"977:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1200,"mutability":"mutable","name":"value","nameLocation":"997:5:16","nodeType":"VariableDeclaration","scope":1216,"src":"989:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:16"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[],"src":"1013:0:16"},"scope":1559,"src":"941:175:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1242,"nodeType":"Block","src":"1445:113:16","statements":[{"expression":{"arguments":[{"id":1230,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"1475:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1233,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"1505:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1121,"src":"1505:18:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1505:27:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1236,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"1534:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1237,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1540:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"1544:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1231,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1482:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1229,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"1455:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1455:96:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1241,"nodeType":"ExpressionStatement","src":"1455:96:16"}]},"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"1122:228:16","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1243,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:16","nodeType":"FunctionDefinition","parameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"token","nameLocation":"1388:5:16","nodeType":"VariableDeclaration","scope":1243,"src":"1381:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1219,"nodeType":"UserDefinedTypeName","pathNode":{"id":1218,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"1381:6:16"},"referencedDeclaration":1122,"src":"1381:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1222,"mutability":"mutable","name":"from","nameLocation":"1403:4:16","nodeType":"VariableDeclaration","scope":1243,"src":"1395:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1224,"mutability":"mutable","name":"to","nameLocation":"1417:2:16","nodeType":"VariableDeclaration","scope":1243,"src":"1409:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"value","nameLocation":"1429:5:16","nodeType":"VariableDeclaration","scope":1243,"src":"1421:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:16"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[],"src":"1445:0:16"},"scope":1559,"src":"1355:203:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1286,"nodeType":"Block","src":"1894:497:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"2143:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1258,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1263,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1559","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1559","typeString":"library SafeERC20"}],"id":1262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1261,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:16","typeDescriptions":{}}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2175:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1265,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"2190:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1259,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"2159:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1099,"src":"2159:15:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2159:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1269,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1254,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2121:163:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1273,"nodeType":"ExpressionStatement","src":"2121:163:16"},{"expression":{"arguments":[{"id":1275,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"2314:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1278,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"2344:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1109,"src":"2344:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2344:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1281,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"2368:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"2377:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1276,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2321:62:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1274,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2294:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2294:90:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1285,"nodeType":"ExpressionStatement","src":"2294:90:16"}]},"documentation":{"id":1244,"nodeType":"StructuredDocumentation","src":"1564:249:16","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1287,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:16","nodeType":"FunctionDefinition","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"token","nameLocation":"1846:5:16","nodeType":"VariableDeclaration","scope":1287,"src":"1839:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1246,"nodeType":"UserDefinedTypeName","pathNode":{"id":1245,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"1839:6:16"},"referencedDeclaration":1122,"src":"1839:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1249,"mutability":"mutable","name":"spender","nameLocation":"1861:7:16","nodeType":"VariableDeclaration","scope":1287,"src":"1853:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"value","nameLocation":"1878:5:16","nodeType":"VariableDeclaration","scope":1287,"src":"1870:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:16"},"returnParameters":{"id":1253,"nodeType":"ParameterList","parameters":[],"src":"1894:0:16"},"scope":1559,"src":"1818:573:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1323,"nodeType":"Block","src":"2668:194:16","statements":[{"assignments":[1299],"declarations":[{"constant":false,"id":1299,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:16","nodeType":"VariableDeclaration","scope":1323,"src":"2678:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1308,"initialValue":{"arguments":[{"arguments":[{"id":1304,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1559","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1559","typeString":"library SafeERC20"}],"id":1303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:16","typeDescriptions":{}}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2717:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1306,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"2732:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1300,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"2701:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1099,"src":"2701:15:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2701:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:16"},{"expression":{"arguments":[{"id":1310,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"2770:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1313,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"2800:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1109,"src":"2800:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2800:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1316,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"2824:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"2833:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"2848:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1311,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2777:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1309,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2750:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2750:105:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1322,"nodeType":"ExpressionStatement","src":"2750:105:16"}]},"documentation":{"id":1288,"nodeType":"StructuredDocumentation","src":"2397:180:16","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1324,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:16","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"token","nameLocation":"2620:5:16","nodeType":"VariableDeclaration","scope":1324,"src":"2613:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1290,"nodeType":"UserDefinedTypeName","pathNode":{"id":1289,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"2613:6:16"},"referencedDeclaration":1122,"src":"2613:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"spender","nameLocation":"2635:7:16","nodeType":"VariableDeclaration","scope":1324,"src":"2627:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"value","nameLocation":"2652:5:16","nodeType":"VariableDeclaration","scope":1324,"src":"2644:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:16"},"returnParameters":{"id":1297,"nodeType":"ParameterList","parameters":[],"src":"2668:0:16"},"scope":1559,"src":"2582:280:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1368,"nodeType":"Block","src":"3139:321:16","statements":[{"id":1367,"nodeType":"UncheckedBlock","src":"3149:305:16","statements":[{"assignments":[1336],"declarations":[{"constant":false,"id":1336,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:16","nodeType":"VariableDeclaration","scope":1367,"src":"3173:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1345,"initialValue":{"arguments":[{"arguments":[{"id":1341,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1559","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1559","typeString":"library SafeERC20"}],"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1339,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:16","typeDescriptions":{}}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3212:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1343,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"3227:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1337,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"3196:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1099,"src":"3196:15:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3196:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1347,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"3257:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"3273:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1346,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3249:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1352,"nodeType":"ExpressionStatement","src":"3249:75:16"},{"expression":{"arguments":[{"id":1354,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"3358:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1357,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"3388:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1109,"src":"3388:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"3388:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1360,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"3412:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1361,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"3421:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"3436:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1355,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3365:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1353,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"3338:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3338:105:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1366,"nodeType":"ExpressionStatement","src":"3338:105:16"}]}]},"documentation":{"id":1325,"nodeType":"StructuredDocumentation","src":"2868:180:16","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1369,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:16","nodeType":"FunctionDefinition","parameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"mutability":"mutable","name":"token","nameLocation":"3091:5:16","nodeType":"VariableDeclaration","scope":1369,"src":"3084:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1327,"nodeType":"UserDefinedTypeName","pathNode":{"id":1326,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"3084:6:16"},"referencedDeclaration":1122,"src":"3084:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1330,"mutability":"mutable","name":"spender","nameLocation":"3106:7:16","nodeType":"VariableDeclaration","scope":1369,"src":"3098:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1329,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1332,"mutability":"mutable","name":"value","nameLocation":"3123:5:16","nodeType":"VariableDeclaration","scope":1369,"src":"3115:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1331,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:16"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[],"src":"3139:0:16"},"scope":1559,"src":"3053:407:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"3833:333:16","statements":[{"assignments":[1381],"declarations":[{"constant":false,"id":1381,"mutability":"mutable","name":"approvalCall","nameLocation":"3856:12:16","nodeType":"VariableDeclaration","scope":1415,"src":"3843:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1380,"name":"bytes","nodeType":"ElementaryTypeName","src":"3843:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1390,"initialValue":{"arguments":[{"expression":{"expression":{"id":1384,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"3894:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1109,"src":"3894:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"3894:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1387,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"3918:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"3927:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1382,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3871:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3871:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3871:62:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3843:90:16"},{"condition":{"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3948:45:16","subExpression":{"arguments":[{"id":1392,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"3973:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"id":1393,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"3980:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1391,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"3949:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3949:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1414,"nodeType":"IfStatement","src":"3944:216:16","trueBody":{"id":1413,"nodeType":"Block","src":"3995:165:16","statements":[{"expression":{"arguments":[{"id":1397,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"4029:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1400,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"4059:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1109,"src":"4059:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"4059:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1403,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"4083:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4092:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1398,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4036:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4036:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4036:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1396,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"4009:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4009:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1407,"nodeType":"ExpressionStatement","src":"4009:86:16"},{"expression":{"arguments":[{"id":1409,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"4129:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},{"id":1410,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"4136:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1408,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"4109:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4109:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1412,"nodeType":"ExpressionStatement","src":"4109:40:16"}]}}]},"documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"3466:285:16","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n 0 before setting it to a non-zero value."},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3765:12:16","nodeType":"FunctionDefinition","parameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"token","nameLocation":"3785:5:16","nodeType":"VariableDeclaration","scope":1416,"src":"3778:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1372,"nodeType":"UserDefinedTypeName","pathNode":{"id":1371,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"3778:6:16"},"referencedDeclaration":1122,"src":"3778:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1375,"mutability":"mutable","name":"spender","nameLocation":"3800:7:16","nodeType":"VariableDeclaration","scope":1416,"src":"3792:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"3792:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"value","nameLocation":"3817:5:16","nodeType":"VariableDeclaration","scope":1416,"src":"3809:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1376,"name":"uint256","nodeType":"ElementaryTypeName","src":"3809:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3777:46:16"},"returnParameters":{"id":1379,"nodeType":"ParameterList","parameters":[],"src":"3833:0:16"},"scope":1559,"src":"3756:410:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1472,"nodeType":"Block","src":"4533:257:16","statements":[{"assignments":[1438],"declarations":[{"constant":false,"id":1438,"mutability":"mutable","name":"nonceBefore","nameLocation":"4551:11:16","nodeType":"VariableDeclaration","scope":1472,"src":"4543:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"4543:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1443,"initialValue":{"arguments":[{"id":1441,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4578:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1439,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4565:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1183","typeString":"contract IERC20Permit"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"4565:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4565:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4543:41:16"},{"expression":{"arguments":[{"id":1447,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4607:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1448,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"4614:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"4623:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1450,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"4630:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1451,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"4640:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1452,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"4643:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1453,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"4646:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1444,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4594:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1183","typeString":"contract IERC20Permit"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1168,"src":"4594:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4594:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1455,"nodeType":"ExpressionStatement","src":"4594:54:16"},{"assignments":[1457],"declarations":[{"constant":false,"id":1457,"mutability":"mutable","name":"nonceAfter","nameLocation":"4666:10:16","nodeType":"VariableDeclaration","scope":1472,"src":"4658:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1462,"initialValue":{"arguments":[{"id":1460,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4692:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1458,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4679:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1183","typeString":"contract IERC20Permit"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"4679:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4679:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4658:40:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1464,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"4716:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1465,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"4730:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4744:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4730:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4716:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4747:35:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1463,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4708:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4708:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1471,"nodeType":"ExpressionStatement","src":"4708:75:16"}]},"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"4172:141:16","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":1473,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4327:10:16","nodeType":"FunctionDefinition","parameters":{"id":1435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"mutability":"mutable","name":"token","nameLocation":"4360:5:16","nodeType":"VariableDeclaration","scope":1473,"src":"4347:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1183","typeString":"contract IERC20Permit"},"typeName":{"id":1419,"nodeType":"UserDefinedTypeName","pathNode":{"id":1418,"name":"IERC20Permit","nodeType":"IdentifierPath","referencedDeclaration":1183,"src":"4347:12:16"},"referencedDeclaration":1183,"src":"4347:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1183","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"owner","nameLocation":"4383:5:16","nodeType":"VariableDeclaration","scope":1473,"src":"4375:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1421,"name":"address","nodeType":"ElementaryTypeName","src":"4375:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1424,"mutability":"mutable","name":"spender","nameLocation":"4406:7:16","nodeType":"VariableDeclaration","scope":1473,"src":"4398:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1423,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"value","nameLocation":"4431:5:16","nodeType":"VariableDeclaration","scope":1473,"src":"4423:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1425,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"deadline","nameLocation":"4454:8:16","nodeType":"VariableDeclaration","scope":1473,"src":"4446:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"v","nameLocation":"4478:1:16","nodeType":"VariableDeclaration","scope":1473,"src":"4472:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1429,"name":"uint8","nodeType":"ElementaryTypeName","src":"4472:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"r","nameLocation":"4497:1:16","nodeType":"VariableDeclaration","scope":1473,"src":"4489:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4489:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"s","nameLocation":"4516:1:16","nodeType":"VariableDeclaration","scope":1473,"src":"4508:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4508:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4337:186:16"},"returnParameters":{"id":1436,"nodeType":"ParameterList","parameters":[],"src":"4533:0:16"},"scope":1559,"src":"4318:472:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"5243:572:16","statements":[{"assignments":[1483],"declarations":[{"constant":false,"id":1483,"mutability":"mutable","name":"returndata","nameLocation":"5605:10:16","nodeType":"VariableDeclaration","scope":1509,"src":"5592:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1482,"name":"bytes","nodeType":"ElementaryTypeName","src":"5592:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1492,"initialValue":{"arguments":[{"id":1489,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"5646:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5652:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1486,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"5626:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}],"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5618:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1484,"name":"address","nodeType":"ElementaryTypeName","src":"5618:7:16","typeDescriptions":{}}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5618:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1649,"src":"5618:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5618:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5592:95:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1494,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"5705:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5705:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5726:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5705:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1500,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"5742:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5755:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1501,"name":"bool","nodeType":"ElementaryTypeName","src":"5755:4:16","typeDescriptions":{}}}],"id":1503,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5754:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1498,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5731:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5731:10:16","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5731:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5705:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5763:44:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1493,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5697:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5697:111:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1508,"nodeType":"ExpressionStatement","src":"5697:111:16"}]},"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"4796:372:16","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5182:19:16","nodeType":"FunctionDefinition","parameters":{"id":1480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1477,"mutability":"mutable","name":"token","nameLocation":"5209:5:16","nodeType":"VariableDeclaration","scope":1510,"src":"5202:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1476,"nodeType":"UserDefinedTypeName","pathNode":{"id":1475,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"5202:6:16"},"referencedDeclaration":1122,"src":"5202:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1479,"mutability":"mutable","name":"data","nameLocation":"5229:4:16","nodeType":"VariableDeclaration","scope":1510,"src":"5216:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1478,"name":"bytes","nodeType":"ElementaryTypeName","src":"5216:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5201:33:16"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[],"src":"5243:0:16"},"scope":1559,"src":"5173:642:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1557,"nodeType":"Block","src":"6405:505:16","statements":[{"assignments":[1522,1524],"declarations":[{"constant":false,"id":1522,"mutability":"mutable","name":"success","nameLocation":"6706:7:16","nodeType":"VariableDeclaration","scope":1557,"src":"6701:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1521,"name":"bool","nodeType":"ElementaryTypeName","src":"6701:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1524,"mutability":"mutable","name":"returndata","nameLocation":"6728:10:16","nodeType":"VariableDeclaration","scope":1557,"src":"6715:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1523,"name":"bytes","nodeType":"ElementaryTypeName","src":"6715:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1532,"initialValue":{"arguments":[{"id":1530,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"6762:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1527,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"6750:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}],"id":1526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6742:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1525,"name":"address","nodeType":"ElementaryTypeName","src":"6742:7:16","typeDescriptions":{}}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6742:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"6742:19:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6742:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6700:67:16"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1533,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"6796:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1534,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"6808:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6808:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6829:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6808:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1540,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"6845:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6858:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1541,"name":"bool","nodeType":"ElementaryTypeName","src":"6858:4:16","typeDescriptions":{}}}],"id":1543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6857:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1538,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6834:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"6834:10:16","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6834:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6808:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1546,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6807:58:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6796:69:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":1552,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"6896:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}],"id":1551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6888:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1550,"name":"address","nodeType":"ElementaryTypeName","src":"6888:7:16","typeDescriptions":{}}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6888:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1548,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"6869:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1889_$","typeString":"type(library Address)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1577,"src":"6869:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6869:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6796:107:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1520,"id":1556,"nodeType":"Return","src":"6777:126:16"}]},"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"5821:490:16","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":1558,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6325:23:16","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1514,"mutability":"mutable","name":"token","nameLocation":"6356:5:16","nodeType":"VariableDeclaration","scope":1558,"src":"6349:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"},"typeName":{"id":1513,"nodeType":"UserDefinedTypeName","pathNode":{"id":1512,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"6349:6:16"},"referencedDeclaration":1122,"src":"6349:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"data","nameLocation":"6376:4:16","nodeType":"VariableDeclaration","scope":1558,"src":"6363:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1515,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6348:33:16"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1558,"src":"6399:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1518,"name":"bool","nodeType":"ElementaryTypeName","src":"6399:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6398:6:16"},"scope":1559,"src":"6316:594:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1560,"src":"701:6211:16","usedErrors":[]}],"src":"115:6798:16"},"id":16},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1889]},"id":1890,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1561,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1562,"nodeType":"StructuredDocumentation","src":"126:67:17","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1889,"linearizedBaseContracts":[1889],"name":"Address","nameLocation":"202:7:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":1576,"nodeType":"Block","src":"1478:254:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1570,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"1702:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1702:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1702:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1569,"id":1575,"nodeType":"Return","src":"1695:30:17"}]},"documentation":{"id":1563,"nodeType":"StructuredDocumentation","src":"216:1191:17","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1577,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:17","nodeType":"FunctionDefinition","parameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"account","nameLocation":"1440:7:17","nodeType":"VariableDeclaration","scope":1577,"src":"1432:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1564,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:17"},"returnParameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1577,"src":"1472:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1567,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:17"},"scope":1889,"src":"1412:320:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1610,"nodeType":"Block","src":"2718:241:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1588,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1889","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1889","typeString":"library Address"}],"id":1587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1586,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:17","typeDescriptions":{}}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2736:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2736:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1591,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"2761:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1585,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1595,"nodeType":"ExpressionStatement","src":"2728:73:17"},{"assignments":[1597,null],"declarations":[{"constant":false,"id":1597,"mutability":"mutable","name":"success","nameLocation":"2818:7:17","nodeType":"VariableDeclaration","scope":1610,"src":"2813:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1596,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1604,"initialValue":{"arguments":[{"hexValue":"","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1598,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"2831:9:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2831:14:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1600,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"2853:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2831:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:17"},{"expression":{"arguments":[{"id":1606,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"2882:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1605,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2874:78:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1609,"nodeType":"ExpressionStatement","src":"2874:78:17"}]},"documentation":{"id":1578,"nodeType":"StructuredDocumentation","src":"1738:904:17","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1611,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:17","nodeType":"FunctionDefinition","parameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1580,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:17","nodeType":"VariableDeclaration","scope":1611,"src":"2666:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1579,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1582,"mutability":"mutable","name":"amount","nameLocation":"2701:6:17","nodeType":"VariableDeclaration","scope":1611,"src":"2693:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:17"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[],"src":"2718:0:17"},"scope":1889,"src":"2647:312:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1628,"nodeType":"Block","src":"3790:96:17","statements":[{"expression":{"arguments":[{"id":1622,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"3829:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1623,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"3837:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1621,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1669,1713],"referencedDeclaration":1713,"src":"3807:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3807:72:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1620,"id":1627,"nodeType":"Return","src":"3800:79:17"}]},"documentation":{"id":1612,"nodeType":"StructuredDocumentation","src":"2965:731:17","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1629,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:17","nodeType":"FunctionDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"target","nameLocation":"3731:6:17","nodeType":"VariableDeclaration","scope":1629,"src":"3723:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1613,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"data","nameLocation":"3752:4:17","nodeType":"VariableDeclaration","scope":1629,"src":"3739:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1615,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:17"},"returnParameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1629,"src":"3776:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1618,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:17"},"scope":1889,"src":"3701:185:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1648,"nodeType":"Block","src":"4255:76:17","statements":[{"expression":{"arguments":[{"id":1642,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"4294:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1643,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"4302:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1645,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"4311:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1641,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1669,1713],"referencedDeclaration":1713,"src":"4272:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4272:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1640,"id":1647,"nodeType":"Return","src":"4265:59:17"}]},"documentation":{"id":1630,"nodeType":"StructuredDocumentation","src":"3892:211:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1649,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:17","nodeType":"FunctionDefinition","parameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"target","nameLocation":"4147:6:17","nodeType":"VariableDeclaration","scope":1649,"src":"4139:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1631,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1634,"mutability":"mutable","name":"data","nameLocation":"4176:4:17","nodeType":"VariableDeclaration","scope":1649,"src":"4163:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1633,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1636,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:17","nodeType":"VariableDeclaration","scope":1649,"src":"4190:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1635,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:17"},"returnParameters":{"id":1640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1649,"src":"4241:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1638,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:17"},"scope":1889,"src":"4108:223:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1668,"nodeType":"Block","src":"4806:111:17","statements":[{"expression":{"arguments":[{"id":1662,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"4845:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1663,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"4853:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4859:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1661,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1669,1713],"referencedDeclaration":1713,"src":"4823:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4823:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1660,"id":1667,"nodeType":"Return","src":"4816:94:17"}]},"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"4337:351:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1669,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:17","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"target","nameLocation":"4732:6:17","nodeType":"VariableDeclaration","scope":1669,"src":"4724:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1651,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"data","nameLocation":"4753:4:17","nodeType":"VariableDeclaration","scope":1669,"src":"4740:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1653,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"value","nameLocation":"4767:5:17","nodeType":"VariableDeclaration","scope":1669,"src":"4759:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1655,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:17"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1669,"src":"4792:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1658,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:17"},"scope":1889,"src":"4693:224:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1712,"nodeType":"Block","src":"5344:267:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1686,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1889","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1889","typeString":"library Address"}],"id":1685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1684,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:17","typeDescriptions":{}}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5362:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5362:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1689,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"5387:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1683,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5354:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1693,"nodeType":"ExpressionStatement","src":"5354:81:17"},{"assignments":[1695,1697],"declarations":[{"constant":false,"id":1695,"mutability":"mutable","name":"success","nameLocation":"5451:7:17","nodeType":"VariableDeclaration","scope":1712,"src":"5446:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1694,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:17","nodeType":"VariableDeclaration","scope":1712,"src":"5460:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1696,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1704,"initialValue":{"arguments":[{"id":1702,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"5513:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1698,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"5487:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5487:11:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1700,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"5506:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5487:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:17"},{"expression":{"arguments":[{"id":1706,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"5562:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1707,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"5570:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1708,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"5579:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1709,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"5591:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1705,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"5535:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5535:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1682,"id":1711,"nodeType":"Return","src":"5528:76:17"}]},"documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"4923:237:17","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:17","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"target","nameLocation":"5213:6:17","nodeType":"VariableDeclaration","scope":1713,"src":"5205:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"data","nameLocation":"5242:4:17","nodeType":"VariableDeclaration","scope":1713,"src":"5229:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1673,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"value","nameLocation":"5264:5:17","nodeType":"VariableDeclaration","scope":1713,"src":"5256:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1675,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1678,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:17","nodeType":"VariableDeclaration","scope":1713,"src":"5279:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1677,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:17"},"returnParameters":{"id":1682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1713,"src":"5330:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1680,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:17"},"scope":1889,"src":"5165:446:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1729,"nodeType":"Block","src":"5888:97:17","statements":[{"expression":{"arguments":[{"id":1724,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"5924:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1725,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"5932:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1723,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1730,1759],"referencedDeclaration":1759,"src":"5905:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5905:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1722,"id":1728,"nodeType":"Return","src":"5898:80:17"}]},"documentation":{"id":1714,"nodeType":"StructuredDocumentation","src":"5617:166:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1730,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:17","nodeType":"FunctionDefinition","parameters":{"id":1719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"target","nameLocation":"5824:6:17","nodeType":"VariableDeclaration","scope":1730,"src":"5816:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1718,"mutability":"mutable","name":"data","nameLocation":"5845:4:17","nodeType":"VariableDeclaration","scope":1730,"src":"5832:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1717,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:17"},"returnParameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1730,"src":"5874:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1720,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:17"},"scope":1889,"src":"5788:197:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1758,"nodeType":"Block","src":"6327:168:17","statements":[{"assignments":[1743,1745],"declarations":[{"constant":false,"id":1743,"mutability":"mutable","name":"success","nameLocation":"6343:7:17","nodeType":"VariableDeclaration","scope":1758,"src":"6338:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1742,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1745,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:17","nodeType":"VariableDeclaration","scope":1758,"src":"6352:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1744,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1750,"initialValue":{"arguments":[{"id":1748,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"6397:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1746,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"6379:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:17","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6379:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:17"},{"expression":{"arguments":[{"id":1752,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"6446:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1753,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"6454:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1754,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"6463:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1755,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"6475:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1751,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"6419:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6419:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1741,"id":1757,"nodeType":"Return","src":"6412:76:17"}]},"documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"5991:173:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1759,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:17","nodeType":"FunctionDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"target","nameLocation":"6214:6:17","nodeType":"VariableDeclaration","scope":1759,"src":"6206:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"data","nameLocation":"6243:4:17","nodeType":"VariableDeclaration","scope":1759,"src":"6230:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1734,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:17","nodeType":"VariableDeclaration","scope":1759,"src":"6257:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1736,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:17"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1759,"src":"6313:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1739,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:17"},"scope":1889,"src":"6169:326:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1775,"nodeType":"Block","src":"6771:101:17","statements":[{"expression":{"arguments":[{"id":1770,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"6809:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1771,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"6817:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1769,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1776,1805],"referencedDeclaration":1805,"src":"6788:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6788:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1768,"id":1774,"nodeType":"Return","src":"6781:84:17"}]},"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"6501:168:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1776,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:17","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"target","nameLocation":"6712:6:17","nodeType":"VariableDeclaration","scope":1776,"src":"6704:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"data","nameLocation":"6733:4:17","nodeType":"VariableDeclaration","scope":1776,"src":"6720:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1763,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:17"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1776,"src":"6757:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1766,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:17"},"scope":1889,"src":"6674:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1804,"nodeType":"Block","src":"7213:170:17","statements":[{"assignments":[1789,1791],"declarations":[{"constant":false,"id":1789,"mutability":"mutable","name":"success","nameLocation":"7229:7:17","nodeType":"VariableDeclaration","scope":1804,"src":"7224:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1788,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1791,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:17","nodeType":"VariableDeclaration","scope":1804,"src":"7238:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1790,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1796,"initialValue":{"arguments":[{"id":1794,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"7285:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1792,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"7265:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:17","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7265:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:17"},{"expression":{"arguments":[{"id":1798,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"7334:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1799,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"7342:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1800,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"7351:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1801,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"7363:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1797,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"7307:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7307:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1787,"id":1803,"nodeType":"Return","src":"7300:76:17"}]},"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"6878:175:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1805,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:17","nodeType":"FunctionDefinition","parameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"target","nameLocation":"7105:6:17","nodeType":"VariableDeclaration","scope":1805,"src":"7097:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"data","nameLocation":"7134:4:17","nodeType":"VariableDeclaration","scope":1805,"src":"7121:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1780,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1783,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:17","nodeType":"VariableDeclaration","scope":1805,"src":"7148:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1782,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:17"},"returnParameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1805,"src":"7199:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1785,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:17"},"scope":1889,"src":"7058:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1843,"nodeType":"Block","src":"7865:434:17","statements":[{"condition":{"id":1819,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"7879:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1841,"nodeType":"Block","src":"8235:58:17","statements":[{"expression":{"arguments":[{"id":1837,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"8257:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1838,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"8269:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1836,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8249:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8249:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1840,"nodeType":"ExpressionStatement","src":"8249:33:17"}]},"id":1842,"nodeType":"IfStatement","src":"7875:418:17","trueBody":{"id":1835,"nodeType":"Block","src":"7888:341:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1820,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"7906:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7906:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1832,"nodeType":"IfStatement","src":"7902:286:17","trueBody":{"id":1831,"nodeType":"Block","src":"7930:258:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":1826,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"8132:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1825,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"8121:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8121:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1824,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8113:60:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1830,"nodeType":"ExpressionStatement","src":"8113:60:17"}]}},{"expression":{"id":1833,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"8208:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1818,"id":1834,"nodeType":"Return","src":"8201:17:17"}]}}]},"documentation":{"id":1806,"nodeType":"StructuredDocumentation","src":"7389:277:17","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1844,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:17","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"target","nameLocation":"7724:6:17","nodeType":"VariableDeclaration","scope":1844,"src":"7716:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1807,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1810,"mutability":"mutable","name":"success","nameLocation":"7745:7:17","nodeType":"VariableDeclaration","scope":1844,"src":"7740:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1809,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:17","nodeType":"VariableDeclaration","scope":1844,"src":"7762:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1811,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:17","nodeType":"VariableDeclaration","scope":1844,"src":"7795:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1813,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:17"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1844,"src":"7851:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1816,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:17"},"scope":1889,"src":"7671:628:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1867,"nodeType":"Block","src":"8680:135:17","statements":[{"condition":{"id":1856,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"8694:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1865,"nodeType":"Block","src":"8751:58:17","statements":[{"expression":{"arguments":[{"id":1861,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"8773:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1862,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"8785:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1860,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8765:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8765:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1864,"nodeType":"ExpressionStatement","src":"8765:33:17"}]},"id":1866,"nodeType":"IfStatement","src":"8690:119:17","trueBody":{"id":1859,"nodeType":"Block","src":"8703:42:17","statements":[{"expression":{"id":1857,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"8724:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1855,"id":1858,"nodeType":"Return","src":"8717:17:17"}]}}]},"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"8305:210:17","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1868,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:17","nodeType":"FunctionDefinition","parameters":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"mutability":"mutable","name":"success","nameLocation":"8560:7:17","nodeType":"VariableDeclaration","scope":1868,"src":"8555:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1846,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:17","nodeType":"VariableDeclaration","scope":1868,"src":"8577:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1848,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1851,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:17","nodeType":"VariableDeclaration","scope":1868,"src":"8610:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1850,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:17"},"returnParameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1868,"src":"8666:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1853,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:17"},"scope":1889,"src":"8520:295:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1887,"nodeType":"Block","src":"8904:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1875,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"8980:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8980:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1885,"nodeType":"Block","src":"9310:45:17","statements":[{"expression":{"arguments":[{"id":1882,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"9331:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1881,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9324:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1884,"nodeType":"ExpressionStatement","src":"9324:20:17"}]},"id":1886,"nodeType":"IfStatement","src":"8976:379:17","trueBody":{"id":1880,"nodeType":"Block","src":"9003:301:17","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:17","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:17","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:17"},"nodeType":"YulFunctionCall","src":"9202:17:17"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:17","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:17"},"nodeType":"YulFunctionCall","src":"9243:19:17"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:17"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:17"},"nodeType":"YulFunctionCall","src":"9236:44:17"},"nodeType":"YulExpressionStatement","src":"9236:44:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1870,"isOffset":false,"isSlot":false,"src":"9208:10:17","valueSize":1},{"declaration":1870,"isOffset":false,"isSlot":false,"src":"9251:10:17","valueSize":1}],"id":1879,"nodeType":"InlineAssembly","src":"9152:142:17"}]}}]},"id":1888,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:17","nodeType":"FunctionDefinition","parameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:17","nodeType":"VariableDeclaration","scope":1888,"src":"8838:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1869,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:17","nodeType":"VariableDeclaration","scope":1888,"src":"8863:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1871,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:17"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[],"src":"8904:0:17"},"scope":1889,"src":"8821:540:17","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1890,"src":"194:9169:17","usedErrors":[]}],"src":"101:9263:17"},"id":17},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1911]},"id":1912,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1891,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:18"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1892,"nodeType":"StructuredDocumentation","src":"111:496:18","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1911,"linearizedBaseContracts":[1911],"name":"Context","nameLocation":"626:7:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1900,"nodeType":"Block","src":"702:34:18","statements":[{"expression":{"expression":{"id":1897,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1896,"id":1899,"nodeType":"Return","src":"712:17:18"}]},"id":1901,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:18","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[],"src":"659:2:18"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1901,"src":"693:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1894,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:18"},"scope":1911,"src":"640:96:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1909,"nodeType":"Block","src":"809:32:18","statements":[{"expression":{"expression":{"id":1906,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1905,"id":1908,"nodeType":"Return","src":"819:15:18"}]},"id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:18","nodeType":"FunctionDefinition","parameters":{"id":1902,"nodeType":"ParameterList","parameters":[],"src":"759:2:18"},"returnParameters":{"id":1905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"793:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1903,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:18"},"scope":1911,"src":"742:99:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1912,"src":"608:235:18","usedErrors":[]}],"src":"86:758:18"},"id":18},"@openzeppelin/contracts/utils/Multicall.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Multicall.sol","exportedSymbols":{"Address":[1889],"Multicall":[1966]},"id":1967,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1913,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:19"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"./Address.sol","id":1914,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":1890,"src":"128:23:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Multicall","contractDependencies":[],"contractKind":"contract","documentation":{"id":1915,"nodeType":"StructuredDocumentation","src":"153:125:19","text":" @dev Provides a function to batch together multiple calls in a single external call.\n _Available since v4.1._"},"fullyImplemented":true,"id":1966,"linearizedBaseContracts":[1966],"name":"Multicall","nameLocation":"297:9:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":1964,"nodeType":"Block","src":"562:216:19","statements":[{"expression":{"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1925,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"572:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":1929,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"594:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"594:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"582:11:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":1926,"name":"bytes","nodeType":"ElementaryTypeName","src":"586:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1927,"nodeType":"ArrayTypeName","src":"586:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"582:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"572:34:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1933,"nodeType":"ExpressionStatement","src":"572:34:19"},{"body":{"id":1960,"nodeType":"Block","src":"658:90:19","statements":[{"expression":{"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1945,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"672:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1947,"indexExpression":{"id":1946,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"680:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"672:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1952,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"722:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Multicall_$1966","typeString":"contract Multicall"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Multicall_$1966","typeString":"contract Multicall"}],"id":1951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"714:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1950,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:19","typeDescriptions":{}}},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"714:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1954,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"729:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1956,"indexExpression":{"id":1955,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"734:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"729:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":1948,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"685:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1889_$","typeString":"type(library Address)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1776,"src":"685:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"685:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"672:65:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1959,"nodeType":"ExpressionStatement","src":"672:65:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"636:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1939,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"640:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"640:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"636:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1961,"initializationExpression":{"assignments":[1935],"declarations":[{"constant":false,"id":1935,"mutability":"mutable","name":"i","nameLocation":"629:1:19","nodeType":"VariableDeclaration","scope":1961,"src":"621:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"621:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1937,"initialValue":{"hexValue":"30","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"621:13:19"},"loopExpression":{"expression":{"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"653:3:19","subExpression":{"id":1942,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"653:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1944,"nodeType":"ExpressionStatement","src":"653:3:19"},"nodeType":"ForStatement","src":"616:132:19"},{"expression":{"id":1962,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"764:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":1924,"id":1963,"nodeType":"Return","src":"757:14:19"}]},"documentation":{"id":1916,"nodeType":"StructuredDocumentation","src":"313:152:19","text":" @dev Receives and executes a batch of function calls on this contract.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"ac9650d8","id":1965,"implemented":true,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"479:9:19","nodeType":"FunctionDefinition","parameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"mutability":"mutable","name":"data","nameLocation":"506:4:19","nodeType":"VariableDeclaration","scope":1965,"src":"489:21:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1917,"name":"bytes","nodeType":"ElementaryTypeName","src":"489:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1918,"nodeType":"ArrayTypeName","src":"489:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"488:23:19"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"results","nameLocation":"553:7:19","nodeType":"VariableDeclaration","scope":1965,"src":"538:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1921,"name":"bytes","nodeType":"ElementaryTypeName","src":"538:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1922,"nodeType":"ArrayTypeName","src":"538:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"537:24:19"},"scope":1966,"src":"470:308:19","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1967,"src":"279:501:19","usedErrors":[]}],"src":"103:678:19"},"id":19},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3097],"SignedMath":[3202],"Strings":[2195]},"id":2196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1968,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:20"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1969,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2196,"sourceUnit":3098,"src":"126:25:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1970,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2196,"sourceUnit":3203,"src":"152:31:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1971,"nodeType":"StructuredDocumentation","src":"185:34:20","text":" @dev String operations."},"fullyImplemented":true,"id":2195,"linearizedBaseContracts":[2195],"name":"Strings","nameLocation":"228:7:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1974,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:20","nodeType":"VariableDeclaration","scope":2195,"src":"242:54:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1972,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:20","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1977,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:20","nodeType":"VariableDeclaration","scope":2195,"src":"302:43:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1975,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:20","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2024,"nodeType":"Block","src":"518:625:20","statements":[{"id":2023,"nodeType":"UncheckedBlock","src":"528:609:20","statements":[{"assignments":[1986],"declarations":[{"constant":false,"id":1986,"mutability":"mutable","name":"length","nameLocation":"560:6:20","nodeType":"VariableDeclaration","scope":2023,"src":"552:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1985,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1993,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"580:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1987,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"569:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3097_$","typeString":"type(library Math)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2934,"src":"569:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"569:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:20"},{"assignments":[1995],"declarations":[{"constant":false,"id":1995,"mutability":"mutable","name":"buffer","nameLocation":"618:6:20","nodeType":"VariableDeclaration","scope":2023,"src":"604:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1994,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2000,"initialValue":{"arguments":[{"id":1998,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"638:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1996,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"627:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:20"},{"assignments":[2002],"declarations":[{"constant":false,"id":2002,"mutability":"mutable","name":"ptr","nameLocation":"667:3:20","nodeType":"VariableDeclaration","scope":2023,"src":"659:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2003,"nodeType":"VariableDeclarationStatement","src":"659:11:20"},{"AST":{"nodeType":"YulBlock","src":"740:67:20","statements":[{"nodeType":"YulAssignment","src":"758:35:20","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:20","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:20"},"nodeType":"YulFunctionCall","src":"777:15:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:20"},"nodeType":"YulFunctionCall","src":"765:28:20"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1995,"isOffset":false,"isSlot":false,"src":"769:6:20","valueSize":1},{"declaration":1986,"isOffset":false,"isSlot":false,"src":"785:6:20","valueSize":1},{"declaration":2002,"isOffset":false,"isSlot":false,"src":"758:3:20","valueSize":1}],"id":2004,"nodeType":"InlineAssembly","src":"731:76:20"},{"body":{"id":2019,"nodeType":"Block","src":"833:267:20","statements":[{"expression":{"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:20","subExpression":{"id":2006,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"851:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2008,"nodeType":"ExpressionStatement","src":"851:5:20"},{"AST":{"nodeType":"YulBlock","src":"934:84:20","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:20"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:20","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:20"},"nodeType":"YulFunctionCall","src":"974:14:20"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:20"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:20"},"nodeType":"YulFunctionCall","src":"969:30:20"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:20"},"nodeType":"YulFunctionCall","src":"956:44:20"},"nodeType":"YulExpressionStatement","src":"956:44:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1974,"isOffset":false,"isSlot":false,"src":"990:8:20","valueSize":1},{"declaration":2002,"isOffset":false,"isSlot":false,"src":"964:3:20","valueSize":1},{"declaration":1980,"isOffset":false,"isSlot":false,"src":"978:5:20","valueSize":1}],"id":2009,"nodeType":"InlineAssembly","src":"925:93:20"},{"expression":{"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2010,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"1035:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2013,"nodeType":"ExpressionStatement","src":"1035:11:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"1068:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2018,"nodeType":"IfStatement","src":"1064:21:20","trueBody":{"id":2017,"nodeType":"Break","src":"1080:5:20"}}]},"condition":{"hexValue":"74727565","id":2005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2020,"nodeType":"WhileStatement","src":"820:280:20"},{"expression":{"id":2021,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"1120:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1984,"id":2022,"nodeType":"Return","src":"1113:13:20"}]}]},"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"352:90:20","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2025,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:20","nodeType":"FunctionDefinition","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"value","nameLocation":"473:5:20","nodeType":"VariableDeclaration","scope":2025,"src":"465:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1979,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:20"},"returnParameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2025,"src":"503:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1982,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:20"},"scope":2195,"src":"447:696:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2052,"nodeType":"Block","src":"1313:103:20","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2037,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"1354:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:20","trueExpression":{"hexValue":"2d","id":2040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"1400:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2044,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"1385:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3202_$","typeString":"type(library SignedMath)"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3201,"src":"1385:14:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1385:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2043,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[2025,2053],"referencedDeclaration":2025,"src":"1376:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1376:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2035,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1337:71:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2033,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:20","typeDescriptions":{}}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1330:79:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2032,"id":2051,"nodeType":"Return","src":"1323:86:20"}]},"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"1149:89:20","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2053,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:20","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"value","nameLocation":"1268:5:20","nodeType":"VariableDeclaration","scope":2053,"src":"1261:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2027,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:20"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2053,"src":"1298:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2030,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:20"},"scope":2195,"src":"1243:173:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2072,"nodeType":"Block","src":"1595:100:20","statements":[{"id":2071,"nodeType":"UncheckedBlock","src":"1605:84:20","statements":[{"expression":{"arguments":[{"id":2062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"1648:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2065,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"1667:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2063,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"1655:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3097_$","typeString":"type(library Math)"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3057,"src":"1655:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1655:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2061,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2073,2149,2169],"referencedDeclaration":2149,"src":"1636:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1636:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2060,"id":2070,"nodeType":"Return","src":"1629:49:20"}]}]},"documentation":{"id":2054,"nodeType":"StructuredDocumentation","src":"1422:94:20","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2073,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:20","nodeType":"FunctionDefinition","parameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2056,"mutability":"mutable","name":"value","nameLocation":"1550:5:20","nodeType":"VariableDeclaration","scope":2073,"src":"1542:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:20"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2073,"src":"1580:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2058,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:20"},"scope":2195,"src":"1521:174:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2148,"nodeType":"Block","src":"1908:347:20","statements":[{"assignments":[2084],"declarations":[{"constant":false,"id":2084,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:20","nodeType":"VariableDeclaration","scope":2148,"src":"1918:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2083,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2093,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2088,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"1954:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2085,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1940:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:20"},{"expression":{"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2094,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"1975:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2096,"indexExpression":{"hexValue":"30","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2099,"nodeType":"ExpressionStatement","src":"1975:15:20"},{"expression":{"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2100,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2000:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2102,"indexExpression":{"hexValue":"31","id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2105,"nodeType":"ExpressionStatement","src":"2000:15:20"},{"body":{"id":2134,"nodeType":"Block","src":"2070:83:20","statements":[{"expression":{"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2120,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2084:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2122,"indexExpression":{"id":2121,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"2091:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2123,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"2096:8:20","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2127,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2105:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:20","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2129,"nodeType":"ExpressionStatement","src":"2084:33:20"},{"expression":{"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2131:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2133,"nodeType":"ExpressionStatement","src":"2131:11:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2114,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"2058:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2135,"initializationExpression":{"assignments":[2107],"declarations":[{"constant":false,"id":2107,"mutability":"mutable","name":"i","nameLocation":"2038:1:20","nodeType":"VariableDeclaration","scope":2135,"src":"2030:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2113,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2109,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2046:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:20"},"loopExpression":{"expression":{"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:20","subExpression":{"id":2117,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"2067:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2119,"nodeType":"ExpressionStatement","src":"2065:3:20"},"nodeType":"ForStatement","src":"2025:128:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2170:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2136,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2162:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2142,"nodeType":"ExpressionStatement","src":"2162:55:20"},{"expression":{"arguments":[{"id":2145,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2241:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2143,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:20","typeDescriptions":{}}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2234:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2082,"id":2147,"nodeType":"Return","src":"2227:21:20"}]},"documentation":{"id":2074,"nodeType":"StructuredDocumentation","src":"1701:112:20","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2149,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:20","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"value","nameLocation":"1847:5:20","nodeType":"VariableDeclaration","scope":2149,"src":"1839:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"length","nameLocation":"1862:6:20","nodeType":"VariableDeclaration","scope":2149,"src":"1854:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:20"},"returnParameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2149,"src":"1893:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2080,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:20"},"scope":2195,"src":"1818:437:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2168,"nodeType":"Block","src":"2480:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2162,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"2525:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2160,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:20","typeDescriptions":{}}},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:20","typeDescriptions":{}}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2509:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2165,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1977,"src":"2533:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2157,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2073,2149,2169],"referencedDeclaration":2149,"src":"2497:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2497:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2156,"id":2167,"nodeType":"Return","src":"2490:59:20"}]},"documentation":{"id":2150,"nodeType":"StructuredDocumentation","src":"2261:141:20","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2169,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:20","nodeType":"FunctionDefinition","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"mutability":"mutable","name":"addr","nameLocation":"2436:4:20","nodeType":"VariableDeclaration","scope":2169,"src":"2428:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2151,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:20"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2169,"src":"2465:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2154,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:20"},"scope":2195,"src":"2407:149:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2193,"nodeType":"Block","src":"2711:66:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2182,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"2744:1:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2180,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:20","typeDescriptions":{}}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2738:8:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2179,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2188,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"2767:1:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2186,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:20","typeDescriptions":{}}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2761:8:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2185,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2751:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2178,"id":2192,"nodeType":"Return","src":"2721:49:20"}]},"documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"2562:66:20","text":" @dev Returns true if the two strings are equal."},"id":2194,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:20","nodeType":"FunctionDefinition","parameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"a","nameLocation":"2662:1:20","nodeType":"VariableDeclaration","scope":2194,"src":"2648:15:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2171,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2174,"mutability":"mutable","name":"b","nameLocation":"2679:1:20","nodeType":"VariableDeclaration","scope":2194,"src":"2665:15:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2173,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:20"},"returnParameters":{"id":2178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2194,"src":"2705:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2176,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:20"},"scope":2195,"src":"2633:144:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2196,"src":"220:2559:20","usedErrors":[]}],"src":"101:2679:20"},"id":20},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2219],"IERC165":[2231]},"id":2220,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2197,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:21"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2220,"sourceUnit":2232,"src":"124:23:21","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2200,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2231,"src":"754:7:21"},"id":2201,"nodeType":"InheritanceSpecifier","src":"754:7:21"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"149:576:21","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2219,"linearizedBaseContracts":[2219,2231],"name":"ERC165","nameLocation":"744:6:21","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2230],"body":{"id":2217,"nodeType":"Block","src":"920:64:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2210,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"937:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2212,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"957:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2231_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2231_$","typeString":"type(contract IERC165)"}],"id":2211,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2231","typeString":"type(contract IERC165)"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2209,"id":2216,"nodeType":"Return","src":"930:47:21"}]},"documentation":{"id":2202,"nodeType":"StructuredDocumentation","src":"768:56:21","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2218,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:21","nodeType":"FunctionDefinition","overrides":{"id":2206,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:21"},"parameters":{"id":2205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2204,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:21","nodeType":"VariableDeclaration","scope":2218,"src":"856:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2203,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:21"},"returnParameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2218,"src":"914:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2207,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:21"},"scope":2219,"src":"829:155:21","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2220,"src":"726:260:21","usedErrors":[]}],"src":"99:888:21"},"id":21},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2231]},"id":2232,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2221,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2222,"nodeType":"StructuredDocumentation","src":"125:279:22","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2231,"linearizedBaseContracts":[2231],"name":"IERC165","nameLocation":"415:7:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"429:340:22","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2230,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:22","nodeType":"FunctionDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:22","nodeType":"VariableDeclaration","scope":2230,"src":"801:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2224,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:22"},"returnParameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2230,"src":"844:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2227,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:22"},"scope":2231,"src":"774:76:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2232,"src":"405:447:22","usedErrors":[]}],"src":"100:753:22"},"id":22},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3097]},"id":3098,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2233,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2234,"nodeType":"StructuredDocumentation","src":"128:73:23","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3097,"linearizedBaseContracts":[3097],"name":"Math","nameLocation":"210:4:23","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2238,"members":[{"id":2235,"name":"Down","nameLocation":"245:4:23","nodeType":"EnumValue","src":"245:4:23"},{"id":2236,"name":"Up","nameLocation":"287:2:23","nodeType":"EnumValue","src":"287:2:23"},{"id":2237,"name":"Zero","nameLocation":"318:4:23","nodeType":"EnumValue","src":"318:4:23"}],"name":"Rounding","nameLocation":"226:8:23","nodeType":"EnumDefinition","src":"221:122:23"},{"body":{"id":2255,"nodeType":"Block","src":"480:37:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2248,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"497:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2249,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"501:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2252,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"509:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:23","trueExpression":{"id":2251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"505:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2247,"id":2254,"nodeType":"Return","src":"490:20:23"}]},"documentation":{"id":2239,"nodeType":"StructuredDocumentation","src":"349:59:23","text":" @dev Returns the largest of two numbers."},"id":2256,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:23","nodeType":"FunctionDefinition","parameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2241,"mutability":"mutable","name":"a","nameLocation":"434:1:23","nodeType":"VariableDeclaration","scope":2256,"src":"426:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2240,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"b","nameLocation":"445:1:23","nodeType":"VariableDeclaration","scope":2256,"src":"437:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:23"},"returnParameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2256,"src":"471:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:23"},"scope":3097,"src":"413:104:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2273,"nodeType":"Block","src":"655:37:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2266,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"672:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2267,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"676:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2270,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"684:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:23","trueExpression":{"id":2269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"680:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2265,"id":2272,"nodeType":"Return","src":"665:20:23"}]},"documentation":{"id":2257,"nodeType":"StructuredDocumentation","src":"523:60:23","text":" @dev Returns the smallest of two numbers."},"id":2274,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:23","nodeType":"FunctionDefinition","parameters":{"id":2262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"mutability":"mutable","name":"a","nameLocation":"609:1:23","nodeType":"VariableDeclaration","scope":2274,"src":"601:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2258,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2261,"mutability":"mutable","name":"b","nameLocation":"620:1:23","nodeType":"VariableDeclaration","scope":2274,"src":"612:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:23"},"returnParameters":{"id":2265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2274,"src":"646:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2263,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:23"},"scope":3097,"src":"588:104:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2296,"nodeType":"Block","src":"876:82:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2284,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"931:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2285,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"935:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2288,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"941:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2289,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"945:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2291,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2283,"id":2295,"nodeType":"Return","src":"923:28:23"}]},"documentation":{"id":2275,"nodeType":"StructuredDocumentation","src":"698:102:23","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2297,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:23","nodeType":"FunctionDefinition","parameters":{"id":2280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2277,"mutability":"mutable","name":"a","nameLocation":"830:1:23","nodeType":"VariableDeclaration","scope":2297,"src":"822:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2279,"mutability":"mutable","name":"b","nameLocation":"841:1:23","nodeType":"VariableDeclaration","scope":2297,"src":"833:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2278,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:23"},"returnParameters":{"id":2283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2297,"src":"867:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2281,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:23"},"scope":3097,"src":"805:153:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2321,"nodeType":"Block","src":"1228:123:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2307,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"1316:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2311,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"1330:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2314,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2315,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"1339:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:23","trueExpression":{"hexValue":"30","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2306,"id":2320,"nodeType":"Return","src":"1309:35:23"}]},"documentation":{"id":2298,"nodeType":"StructuredDocumentation","src":"964:188:23","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2322,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:23","nodeType":"FunctionDefinition","parameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2300,"mutability":"mutable","name":"a","nameLocation":"1182:1:23","nodeType":"VariableDeclaration","scope":2322,"src":"1174:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2299,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2302,"mutability":"mutable","name":"b","nameLocation":"1193:1:23","nodeType":"VariableDeclaration","scope":2322,"src":"1185:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:23"},"returnParameters":{"id":2306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2322,"src":"1219:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:23"},"scope":3097,"src":"1157:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2444,"nodeType":"Block","src":"1765:4115:23","statements":[{"id":2443,"nodeType":"UncheckedBlock","src":"1775:4099:23","statements":[{"assignments":[2335],"declarations":[{"constant":false,"id":2335,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:23","nodeType":"VariableDeclaration","scope":2443,"src":"2096:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2336,"nodeType":"VariableDeclarationStatement","src":"2096:13:23"},{"assignments":[2338],"declarations":[{"constant":false,"id":2338,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:23","nodeType":"VariableDeclaration","scope":2443,"src":"2168:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2339,"nodeType":"VariableDeclarationStatement","src":"2168:13:23"},{"AST":{"nodeType":"YulBlock","src":"2248:157:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:23"},"nodeType":"YulFunctionCall","src":"2289:6:23"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:23"},"nodeType":"YulFunctionCall","src":"2276:20:23"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:23","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:23"},"nodeType":"YulFunctionCall","src":"2322:9:23"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:23"}]},{"nodeType":"YulAssignment","src":"2348:43:23","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:23"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:23"},"nodeType":"YulFunctionCall","src":"2361:14:23"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:23"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:23"},"nodeType":"YulFunctionCall","src":"2377:13:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:23"},"nodeType":"YulFunctionCall","src":"2357:34:23"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:23"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2335,"isOffset":false,"isSlot":false,"src":"2313:5:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"2369:5:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"2384:5:23","valueSize":1},{"declaration":2338,"isOffset":false,"isSlot":false,"src":"2348:5:23","valueSize":1},{"declaration":2325,"isOffset":false,"isSlot":false,"src":"2283:1:23","valueSize":1},{"declaration":2325,"isOffset":false,"isSlot":false,"src":"2326:1:23","valueSize":1},{"declaration":2327,"isOffset":false,"isSlot":false,"src":"2286:1:23","valueSize":1},{"declaration":2327,"isOffset":false,"isSlot":false,"src":"2329:1:23","valueSize":1}],"id":2340,"nodeType":"InlineAssembly","src":"2239:166:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2341,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"2486:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2349,"nodeType":"IfStatement","src":"2482:368:23","trueBody":{"id":2348,"nodeType":"Block","src":"2498:352:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"2816:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2345,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"2824:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2333,"id":2347,"nodeType":"Return","src":"2809:26:23"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"2960:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2352,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"2974:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2952:53:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2356,"nodeType":"ExpressionStatement","src":"2952:53:23"},{"assignments":[2358],"declarations":[{"constant":false,"id":2358,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:23","nodeType":"VariableDeclaration","scope":2443,"src":"3261:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2359,"nodeType":"VariableDeclarationStatement","src":"3261:17:23"},{"AST":{"nodeType":"YulBlock","src":"3301:291:23","statements":[{"nodeType":"YulAssignment","src":"3370:38:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:23"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:23"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:23"},"nodeType":"YulFunctionCall","src":"3383:25:23"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:23"}]},{"nodeType":"YulAssignment","src":"3490:41:23","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:23"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:23"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:23"},"nodeType":"YulFunctionCall","src":"3510:20:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:23"},"nodeType":"YulFunctionCall","src":"3499:32:23"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:23"}]},{"nodeType":"YulAssignment","src":"3548:30:23","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:23"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:23"},"nodeType":"YulFunctionCall","src":"3557:21:23"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:23"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2329,"isOffset":false,"isSlot":false,"src":"3396:11:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"3524:5:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"3548:5:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"3561:5:23","valueSize":1},{"declaration":2338,"isOffset":false,"isSlot":false,"src":"3490:5:23","valueSize":1},{"declaration":2338,"isOffset":false,"isSlot":false,"src":"3503:5:23","valueSize":1},{"declaration":2358,"isOffset":false,"isSlot":false,"src":"3370:9:23","valueSize":1},{"declaration":2358,"isOffset":false,"isSlot":false,"src":"3513:9:23","valueSize":1},{"declaration":2358,"isOffset":false,"isSlot":false,"src":"3568:9:23","valueSize":1},{"declaration":2325,"isOffset":false,"isSlot":false,"src":"3390:1:23","valueSize":1},{"declaration":2327,"isOffset":false,"isSlot":false,"src":"3393:1:23","valueSize":1}],"id":2360,"nodeType":"InlineAssembly","src":"3292:300:23"},{"assignments":[2362],"declarations":[{"constant":false,"id":2362,"mutability":"mutable","name":"twos","nameLocation":"3907:4:23","nodeType":"VariableDeclaration","scope":2443,"src":"3899:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2361,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2370,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2363,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"3914:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:23","subExpression":{"id":2364,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"3930:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2368,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:23"},{"AST":{"nodeType":"YulBlock","src":"3969:362:23","statements":[{"nodeType":"YulAssignment","src":"4034:37:23","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:23"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:23"},"nodeType":"YulFunctionCall","src":"4049:22:23"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:23"}]},{"nodeType":"YulAssignment","src":"4138:25:23","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:23"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:23"},"nodeType":"YulFunctionCall","src":"4147:16:23"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:23"}]},{"nodeType":"YulAssignment","src":"4278:39:23","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:23","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:23"},"nodeType":"YulFunctionCall","src":"4294:12:23"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:23"},"nodeType":"YulFunctionCall","src":"4290:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:23"},"nodeType":"YulFunctionCall","src":"4286:31:23"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:23"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2329,"isOffset":false,"isSlot":false,"src":"4034:11:23","valueSize":1},{"declaration":2329,"isOffset":false,"isSlot":false,"src":"4053:11:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"4138:5:23","valueSize":1},{"declaration":2335,"isOffset":false,"isSlot":false,"src":"4151:5:23","valueSize":1},{"declaration":2362,"isOffset":false,"isSlot":false,"src":"4066:4:23","valueSize":1},{"declaration":2362,"isOffset":false,"isSlot":false,"src":"4158:4:23","valueSize":1},{"declaration":2362,"isOffset":false,"isSlot":false,"src":"4278:4:23","valueSize":1},{"declaration":2362,"isOffset":false,"isSlot":false,"src":"4301:4:23","valueSize":1},{"declaration":2362,"isOffset":false,"isSlot":false,"src":"4308:4:23","valueSize":1}],"id":2371,"nodeType":"InlineAssembly","src":"3960:371:23"},{"expression":{"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2372,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"4397:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"4406:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2374,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"4414:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2377,"nodeType":"ExpressionStatement","src":"4397:21:23"},{"assignments":[2379],"declarations":[{"constant":false,"id":2379,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:23","nodeType":"VariableDeclaration","scope":2443,"src":"4736:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2378,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2386,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:23","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2381,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"4759:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2383,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:23"},{"expression":{"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2387,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"4992:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2389,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"5007:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2390,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5021:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2394,"nodeType":"ExpressionStatement","src":"4992:36:23"},{"expression":{"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2395,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5061:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2397,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"5076:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2398,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5090:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2402,"nodeType":"ExpressionStatement","src":"5061:36:23"},{"expression":{"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2403,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5131:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2405,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"5146:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2406,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5160:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2410,"nodeType":"ExpressionStatement","src":"5131:36:23"},{"expression":{"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2411,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5201:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2413,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"5216:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2414,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5230:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2418,"nodeType":"ExpressionStatement","src":"5201:36:23"},{"expression":{"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2419,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5271:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2421,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"5286:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2422,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5300:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"5271:36:23"},{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2427,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5342:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2429,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"5357:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2430,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5371:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"5342:36:23"},{"expression":{"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"5812:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2436,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"5821:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2437,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"5829:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2440,"nodeType":"ExpressionStatement","src":"5812:24:23"},{"expression":{"id":2441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"5857:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2333,"id":2442,"nodeType":"Return","src":"5850:13:23"}]}]},"documentation":{"id":2323,"nodeType":"StructuredDocumentation","src":"1357:305:23","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2445,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:23","nodeType":"FunctionDefinition","parameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"x","nameLocation":"1691:1:23","nodeType":"VariableDeclaration","scope":2445,"src":"1683:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2324,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"y","nameLocation":"1702:1:23","nodeType":"VariableDeclaration","scope":2445,"src":"1694:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2329,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:23","nodeType":"VariableDeclaration","scope":2445,"src":"1705:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:23"},"returnParameters":{"id":2333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"result","nameLocation":"1757:6:23","nodeType":"VariableDeclaration","scope":2445,"src":"1749:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:23"},"scope":3097,"src":"1667:4213:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2488,"nodeType":"Block","src":"6122:189:23","statements":[{"assignments":[2461],"declarations":[{"constant":false,"id":2461,"mutability":"mutable","name":"result","nameLocation":"6140:6:23","nodeType":"VariableDeclaration","scope":2488,"src":"6132:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2467,"initialValue":{"arguments":[{"id":2463,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"6156:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2464,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"6159:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2465,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"6162:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2462,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2445,2489],"referencedDeclaration":2445,"src":"6149:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6149:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2468,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2455,"src":"6188:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2469,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"6200:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2238_$","typeString":"type(enum Math.Rounding)"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"6200:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"src":"6188:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2473,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"6222:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2474,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"6225:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2475,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"6228:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2472,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:23","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6215:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2485,"nodeType":"IfStatement","src":"6184:98:23","trueBody":{"id":2484,"nodeType":"Block","src":"6246:36:23","statements":[{"expression":{"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"6260:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2483,"nodeType":"ExpressionStatement","src":"6260:11:23"}]}},{"expression":{"id":2486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"6298:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2459,"id":2487,"nodeType":"Return","src":"6291:13:23"}]},"documentation":{"id":2446,"nodeType":"StructuredDocumentation","src":"5886:121:23","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2489,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:23","nodeType":"FunctionDefinition","parameters":{"id":2456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2448,"mutability":"mutable","name":"x","nameLocation":"6036:1:23","nodeType":"VariableDeclaration","scope":2489,"src":"6028:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2447,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"y","nameLocation":"6047:1:23","nodeType":"VariableDeclaration","scope":2489,"src":"6039:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2449,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2452,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:23","nodeType":"VariableDeclaration","scope":2489,"src":"6050:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2455,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:23","nodeType":"VariableDeclaration","scope":2489,"src":"6071:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"typeName":{"id":2454,"nodeType":"UserDefinedTypeName","pathNode":{"id":2453,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2238,"src":"6071:8:23"},"referencedDeclaration":2238,"src":"6071:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:23"},"returnParameters":{"id":2459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2489,"src":"6113:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2457,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:23"},"scope":3097,"src":"6012:299:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2600,"nodeType":"Block","src":"6587:1585:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"6601:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2503,"nodeType":"IfStatement","src":"6597:45:23","trueBody":{"id":2502,"nodeType":"Block","src":"6609:33:23","statements":[{"expression":{"hexValue":"30","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2496,"id":2501,"nodeType":"Return","src":"6623:8:23"}]}},{"assignments":[2505],"declarations":[{"constant":false,"id":2505,"mutability":"mutable","name":"result","nameLocation":"7329:6:23","nodeType":"VariableDeclaration","scope":2600,"src":"7321:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2504,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2514,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2508,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"7349:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2507,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2769,2805],"referencedDeclaration":2769,"src":"7344:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2512,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:23"},{"id":2599,"nodeType":"UncheckedBlock","src":"7758:408:23","statements":[{"expression":{"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7782:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7792:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2517,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"7801:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2518,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7805:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2521,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2525,"nodeType":"ExpressionStatement","src":"7782:35:23"},{"expression":{"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2526,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7831:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2527,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7841:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2528,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"7850:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2529,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7854:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2532,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2536,"nodeType":"ExpressionStatement","src":"7831:35:23"},{"expression":{"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7880:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7890:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2539,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"7899:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2540,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7903:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2547,"nodeType":"ExpressionStatement","src":"7880:35:23"},{"expression":{"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2548,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7929:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2549,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7939:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2550,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"7948:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2551,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7952:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2554,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2558,"nodeType":"ExpressionStatement","src":"7929:35:23"},{"expression":{"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2559,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7978:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2560,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"7988:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2561,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"7997:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8001:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2565,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2569,"nodeType":"ExpressionStatement","src":"7978:35:23"},{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2570,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8027:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2571,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8037:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2572,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"8046:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8050:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2576,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"8027:35:23"},{"expression":{"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2581,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8076:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8086:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"8095:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2584,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8099:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2591,"nodeType":"ExpressionStatement","src":"8076:35:23"},{"expression":{"arguments":[{"id":2593,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8136:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"8144:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"8148:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2592,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"8132:3:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8132:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2496,"id":2598,"nodeType":"Return","src":"8125:30:23"}]}]},"documentation":{"id":2490,"nodeType":"StructuredDocumentation","src":"6317:208:23","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2601,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:23","nodeType":"FunctionDefinition","parameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"a","nameLocation":"6552:1:23","nodeType":"VariableDeclaration","scope":2601,"src":"6544:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:23"},"returnParameters":{"id":2496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2601,"src":"6578:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2494,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:23"},"scope":3097,"src":"6530:1642:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2636,"nodeType":"Block","src":"8348:161:23","statements":[{"id":2635,"nodeType":"UncheckedBlock","src":"8358:145:23","statements":[{"assignments":[2613],"declarations":[{"constant":false,"id":2613,"mutability":"mutable","name":"result","nameLocation":"8390:6:23","nodeType":"VariableDeclaration","scope":2635,"src":"8382:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2612,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2617,"initialValue":{"arguments":[{"id":2615,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"8404:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2614,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2601,2637],"referencedDeclaration":2601,"src":"8399:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"8427:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2619,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"8437:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2620,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"8449:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2238_$","typeString":"type(enum Math.Rounding)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"8449:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"src":"8437:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"8464:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"8473:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2626,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"8482:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:23","trueExpression":{"hexValue":"31","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2611,"id":2634,"nodeType":"Return","src":"8420:72:23"}]}]},"documentation":{"id":2602,"nodeType":"StructuredDocumentation","src":"8178:89:23","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2637,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:23","nodeType":"FunctionDefinition","parameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"a","nameLocation":"8294:1:23","nodeType":"VariableDeclaration","scope":2637,"src":"8286:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2607,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:23","nodeType":"VariableDeclaration","scope":2637,"src":"8297:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"typeName":{"id":2606,"nodeType":"UserDefinedTypeName","pathNode":{"id":2605,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2238,"src":"8297:8:23"},"referencedDeclaration":2238,"src":"8297:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:23"},"returnParameters":{"id":2611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2637,"src":"8339:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2609,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:23"},"scope":3097,"src":"8272:237:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2768,"nodeType":"Block","src":"8694:922:23","statements":[{"assignments":[2646],"declarations":[{"constant":false,"id":2646,"mutability":"mutable","name":"result","nameLocation":"8712:6:23","nodeType":"VariableDeclaration","scope":2768,"src":"8704:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2645,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2648,"initialValue":{"hexValue":"30","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:23"},{"id":2765,"nodeType":"UncheckedBlock","src":"8732:855:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"8760:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2663,"nodeType":"IfStatement","src":"8756:99:23","trueBody":{"id":2662,"nodeType":"Block","src":"8778:77:23","statements":[{"expression":{"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"8796:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2657,"nodeType":"ExpressionStatement","src":"8796:13:23"},{"expression":{"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"8827:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2661,"nodeType":"ExpressionStatement","src":"8827:13:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"8872:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2678,"nodeType":"IfStatement","src":"8868:96:23","trueBody":{"id":2677,"nodeType":"Block","src":"8889:75:23","statements":[{"expression":{"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"8907:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2672,"nodeType":"ExpressionStatement","src":"8907:12:23"},{"expression":{"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"8937:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2676,"nodeType":"ExpressionStatement","src":"8937:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"8981:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2693,"nodeType":"IfStatement","src":"8977:96:23","trueBody":{"id":2692,"nodeType":"Block","src":"8998:75:23","statements":[{"expression":{"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9016:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2687,"nodeType":"ExpressionStatement","src":"9016:12:23"},{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9046:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ExpressionStatement","src":"9046:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9090:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2708,"nodeType":"IfStatement","src":"9086:96:23","trueBody":{"id":2707,"nodeType":"Block","src":"9107:75:23","statements":[{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9125:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2702,"nodeType":"ExpressionStatement","src":"9125:12:23"},{"expression":{"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9155:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2706,"nodeType":"ExpressionStatement","src":"9155:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9199:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2723,"nodeType":"IfStatement","src":"9195:93:23","trueBody":{"id":2722,"nodeType":"Block","src":"9215:73:23","statements":[{"expression":{"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9233:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2717,"nodeType":"ExpressionStatement","src":"9233:11:23"},{"expression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9262:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2721,"nodeType":"ExpressionStatement","src":"9262:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9305:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2738,"nodeType":"IfStatement","src":"9301:93:23","trueBody":{"id":2737,"nodeType":"Block","src":"9321:73:23","statements":[{"expression":{"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9339:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2732,"nodeType":"ExpressionStatement","src":"9339:11:23"},{"expression":{"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9368:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2736,"nodeType":"ExpressionStatement","src":"9368:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9411:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2753,"nodeType":"IfStatement","src":"9407:93:23","trueBody":{"id":2752,"nodeType":"Block","src":"9427:73:23","statements":[{"expression":{"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9445:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2747,"nodeType":"ExpressionStatement","src":"9445:11:23"},{"expression":{"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2748,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9474:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2751,"nodeType":"ExpressionStatement","src":"9474:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9517:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2764,"nodeType":"IfStatement","src":"9513:64:23","trueBody":{"id":2763,"nodeType":"Block","src":"9533:44:23","statements":[{"expression":{"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9551:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2762,"nodeType":"ExpressionStatement","src":"9551:11:23"}]}}]},{"expression":{"id":2766,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"9603:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2644,"id":2767,"nodeType":"Return","src":"9596:13:23"}]},"documentation":{"id":2638,"nodeType":"StructuredDocumentation","src":"8515:113:23","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2769,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:23","nodeType":"FunctionDefinition","parameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"value","nameLocation":"8655:5:23","nodeType":"VariableDeclaration","scope":2769,"src":"8647:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:23"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2769,"src":"8685:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:23"},"scope":3097,"src":"8633:983:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2804,"nodeType":"Block","src":"9849:165:23","statements":[{"id":2803,"nodeType":"UncheckedBlock","src":"9859:149:23","statements":[{"assignments":[2781],"declarations":[{"constant":false,"id":2781,"mutability":"mutable","name":"result","nameLocation":"9891:6:23","nodeType":"VariableDeclaration","scope":2803,"src":"9883:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2785,"initialValue":{"arguments":[{"id":2783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"9905:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2782,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2769,2805],"referencedDeclaration":2769,"src":"9900:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9900:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2786,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"9932:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2787,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"9942:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2788,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"9954:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2238_$","typeString":"type(enum Math.Rounding)"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"9954:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"src":"9942:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"9974:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2794,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"9983:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:23","trueExpression":{"hexValue":"31","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2800,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2779,"id":2802,"nodeType":"Return","src":"9925:72:23"}]}]},"documentation":{"id":2770,"nodeType":"StructuredDocumentation","src":"9622:142:23","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2805,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:23","nodeType":"FunctionDefinition","parameters":{"id":2776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2772,"mutability":"mutable","name":"value","nameLocation":"9791:5:23","nodeType":"VariableDeclaration","scope":2805,"src":"9783:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2771,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2775,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:23","nodeType":"VariableDeclaration","scope":2805,"src":"9798:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"typeName":{"id":2774,"nodeType":"UserDefinedTypeName","pathNode":{"id":2773,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2238,"src":"9798:8:23"},"referencedDeclaration":2238,"src":"9798:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:23"},"returnParameters":{"id":2779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2805,"src":"9840:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2777,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:23"},"scope":3097,"src":"9769:245:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2933,"nodeType":"Block","src":"10201:854:23","statements":[{"assignments":[2814],"declarations":[{"constant":false,"id":2814,"mutability":"mutable","name":"result","nameLocation":"10219:6:23","nodeType":"VariableDeclaration","scope":2933,"src":"10211:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2813,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2816,"initialValue":{"hexValue":"30","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:23"},{"id":2930,"nodeType":"UncheckedBlock","src":"10239:787:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10267:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2833,"nodeType":"IfStatement","src":"10263:103:23","trueBody":{"id":2832,"nodeType":"Block","src":"10286:80:23","statements":[{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2822,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10304:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2827,"nodeType":"ExpressionStatement","src":"10304:17:23"},{"expression":{"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2828,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10339:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2831,"nodeType":"ExpressionStatement","src":"10339:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10383:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2850,"nodeType":"IfStatement","src":"10379:103:23","trueBody":{"id":2849,"nodeType":"Block","src":"10402:80:23","statements":[{"expression":{"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10420:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2844,"nodeType":"ExpressionStatement","src":"10420:17:23"},{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10455:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2848,"nodeType":"ExpressionStatement","src":"10455:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10499:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2867,"nodeType":"IfStatement","src":"10495:103:23","trueBody":{"id":2866,"nodeType":"Block","src":"10518:80:23","statements":[{"expression":{"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10536:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2861,"nodeType":"ExpressionStatement","src":"10536:17:23"},{"expression":{"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2862,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10571:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2865,"nodeType":"ExpressionStatement","src":"10571:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2868,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10615:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2884,"nodeType":"IfStatement","src":"10611:100:23","trueBody":{"id":2883,"nodeType":"Block","src":"10633:78:23","statements":[{"expression":{"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10651:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2878,"nodeType":"ExpressionStatement","src":"10651:16:23"},{"expression":{"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2879,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10685:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2882,"nodeType":"ExpressionStatement","src":"10685:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10728:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2901,"nodeType":"IfStatement","src":"10724:100:23","trueBody":{"id":2900,"nodeType":"Block","src":"10746:78:23","statements":[{"expression":{"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10764:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2895,"nodeType":"ExpressionStatement","src":"10764:16:23"},{"expression":{"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2896,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10798:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2899,"nodeType":"ExpressionStatement","src":"10798:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2902,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10841:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:23","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2918,"nodeType":"IfStatement","src":"10837:100:23","trueBody":{"id":2917,"nodeType":"Block","src":"10859:78:23","statements":[{"expression":{"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10877:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:23","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2912,"nodeType":"ExpressionStatement","src":"10877:16:23"},{"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2913,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10911:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2916,"nodeType":"ExpressionStatement","src":"10911:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"10954:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2929,"nodeType":"IfStatement","src":"10950:66:23","trueBody":{"id":2928,"nodeType":"Block","src":"10972:44:23","statements":[{"expression":{"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2924,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10990:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2927,"nodeType":"ExpressionStatement","src":"10990:11:23"}]}}]},{"expression":{"id":2931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11042:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2812,"id":2932,"nodeType":"Return","src":"11035:13:23"}]},"documentation":{"id":2806,"nodeType":"StructuredDocumentation","src":"10020:114:23","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2934,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:23","nodeType":"FunctionDefinition","parameters":{"id":2809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"value","nameLocation":"10162:5:23","nodeType":"VariableDeclaration","scope":2934,"src":"10154:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:23"},"returnParameters":{"id":2812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2934,"src":"10192:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:23"},"scope":3097,"src":"10139:916:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2969,"nodeType":"Block","src":"11290:167:23","statements":[{"id":2968,"nodeType":"UncheckedBlock","src":"11300:151:23","statements":[{"assignments":[2946],"declarations":[{"constant":false,"id":2946,"mutability":"mutable","name":"result","nameLocation":"11332:6:23","nodeType":"VariableDeclaration","scope":2968,"src":"11324:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2950,"initialValue":{"arguments":[{"id":2948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"11347:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2947,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2934,2970],"referencedDeclaration":2934,"src":"11341:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11341:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"11374:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2952,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"11384:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2953,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"11396:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2238_$","typeString":"type(enum Math.Rounding)"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"11396:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"src":"11384:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"11417:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2959,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"11426:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:23","trueExpression":{"hexValue":"31","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2944,"id":2967,"nodeType":"Return","src":"11367:73:23"}]}]},"documentation":{"id":2935,"nodeType":"StructuredDocumentation","src":"11061:143:23","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2970,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:23","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"value","nameLocation":"11232:5:23","nodeType":"VariableDeclaration","scope":2970,"src":"11224:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:23","nodeType":"VariableDeclaration","scope":2970,"src":"11239:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"typeName":{"id":2939,"nodeType":"UserDefinedTypeName","pathNode":{"id":2938,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2238,"src":"11239:8:23"},"referencedDeclaration":2238,"src":"11239:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:23"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2970,"src":"11281:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:23"},"scope":3097,"src":"11209:248:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3056,"nodeType":"Block","src":"11771:600:23","statements":[{"assignments":[2979],"declarations":[{"constant":false,"id":2979,"mutability":"mutable","name":"result","nameLocation":"11789:6:23","nodeType":"VariableDeclaration","scope":3056,"src":"11781:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2978,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2981,"initialValue":{"hexValue":"30","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:23"},{"id":3053,"nodeType":"UncheckedBlock","src":"11809:533:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"11837:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2996,"nodeType":"IfStatement","src":"11833:98:23","trueBody":{"id":2995,"nodeType":"Block","src":"11855:76:23","statements":[{"expression":{"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"11873:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2990,"nodeType":"ExpressionStatement","src":"11873:13:23"},{"expression":{"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"11904:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2994,"nodeType":"ExpressionStatement","src":"11904:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"11948:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3011,"nodeType":"IfStatement","src":"11944:95:23","trueBody":{"id":3010,"nodeType":"Block","src":"11965:74:23","statements":[{"expression":{"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"11983:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3005,"nodeType":"ExpressionStatement","src":"11983:12:23"},{"expression":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"12013:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3009,"nodeType":"ExpressionStatement","src":"12013:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"12056:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3026,"nodeType":"IfStatement","src":"12052:95:23","trueBody":{"id":3025,"nodeType":"Block","src":"12073:74:23","statements":[{"expression":{"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"12091:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3020,"nodeType":"ExpressionStatement","src":"12091:12:23"},{"expression":{"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3021,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"12121:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3024,"nodeType":"ExpressionStatement","src":"12121:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"12164:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3041,"nodeType":"IfStatement","src":"12160:95:23","trueBody":{"id":3040,"nodeType":"Block","src":"12181:74:23","statements":[{"expression":{"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"12199:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3035,"nodeType":"ExpressionStatement","src":"12199:12:23"},{"expression":{"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3036,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"12229:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3039,"nodeType":"ExpressionStatement","src":"12229:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"12272:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3052,"nodeType":"IfStatement","src":"12268:64:23","trueBody":{"id":3051,"nodeType":"Block","src":"12288:44:23","statements":[{"expression":{"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"12306:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3050,"nodeType":"ExpressionStatement","src":"12306:11:23"}]}}]},{"expression":{"id":3054,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"12358:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2977,"id":3055,"nodeType":"Return","src":"12351:13:23"}]},"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"11463:240:23","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3057,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:23","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"value","nameLocation":"11732:5:23","nodeType":"VariableDeclaration","scope":3057,"src":"11724:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:23"},"returnParameters":{"id":2977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3057,"src":"11762:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:23"},"scope":3097,"src":"11708:663:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3095,"nodeType":"Block","src":"12608:174:23","statements":[{"id":3094,"nodeType":"UncheckedBlock","src":"12618:158:23","statements":[{"assignments":[3069],"declarations":[{"constant":false,"id":3069,"mutability":"mutable","name":"result","nameLocation":"12650:6:23","nodeType":"VariableDeclaration","scope":3094,"src":"12642:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3073,"initialValue":{"arguments":[{"id":3071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"12666:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3070,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3057,3096],"referencedDeclaration":3057,"src":"12659:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12659:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3074,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"12693:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"12703:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3076,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"12715:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2238_$","typeString":"type(enum Math.Rounding)"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"12715:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"src":"12703:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3080,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"12736:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:23","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"12751:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:23","trueExpression":{"hexValue":"31","id":3088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3067,"id":3093,"nodeType":"Return","src":"12686:79:23"}]}]},"documentation":{"id":3058,"nodeType":"StructuredDocumentation","src":"12377:144:23","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3096,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:23","nodeType":"FunctionDefinition","parameters":{"id":3064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"value","nameLocation":"12550:5:23","nodeType":"VariableDeclaration","scope":3096,"src":"12542:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3063,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:23","nodeType":"VariableDeclaration","scope":3096,"src":"12557:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"},"typeName":{"id":3062,"nodeType":"UserDefinedTypeName","pathNode":{"id":3061,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2238,"src":"12557:8:23"},"referencedDeclaration":2238,"src":"12557:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2238","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:23"},"returnParameters":{"id":3067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3096,"src":"12599:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3065,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:23"},"scope":3097,"src":"12526:256:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3098,"src":"202:12582:23","usedErrors":[]}],"src":"103:12682:23"},"id":23},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3202]},"id":3203,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3099,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3100,"nodeType":"StructuredDocumentation","src":"134:80:24","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3202,"linearizedBaseContracts":[3202],"name":"SignedMath","nameLocation":"223:10:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":3117,"nodeType":"Block","src":"375:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"392:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3111,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"396:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3114,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"404:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:24","trueExpression":{"id":3113,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"400:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3109,"id":3116,"nodeType":"Return","src":"385:20:24"}]},"documentation":{"id":3101,"nodeType":"StructuredDocumentation","src":"240:66:24","text":" @dev Returns the largest of two signed numbers."},"id":3118,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:24","nodeType":"FunctionDefinition","parameters":{"id":3106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3103,"mutability":"mutable","name":"a","nameLocation":"331:1:24","nodeType":"VariableDeclaration","scope":3118,"src":"324:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3102,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3105,"mutability":"mutable","name":"b","nameLocation":"341:1:24","nodeType":"VariableDeclaration","scope":3118,"src":"334:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3104,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:24"},"returnParameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3118,"src":"367:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3107,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:24"},"scope":3202,"src":"311:101:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3135,"nodeType":"Block","src":"554:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"571:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3129,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"575:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3132,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"583:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:24","trueExpression":{"id":3131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"579:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3127,"id":3134,"nodeType":"Return","src":"564:20:24"}]},"documentation":{"id":3119,"nodeType":"StructuredDocumentation","src":"418:67:24","text":" @dev Returns the smallest of two signed numbers."},"id":3136,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:24","nodeType":"FunctionDefinition","parameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"a","nameLocation":"510:1:24","nodeType":"VariableDeclaration","scope":3136,"src":"503:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3120,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3123,"mutability":"mutable","name":"b","nameLocation":"520:1:24","nodeType":"VariableDeclaration","scope":3136,"src":"513:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3122,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:24"},"returnParameters":{"id":3127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3136,"src":"546:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3125,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:24"},"scope":3202,"src":"490:101:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3179,"nodeType":"Block","src":"796:162:24","statements":[{"assignments":[3147],"declarations":[{"constant":false,"id":3147,"mutability":"mutable","name":"x","nameLocation":"865:1:24","nodeType":"VariableDeclaration","scope":3179,"src":"858:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3146,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3160,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3148,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"870:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3149,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"874:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3151,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3152,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"881:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3153,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"885:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3158,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:24"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3161,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"910:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3166,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"930:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3164,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:24","typeDescriptions":{}}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"922:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:24","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3162,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:24","typeDescriptions":{}}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3171,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"944:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3172,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"948:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3145,"id":3178,"nodeType":"Return","src":"903:48:24"}]},"documentation":{"id":3137,"nodeType":"StructuredDocumentation","src":"597:126:24","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:24","nodeType":"FunctionDefinition","parameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3139,"mutability":"mutable","name":"a","nameLocation":"752:1:24","nodeType":"VariableDeclaration","scope":3180,"src":"745:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3138,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3141,"mutability":"mutable","name":"b","nameLocation":"762:1:24","nodeType":"VariableDeclaration","scope":3180,"src":"755:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3140,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:24"},"returnParameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"788:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3143,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:24"},"scope":3202,"src":"728:230:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3200,"nodeType":"Block","src":"1102:158:24","statements":[{"id":3199,"nodeType":"UncheckedBlock","src":"1112:142:24","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3190,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"1227:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:24","subExpression":{"id":3194,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"1241:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:24","trueExpression":{"id":3193,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"1236:1:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:24","typeDescriptions":{}}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1219:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3187,"id":3198,"nodeType":"Return","src":"1212:31:24"}]}]},"documentation":{"id":3181,"nodeType":"StructuredDocumentation","src":"964:78:24","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3201,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:24","nodeType":"FunctionDefinition","parameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"n","nameLocation":"1067:1:24","nodeType":"VariableDeclaration","scope":3201,"src":"1060:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3182,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:24"},"returnParameters":{"id":3187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"1093:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:24"},"scope":3202,"src":"1047:213:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3203,"src":"215:1047:24","usedErrors":[]}],"src":"109:1154:24"},"id":24},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[3815]},"id":3816,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3204,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":3205,"nodeType":"StructuredDocumentation","src":"230:1098:25","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":3815,"linearizedBaseContracts":[3815],"name":"EnumerableSet","nameLocation":"1337:13:25","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":3213,"members":[{"constant":false,"id":3208,"mutability":"mutable","name":"_values","nameLocation":"1861:7:25","nodeType":"VariableDeclaration","scope":3213,"src":"1851:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1851:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3207,"nodeType":"ArrayTypeName","src":"1851:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3212,"mutability":"mutable","name":"_indexes","nameLocation":"2029:8:25","nodeType":"VariableDeclaration","scope":3213,"src":"2001:36:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":3211,"keyType":{"id":3209,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2001:27:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"2020:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1804:3:25","nodeType":"StructDefinition","scope":3815,"src":"1797:247:25","visibility":"public"},{"body":{"id":3254,"nodeType":"Block","src":"2283:335:25","statements":[{"condition":{"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2297:22:25","subExpression":{"arguments":[{"id":3225,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"2308:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":3226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"2313:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3224,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"2298:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2298:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3252,"nodeType":"Block","src":"2575:37:25","statements":[{"expression":{"hexValue":"66616c7365","id":3250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2596:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3223,"id":3251,"nodeType":"Return","src":"2589:12:25"}]},"id":3253,"nodeType":"IfStatement","src":"2293:319:25","trueBody":{"id":3249,"nodeType":"Block","src":"2321:248:25","statements":[{"expression":{"arguments":[{"id":3234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"2352:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3229,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"2335:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3232,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"2335:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2335:16:25","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2335:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3236,"nodeType":"ExpressionStatement","src":"2335:23:25"},{"expression":{"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3237,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"2493:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"2493:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3241,"indexExpression":{"id":3239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"2506:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2493:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3242,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"2515:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"2515:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2515:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2493:40:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3246,"nodeType":"ExpressionStatement","src":"2493:40:25"},{"expression":{"hexValue":"74727565","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2554:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3223,"id":3248,"nodeType":"Return","src":"2547:11:25"}]}}]},"documentation":{"id":3214,"nodeType":"StructuredDocumentation","src":"2050:159:25","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3255,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2223:4:25","nodeType":"FunctionDefinition","parameters":{"id":3220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3217,"mutability":"mutable","name":"set","nameLocation":"2240:3:25","nodeType":"VariableDeclaration","scope":3255,"src":"2228:15:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3216,"nodeType":"UserDefinedTypeName","pathNode":{"id":3215,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"2228:3:25"},"referencedDeclaration":3213,"src":"2228:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3219,"mutability":"mutable","name":"value","nameLocation":"2253:5:25","nodeType":"VariableDeclaration","scope":3255,"src":"2245:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2245:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2227:32:25"},"returnParameters":{"id":3223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3255,"src":"2277:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3221,"name":"bool","nodeType":"ElementaryTypeName","src":"2277:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2276:6:25"},"scope":3815,"src":"2214:404:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3338,"nodeType":"Block","src":"2858:1316:25","statements":[{"assignments":[3267],"declarations":[{"constant":false,"id":3267,"mutability":"mutable","name":"valueIndex","nameLocation":"2976:10:25","nodeType":"VariableDeclaration","scope":3338,"src":"2968:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3272,"initialValue":{"baseExpression":{"expression":{"id":3268,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"2989:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"2989:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3271,"indexExpression":{"id":3270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"3002:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2989:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2968:40:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"3023:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3037:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3023:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3336,"nodeType":"Block","src":"4131:37:25","statements":[{"expression":{"hexValue":"66616c7365","id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4152:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3265,"id":3335,"nodeType":"Return","src":"4145:12:25"}]},"id":3337,"nodeType":"IfStatement","src":"3019:1149:25","trueBody":{"id":3333,"nodeType":"Block","src":"3040:1085:25","statements":[{"assignments":[3277],"declarations":[{"constant":false,"id":3277,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3400:13:25","nodeType":"VariableDeclaration","scope":3333,"src":"3392:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint256","nodeType":"ElementaryTypeName","src":"3392:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3281,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3278,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"3416:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3429:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3416:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3392:38:25"},{"assignments":[3283],"declarations":[{"constant":false,"id":3283,"mutability":"mutable","name":"lastIndex","nameLocation":"3452:9:25","nodeType":"VariableDeclaration","scope":3333,"src":"3444:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3282,"name":"uint256","nodeType":"ElementaryTypeName","src":"3444:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3289,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3284,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3464:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"3464:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3464:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3485:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3464:22:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3444:42:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3290,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3505:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3291,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3518:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3505:26:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3317,"nodeType":"IfStatement","src":"3501:398:25","trueBody":{"id":3316,"nodeType":"Block","src":"3533:366:25","statements":[{"assignments":[3294],"declarations":[{"constant":false,"id":3294,"mutability":"mutable","name":"lastValue","nameLocation":"3559:9:25","nodeType":"VariableDeclaration","scope":3316,"src":"3551:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3551:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3299,"initialValue":{"baseExpression":{"expression":{"id":3295,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3571:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"3571:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3298,"indexExpression":{"id":3297,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3583:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3571:22:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3551:42:25"},{"expression":{"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3300,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3693:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"3693:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3304,"indexExpression":{"id":3302,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3705:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3693:26:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3305,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3722:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3693:38:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3307,"nodeType":"ExpressionStatement","src":"3693:38:25"},{"expression":{"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3308,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3805:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"3805:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3312,"indexExpression":{"id":3310,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3818:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3805:23:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3313,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"3831:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3805:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3315,"nodeType":"ExpressionStatement","src":"3805:36:25"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3318,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3977:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3321,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"3977:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pop","nodeType":"MemberAccess","src":"3977:15:25","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3977:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3324,"nodeType":"ExpressionStatement","src":"3977:17:25"},{"expression":{"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4062:26:25","subExpression":{"baseExpression":{"expression":{"id":3325,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"4069:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3326,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"4069:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3328,"indexExpression":{"id":3327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"4082:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4069:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3330,"nodeType":"ExpressionStatement","src":"4062:26:25"},{"expression":{"hexValue":"74727565","id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4110:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3265,"id":3332,"nodeType":"Return","src":"4103:11:25"}]}}]},"documentation":{"id":3256,"nodeType":"StructuredDocumentation","src":"2624:157:25","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3339,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2795:7:25","nodeType":"FunctionDefinition","parameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3259,"mutability":"mutable","name":"set","nameLocation":"2815:3:25","nodeType":"VariableDeclaration","scope":3339,"src":"2803:15:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3258,"nodeType":"UserDefinedTypeName","pathNode":{"id":3257,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"2803:3:25"},"referencedDeclaration":3213,"src":"2803:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3261,"mutability":"mutable","name":"value","nameLocation":"2828:5:25","nodeType":"VariableDeclaration","scope":3339,"src":"2820:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2820:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2802:32:25"},"returnParameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3339,"src":"2852:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3263,"name":"bool","nodeType":"ElementaryTypeName","src":"2852:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2851:6:25"},"scope":3815,"src":"2786:1388:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3357,"nodeType":"Block","src":"4334:48:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":3350,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"4351:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3351,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":3212,"src":"4351:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3353,"indexExpression":{"id":3352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"4364:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4351:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4374:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4351:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3349,"id":3356,"nodeType":"Return","src":"4344:31:25"}]},"documentation":{"id":3340,"nodeType":"StructuredDocumentation","src":"4180:70:25","text":" @dev Returns true if the value is in the set. O(1)."},"id":3358,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4264:9:25","nodeType":"FunctionDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3343,"mutability":"mutable","name":"set","nameLocation":"4286:3:25","nodeType":"VariableDeclaration","scope":3358,"src":"4274:15:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3342,"nodeType":"UserDefinedTypeName","pathNode":{"id":3341,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"4274:3:25"},"referencedDeclaration":3213,"src":"4274:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3345,"mutability":"mutable","name":"value","nameLocation":"4299:5:25","nodeType":"VariableDeclaration","scope":3358,"src":"4291:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4291:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4273:32:25"},"returnParameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3358,"src":"4328:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3347,"name":"bool","nodeType":"ElementaryTypeName","src":"4328:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4327:6:25"},"scope":3815,"src":"4255:127:25","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3371,"nodeType":"Block","src":"4528:42:25","statements":[{"expression":{"expression":{"expression":{"id":3367,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"4545:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"4545:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4545:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3366,"id":3370,"nodeType":"Return","src":"4538:25:25"}]},"documentation":{"id":3359,"nodeType":"StructuredDocumentation","src":"4388:70:25","text":" @dev Returns the number of values on the set. O(1)."},"id":3372,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4472:7:25","nodeType":"FunctionDefinition","parameters":{"id":3363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3362,"mutability":"mutable","name":"set","nameLocation":"4492:3:25","nodeType":"VariableDeclaration","scope":3372,"src":"4480:15:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3361,"nodeType":"UserDefinedTypeName","pathNode":{"id":3360,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"4480:3:25"},"referencedDeclaration":3213,"src":"4480:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4479:17:25"},"returnParameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3372,"src":"4519:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"4519:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4518:9:25"},"scope":3815,"src":"4463:107:25","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3388,"nodeType":"Block","src":"4988:42:25","statements":[{"expression":{"baseExpression":{"expression":{"id":3383,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"5005:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"5005:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3386,"indexExpression":{"id":3385,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"5017:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5005:18:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3382,"id":3387,"nodeType":"Return","src":"4998:25:25"}]},"documentation":{"id":3373,"nodeType":"StructuredDocumentation","src":"4576:331:25","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3389,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4921:3:25","nodeType":"FunctionDefinition","parameters":{"id":3379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"set","nameLocation":"4937:3:25","nodeType":"VariableDeclaration","scope":3389,"src":"4925:15:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3375,"nodeType":"UserDefinedTypeName","pathNode":{"id":3374,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"4925:3:25"},"referencedDeclaration":3213,"src":"4925:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3378,"mutability":"mutable","name":"index","nameLocation":"4950:5:25","nodeType":"VariableDeclaration","scope":3389,"src":"4942:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3377,"name":"uint256","nodeType":"ElementaryTypeName","src":"4942:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4924:32:25"},"returnParameters":{"id":3382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3389,"src":"4979:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4979:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4978:9:25"},"scope":3815,"src":"4912:118:25","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3402,"nodeType":"Block","src":"5644:35:25","statements":[{"expression":{"expression":{"id":3399,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"5661:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3208,"src":"5661:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":3398,"id":3401,"nodeType":"Return","src":"5654:18:25"}]},"documentation":{"id":3390,"nodeType":"StructuredDocumentation","src":"5036:529:25","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3403,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5579:7:25","nodeType":"FunctionDefinition","parameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3393,"mutability":"mutable","name":"set","nameLocation":"5599:3:25","nodeType":"VariableDeclaration","scope":3403,"src":"5587:15:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3392,"nodeType":"UserDefinedTypeName","pathNode":{"id":3391,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"5587:3:25"},"referencedDeclaration":3213,"src":"5587:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5586:17:25"},"returnParameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3403,"src":"5626:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5626:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3396,"nodeType":"ArrayTypeName","src":"5626:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5625:18:25"},"scope":3815,"src":"5570:109:25","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":3407,"members":[{"constant":false,"id":3406,"mutability":"mutable","name":"_inner","nameLocation":"5736:6:25","nodeType":"VariableDeclaration","scope":3407,"src":"5732:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3405,"nodeType":"UserDefinedTypeName","pathNode":{"id":3404,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"5732:3:25"},"referencedDeclaration":3213,"src":"5732:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5711:10:25","nodeType":"StructDefinition","scope":3815,"src":"5704:45:25","visibility":"public"},{"body":{"id":3424,"nodeType":"Block","src":"5995:47:25","statements":[{"expression":{"arguments":[{"expression":{"id":3419,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"6017:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"6017:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3413,"src":"6029:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3418,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"6012:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6012:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3417,"id":3423,"nodeType":"Return","src":"6005:30:25"}]},"documentation":{"id":3408,"nodeType":"StructuredDocumentation","src":"5755:159:25","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3425,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5928:3:25","nodeType":"FunctionDefinition","parameters":{"id":3414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3411,"mutability":"mutable","name":"set","nameLocation":"5951:3:25","nodeType":"VariableDeclaration","scope":3425,"src":"5932:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3410,"nodeType":"UserDefinedTypeName","pathNode":{"id":3409,"name":"Bytes32Set","nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"5932:10:25"},"referencedDeclaration":3407,"src":"5932:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3413,"mutability":"mutable","name":"value","nameLocation":"5964:5:25","nodeType":"VariableDeclaration","scope":3425,"src":"5956:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5956:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5931:39:25"},"returnParameters":{"id":3417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3425,"src":"5989:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3415,"name":"bool","nodeType":"ElementaryTypeName","src":"5989:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5988:6:25"},"scope":3815,"src":"5919:123:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3442,"nodeType":"Block","src":"6289:50:25","statements":[{"expression":{"arguments":[{"expression":{"id":3437,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"6314:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"6314:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"6326:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3436,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"6306:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6306:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3435,"id":3441,"nodeType":"Return","src":"6299:33:25"}]},"documentation":{"id":3426,"nodeType":"StructuredDocumentation","src":"6048:157:25","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3443,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6219:6:25","nodeType":"FunctionDefinition","parameters":{"id":3432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"set","nameLocation":"6245:3:25","nodeType":"VariableDeclaration","scope":3443,"src":"6226:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3428,"nodeType":"UserDefinedTypeName","pathNode":{"id":3427,"name":"Bytes32Set","nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"6226:10:25"},"referencedDeclaration":3407,"src":"6226:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3431,"mutability":"mutable","name":"value","nameLocation":"6258:5:25","nodeType":"VariableDeclaration","scope":3443,"src":"6250:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3430,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6225:39:25"},"returnParameters":{"id":3435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3443,"src":"6283:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3433,"name":"bool","nodeType":"ElementaryTypeName","src":"6283:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6282:6:25"},"scope":3815,"src":"6210:129:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3460,"nodeType":"Block","src":"6506:52:25","statements":[{"expression":{"arguments":[{"expression":{"id":3455,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"6533:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3456,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"6533:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"6545:5:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3454,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"6523:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6523:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3453,"id":3459,"nodeType":"Return","src":"6516:35:25"}]},"documentation":{"id":3444,"nodeType":"StructuredDocumentation","src":"6345:70:25","text":" @dev Returns true if the value is in the set. O(1)."},"id":3461,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6429:8:25","nodeType":"FunctionDefinition","parameters":{"id":3450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"set","nameLocation":"6457:3:25","nodeType":"VariableDeclaration","scope":3461,"src":"6438:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3446,"nodeType":"UserDefinedTypeName","pathNode":{"id":3445,"name":"Bytes32Set","nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"6438:10:25"},"referencedDeclaration":3407,"src":"6438:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3449,"mutability":"mutable","name":"value","nameLocation":"6470:5:25","nodeType":"VariableDeclaration","scope":3461,"src":"6462:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6462:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6437:39:25"},"returnParameters":{"id":3453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3461,"src":"6500:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3451,"name":"bool","nodeType":"ElementaryTypeName","src":"6500:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6499:6:25"},"scope":3815,"src":"6420:138:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3475,"nodeType":"Block","src":"6711:43:25","statements":[{"expression":{"arguments":[{"expression":{"id":3471,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"6736:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3472,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"6736:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3470,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"6728:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6728:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3469,"id":3474,"nodeType":"Return","src":"6721:26:25"}]},"documentation":{"id":3462,"nodeType":"StructuredDocumentation","src":"6564:70:25","text":" @dev Returns the number of values in the set. O(1)."},"id":3476,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6648:6:25","nodeType":"FunctionDefinition","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3465,"mutability":"mutable","name":"set","nameLocation":"6674:3:25","nodeType":"VariableDeclaration","scope":3476,"src":"6655:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3464,"nodeType":"UserDefinedTypeName","pathNode":{"id":3463,"name":"Bytes32Set","nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"6655:10:25"},"referencedDeclaration":3407,"src":"6655:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6654:24:25"},"returnParameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3476,"src":"6702:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"6702:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6701:9:25"},"scope":3815,"src":"6639:115:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3493,"nodeType":"Block","src":"7179:46:25","statements":[{"expression":{"arguments":[{"expression":{"id":3488,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"7200:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3489,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"7200:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3490,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"7212:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3487,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"7196:3:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7196:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3486,"id":3492,"nodeType":"Return","src":"7189:29:25"}]},"documentation":{"id":3477,"nodeType":"StructuredDocumentation","src":"6760:331:25","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3494,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7105:2:25","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"set","nameLocation":"7127:3:25","nodeType":"VariableDeclaration","scope":3494,"src":"7108:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3479,"nodeType":"UserDefinedTypeName","pathNode":{"id":3478,"name":"Bytes32Set","nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"7108:10:25"},"referencedDeclaration":3407,"src":"7108:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"index","nameLocation":"7140:5:25","nodeType":"VariableDeclaration","scope":3494,"src":"7132:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3481,"name":"uint256","nodeType":"ElementaryTypeName","src":"7132:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:39:25"},"returnParameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3494,"src":"7170:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7170:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7169:9:25"},"scope":3815,"src":"7096:129:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3523,"nodeType":"Block","src":"7846:219:25","statements":[{"assignments":[3508],"declarations":[{"constant":false,"id":3508,"mutability":"mutable","name":"store","nameLocation":"7873:5:25","nodeType":"VariableDeclaration","scope":3523,"src":"7856:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7856:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3507,"nodeType":"ArrayTypeName","src":"7856:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3513,"initialValue":{"arguments":[{"expression":{"id":3510,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"7889:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3511,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"7889:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3509,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"7881:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7881:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7856:44:25"},{"assignments":[3518],"declarations":[{"constant":false,"id":3518,"mutability":"mutable","name":"result","nameLocation":"7927:6:25","nodeType":"VariableDeclaration","scope":3523,"src":"7910:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7910:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3517,"nodeType":"ArrayTypeName","src":"7910:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3519,"nodeType":"VariableDeclarationStatement","src":"7910:23:25"},{"AST":{"nodeType":"YulBlock","src":"7996:39:25","statements":[{"nodeType":"YulAssignment","src":"8010:15:25","value":{"name":"store","nodeType":"YulIdentifier","src":"8020:5:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8010:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3518,"isOffset":false,"isSlot":false,"src":"8010:6:25","valueSize":1},{"declaration":3508,"isOffset":false,"isSlot":false,"src":"8020:5:25","valueSize":1}],"id":3520,"nodeType":"InlineAssembly","src":"7987:48:25"},{"expression":{"id":3521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"8052:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":3503,"id":3522,"nodeType":"Return","src":"8045:13:25"}]},"documentation":{"id":3495,"nodeType":"StructuredDocumentation","src":"7231:529:25","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3524,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7774:6:25","nodeType":"FunctionDefinition","parameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"set","nameLocation":"7800:3:25","nodeType":"VariableDeclaration","scope":3524,"src":"7781:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3497,"nodeType":"UserDefinedTypeName","pathNode":{"id":3496,"name":"Bytes32Set","nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"7781:10:25"},"referencedDeclaration":3407,"src":"7781:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3407_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7780:24:25"},"returnParameters":{"id":3503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3524,"src":"7828:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7828:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3501,"nodeType":"ArrayTypeName","src":"7828:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7827:18:25"},"scope":3815,"src":"7765:300:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":3528,"members":[{"constant":false,"id":3527,"mutability":"mutable","name":"_inner","nameLocation":"8122:6:25","nodeType":"VariableDeclaration","scope":3528,"src":"8118:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3526,"nodeType":"UserDefinedTypeName","pathNode":{"id":3525,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"8118:3:25"},"referencedDeclaration":3213,"src":"8118:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8097:10:25","nodeType":"StructDefinition","scope":3815,"src":"8090:45:25","visibility":"public"},{"body":{"id":3554,"nodeType":"Block","src":"8381:74:25","statements":[{"expression":{"arguments":[{"expression":{"id":3540,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"8403:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"8403:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"8439:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8431:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3546,"name":"uint160","nodeType":"ElementaryTypeName","src":"8431:7:25","typeDescriptions":{}}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8431:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3544,"name":"uint256","nodeType":"ElementaryTypeName","src":"8423:7:25","typeDescriptions":{}}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8423:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8415:7:25","typeDescriptions":{}}},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8415:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3539,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"8398:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8398:50:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3538,"id":3553,"nodeType":"Return","src":"8391:57:25"}]},"documentation":{"id":3529,"nodeType":"StructuredDocumentation","src":"8141:159:25","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3555,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8314:3:25","nodeType":"FunctionDefinition","parameters":{"id":3535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"set","nameLocation":"8337:3:25","nodeType":"VariableDeclaration","scope":3555,"src":"8318:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3531,"nodeType":"UserDefinedTypeName","pathNode":{"id":3530,"name":"AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"8318:10:25"},"referencedDeclaration":3528,"src":"8318:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3534,"mutability":"mutable","name":"value","nameLocation":"8350:5:25","nodeType":"VariableDeclaration","scope":3555,"src":"8342:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3533,"name":"address","nodeType":"ElementaryTypeName","src":"8342:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8317:39:25"},"returnParameters":{"id":3538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3555,"src":"8375:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3536,"name":"bool","nodeType":"ElementaryTypeName","src":"8375:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8374:6:25"},"scope":3815,"src":"8305:150:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3581,"nodeType":"Block","src":"8702:77:25","statements":[{"expression":{"arguments":[{"expression":{"id":3567,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8727:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3568,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"8727:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"8763:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8755:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3573,"name":"uint160","nodeType":"ElementaryTypeName","src":"8755:7:25","typeDescriptions":{}}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8755:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3571,"name":"uint256","nodeType":"ElementaryTypeName","src":"8747:7:25","typeDescriptions":{}}},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8747:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8739:7:25","typeDescriptions":{}}},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8739:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3566,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"8719:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8719:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3565,"id":3580,"nodeType":"Return","src":"8712:60:25"}]},"documentation":{"id":3556,"nodeType":"StructuredDocumentation","src":"8461:157:25","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3582,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8632:6:25","nodeType":"FunctionDefinition","parameters":{"id":3562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"set","nameLocation":"8658:3:25","nodeType":"VariableDeclaration","scope":3582,"src":"8639:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3558,"nodeType":"UserDefinedTypeName","pathNode":{"id":3557,"name":"AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"8639:10:25"},"referencedDeclaration":3528,"src":"8639:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3561,"mutability":"mutable","name":"value","nameLocation":"8671:5:25","nodeType":"VariableDeclaration","scope":3582,"src":"8663:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"8663:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8638:39:25"},"returnParameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3582,"src":"8696:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3563,"name":"bool","nodeType":"ElementaryTypeName","src":"8696:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8695:6:25"},"scope":3815,"src":"8623:156:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3608,"nodeType":"Block","src":"8946:79:25","statements":[{"expression":{"arguments":[{"expression":{"id":3594,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"8973:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"8973:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"9009:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9001:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3600,"name":"uint160","nodeType":"ElementaryTypeName","src":"9001:7:25","typeDescriptions":{}}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9001:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3598,"name":"uint256","nodeType":"ElementaryTypeName","src":"8993:7:25","typeDescriptions":{}}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8993:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8985:7:25","typeDescriptions":{}}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8985:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3593,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"8963:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8963:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3592,"id":3607,"nodeType":"Return","src":"8956:62:25"}]},"documentation":{"id":3583,"nodeType":"StructuredDocumentation","src":"8785:70:25","text":" @dev Returns true if the value is in the set. O(1)."},"id":3609,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8869:8:25","nodeType":"FunctionDefinition","parameters":{"id":3589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3586,"mutability":"mutable","name":"set","nameLocation":"8897:3:25","nodeType":"VariableDeclaration","scope":3609,"src":"8878:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3585,"nodeType":"UserDefinedTypeName","pathNode":{"id":3584,"name":"AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"8878:10:25"},"referencedDeclaration":3528,"src":"8878:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3588,"mutability":"mutable","name":"value","nameLocation":"8910:5:25","nodeType":"VariableDeclaration","scope":3609,"src":"8902:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"8902:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8877:39:25"},"returnParameters":{"id":3592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3609,"src":"8940:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3590,"name":"bool","nodeType":"ElementaryTypeName","src":"8940:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8939:6:25"},"scope":3815,"src":"8860:165:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3623,"nodeType":"Block","src":"9178:43:25","statements":[{"expression":{"arguments":[{"expression":{"id":3619,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"9203:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"9203:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3618,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"9195:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9195:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3617,"id":3622,"nodeType":"Return","src":"9188:26:25"}]},"documentation":{"id":3610,"nodeType":"StructuredDocumentation","src":"9031:70:25","text":" @dev Returns the number of values in the set. O(1)."},"id":3624,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9115:6:25","nodeType":"FunctionDefinition","parameters":{"id":3614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3613,"mutability":"mutable","name":"set","nameLocation":"9141:3:25","nodeType":"VariableDeclaration","scope":3624,"src":"9122:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3612,"nodeType":"UserDefinedTypeName","pathNode":{"id":3611,"name":"AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"9122:10:25"},"referencedDeclaration":3528,"src":"9122:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9121:24:25"},"returnParameters":{"id":3617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3624,"src":"9169:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9168:9:25"},"scope":3815,"src":"9106:115:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3650,"nodeType":"Block","src":"9646:73:25","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3642,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"9691:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3643,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"9691:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3644,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"9703:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3641,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"9687:3:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9687:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9679:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"9679:7:25","typeDescriptions":{}}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9679:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3637,"name":"uint160","nodeType":"ElementaryTypeName","src":"9671:7:25","typeDescriptions":{}}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9671:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3635,"name":"address","nodeType":"ElementaryTypeName","src":"9663:7:25","typeDescriptions":{}}},"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9663:49:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3634,"id":3649,"nodeType":"Return","src":"9656:56:25"}]},"documentation":{"id":3625,"nodeType":"StructuredDocumentation","src":"9227:331:25","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3651,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9572:2:25","nodeType":"FunctionDefinition","parameters":{"id":3631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3628,"mutability":"mutable","name":"set","nameLocation":"9594:3:25","nodeType":"VariableDeclaration","scope":3651,"src":"9575:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3627,"nodeType":"UserDefinedTypeName","pathNode":{"id":3626,"name":"AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"9575:10:25"},"referencedDeclaration":3528,"src":"9575:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3630,"mutability":"mutable","name":"index","nameLocation":"9607:5:25","nodeType":"VariableDeclaration","scope":3651,"src":"9599:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3629,"name":"uint256","nodeType":"ElementaryTypeName","src":"9599:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9574:39:25"},"returnParameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3651,"src":"9637:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3632,"name":"address","nodeType":"ElementaryTypeName","src":"9637:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9636:9:25"},"scope":3815,"src":"9563:156:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3680,"nodeType":"Block","src":"10340:219:25","statements":[{"assignments":[3665],"declarations":[{"constant":false,"id":3665,"mutability":"mutable","name":"store","nameLocation":"10367:5:25","nodeType":"VariableDeclaration","scope":3680,"src":"10350:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10350:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3664,"nodeType":"ArrayTypeName","src":"10350:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3670,"initialValue":{"arguments":[{"expression":{"id":3667,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"10383:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"10383:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3666,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"10375:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10375:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10350:44:25"},{"assignments":[3675],"declarations":[{"constant":false,"id":3675,"mutability":"mutable","name":"result","nameLocation":"10421:6:25","nodeType":"VariableDeclaration","scope":3680,"src":"10404:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3673,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3674,"nodeType":"ArrayTypeName","src":"10404:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3676,"nodeType":"VariableDeclarationStatement","src":"10404:23:25"},{"AST":{"nodeType":"YulBlock","src":"10490:39:25","statements":[{"nodeType":"YulAssignment","src":"10504:15:25","value":{"name":"store","nodeType":"YulIdentifier","src":"10514:5:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10504:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3675,"isOffset":false,"isSlot":false,"src":"10504:6:25","valueSize":1},{"declaration":3665,"isOffset":false,"isSlot":false,"src":"10514:5:25","valueSize":1}],"id":3677,"nodeType":"InlineAssembly","src":"10481:48:25"},{"expression":{"id":3678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"10546:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3660,"id":3679,"nodeType":"Return","src":"10539:13:25"}]},"documentation":{"id":3652,"nodeType":"StructuredDocumentation","src":"9725:529:25","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3681,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10268:6:25","nodeType":"FunctionDefinition","parameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"mutability":"mutable","name":"set","nameLocation":"10294:3:25","nodeType":"VariableDeclaration","scope":3681,"src":"10275:22:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3654,"nodeType":"UserDefinedTypeName","pathNode":{"id":3653,"name":"AddressSet","nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"10275:10:25"},"referencedDeclaration":3528,"src":"10275:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3528_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10274:24:25"},"returnParameters":{"id":3660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3681,"src":"10322:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3657,"name":"address","nodeType":"ElementaryTypeName","src":"10322:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3658,"nodeType":"ArrayTypeName","src":"10322:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10321:18:25"},"scope":3815,"src":"10259:300:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":3685,"members":[{"constant":false,"id":3684,"mutability":"mutable","name":"_inner","nameLocation":"10610:6:25","nodeType":"VariableDeclaration","scope":3685,"src":"10606:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3683,"nodeType":"UserDefinedTypeName","pathNode":{"id":3682,"name":"Set","nodeType":"IdentifierPath","referencedDeclaration":3213,"src":"10606:3:25"},"referencedDeclaration":3213,"src":"10606:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10588:7:25","nodeType":"StructDefinition","scope":3815,"src":"10581:42:25","visibility":"public"},{"body":{"id":3705,"nodeType":"Block","src":"10866:56:25","statements":[{"expression":{"arguments":[{"expression":{"id":3697,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"10888:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"10888:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3701,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"10908:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10900:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10900:7:25","typeDescriptions":{}}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10900:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3696,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"10883:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10883:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3695,"id":3704,"nodeType":"Return","src":"10876:39:25"}]},"documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"10629:159:25","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3706,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10802:3:25","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"mutability":"mutable","name":"set","nameLocation":"10822:3:25","nodeType":"VariableDeclaration","scope":3706,"src":"10806:19:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3688,"nodeType":"UserDefinedTypeName","pathNode":{"id":3687,"name":"UintSet","nodeType":"IdentifierPath","referencedDeclaration":3685,"src":"10806:7:25"},"referencedDeclaration":3685,"src":"10806:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3691,"mutability":"mutable","name":"value","nameLocation":"10835:5:25","nodeType":"VariableDeclaration","scope":3706,"src":"10827:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"10827:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10805:36:25"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3706,"src":"10860:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3693,"name":"bool","nodeType":"ElementaryTypeName","src":"10860:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10859:6:25"},"scope":3815,"src":"10793:129:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3726,"nodeType":"Block","src":"11166:59:25","statements":[{"expression":{"arguments":[{"expression":{"id":3718,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"11191:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"11191:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3722,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"11211:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11203:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11203:7:25","typeDescriptions":{}}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11203:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3717,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"11183:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11183:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3716,"id":3725,"nodeType":"Return","src":"11176:42:25"}]},"documentation":{"id":3707,"nodeType":"StructuredDocumentation","src":"10928:157:25","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3727,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11099:6:25","nodeType":"FunctionDefinition","parameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3710,"mutability":"mutable","name":"set","nameLocation":"11122:3:25","nodeType":"VariableDeclaration","scope":3727,"src":"11106:19:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3709,"nodeType":"UserDefinedTypeName","pathNode":{"id":3708,"name":"UintSet","nodeType":"IdentifierPath","referencedDeclaration":3685,"src":"11106:7:25"},"referencedDeclaration":3685,"src":"11106:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"value","nameLocation":"11135:5:25","nodeType":"VariableDeclaration","scope":3727,"src":"11127:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3711,"name":"uint256","nodeType":"ElementaryTypeName","src":"11127:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11105:36:25"},"returnParameters":{"id":3716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3727,"src":"11160:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3714,"name":"bool","nodeType":"ElementaryTypeName","src":"11160:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11159:6:25"},"scope":3815,"src":"11090:135:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3747,"nodeType":"Block","src":"11389:61:25","statements":[{"expression":{"arguments":[{"expression":{"id":3739,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"11416:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"11416:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11436:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11428:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11428:7:25","typeDescriptions":{}}},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11428:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3738,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"11406:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11406:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3737,"id":3746,"nodeType":"Return","src":"11399:44:25"}]},"documentation":{"id":3728,"nodeType":"StructuredDocumentation","src":"11231:70:25","text":" @dev Returns true if the value is in the set. O(1)."},"id":3748,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11315:8:25","nodeType":"FunctionDefinition","parameters":{"id":3734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"set","nameLocation":"11340:3:25","nodeType":"VariableDeclaration","scope":3748,"src":"11324:19:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3730,"nodeType":"UserDefinedTypeName","pathNode":{"id":3729,"name":"UintSet","nodeType":"IdentifierPath","referencedDeclaration":3685,"src":"11324:7:25"},"referencedDeclaration":3685,"src":"11324:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3733,"mutability":"mutable","name":"value","nameLocation":"11353:5:25","nodeType":"VariableDeclaration","scope":3748,"src":"11345:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"11345:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11323:36:25"},"returnParameters":{"id":3737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3748,"src":"11383:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3735,"name":"bool","nodeType":"ElementaryTypeName","src":"11383:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11382:6:25"},"scope":3815,"src":"11306:144:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3762,"nodeType":"Block","src":"11600:43:25","statements":[{"expression":{"arguments":[{"expression":{"id":3758,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"11625:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"11625:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3757,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"11617:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11617:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3756,"id":3761,"nodeType":"Return","src":"11610:26:25"}]},"documentation":{"id":3749,"nodeType":"StructuredDocumentation","src":"11456:70:25","text":" @dev Returns the number of values in the set. O(1)."},"id":3763,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11540:6:25","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"set","nameLocation":"11563:3:25","nodeType":"VariableDeclaration","scope":3763,"src":"11547:19:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3751,"nodeType":"UserDefinedTypeName","pathNode":{"id":3750,"name":"UintSet","nodeType":"IdentifierPath","referencedDeclaration":3685,"src":"11547:7:25"},"referencedDeclaration":3685,"src":"11547:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11546:21:25"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3763,"src":"11591:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"11591:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11590:9:25"},"scope":3815,"src":"11531:112:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3783,"nodeType":"Block","src":"12065:55:25","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3777,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"12094:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"12094:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3779,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3769,"src":"12106:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3776,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"12090:3:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12090:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12082:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3774,"name":"uint256","nodeType":"ElementaryTypeName","src":"12082:7:25","typeDescriptions":{}}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12082:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3773,"id":3782,"nodeType":"Return","src":"12075:38:25"}]},"documentation":{"id":3764,"nodeType":"StructuredDocumentation","src":"11649:331:25","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3784,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11994:2:25","nodeType":"FunctionDefinition","parameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3767,"mutability":"mutable","name":"set","nameLocation":"12013:3:25","nodeType":"VariableDeclaration","scope":3784,"src":"11997:19:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3766,"nodeType":"UserDefinedTypeName","pathNode":{"id":3765,"name":"UintSet","nodeType":"IdentifierPath","referencedDeclaration":3685,"src":"11997:7:25"},"referencedDeclaration":3685,"src":"11997:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3769,"mutability":"mutable","name":"index","nameLocation":"12026:5:25","nodeType":"VariableDeclaration","scope":3784,"src":"12018:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3768,"name":"uint256","nodeType":"ElementaryTypeName","src":"12018:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11996:36:25"},"returnParameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3784,"src":"12056:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"12056:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12055:9:25"},"scope":3815,"src":"11985:135:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3813,"nodeType":"Block","src":"12738:219:25","statements":[{"assignments":[3798],"declarations":[{"constant":false,"id":3798,"mutability":"mutable","name":"store","nameLocation":"12765:5:25","nodeType":"VariableDeclaration","scope":3813,"src":"12748:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12748:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3797,"nodeType":"ArrayTypeName","src":"12748:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3803,"initialValue":{"arguments":[{"expression":{"id":3800,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3788,"src":"12781:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"12781:10:25","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3213_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3799,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"12773:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3213_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12773:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12748:44:25"},{"assignments":[3808],"declarations":[{"constant":false,"id":3808,"mutability":"mutable","name":"result","nameLocation":"12819:6:25","nodeType":"VariableDeclaration","scope":3813,"src":"12802:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3806,"name":"uint256","nodeType":"ElementaryTypeName","src":"12802:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3807,"nodeType":"ArrayTypeName","src":"12802:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3809,"nodeType":"VariableDeclarationStatement","src":"12802:23:25"},{"AST":{"nodeType":"YulBlock","src":"12888:39:25","statements":[{"nodeType":"YulAssignment","src":"12902:15:25","value":{"name":"store","nodeType":"YulIdentifier","src":"12912:5:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12902:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3808,"isOffset":false,"isSlot":false,"src":"12902:6:25","valueSize":1},{"declaration":3798,"isOffset":false,"isSlot":false,"src":"12912:5:25","valueSize":1}],"id":3810,"nodeType":"InlineAssembly","src":"12879:48:25"},{"expression":{"id":3811,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"12944:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3793,"id":3812,"nodeType":"Return","src":"12937:13:25"}]},"documentation":{"id":3785,"nodeType":"StructuredDocumentation","src":"12126:529:25","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3814,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12669:6:25","nodeType":"FunctionDefinition","parameters":{"id":3789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3788,"mutability":"mutable","name":"set","nameLocation":"12692:3:25","nodeType":"VariableDeclaration","scope":3814,"src":"12676:19:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3787,"nodeType":"UserDefinedTypeName","pathNode":{"id":3786,"name":"UintSet","nodeType":"IdentifierPath","referencedDeclaration":3685,"src":"12676:7:25"},"referencedDeclaration":3685,"src":"12676:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3685_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12675:21:25"},"returnParameters":{"id":3793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3814,"src":"12720:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3790,"name":"uint256","nodeType":"ElementaryTypeName","src":"12720:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3791,"nodeType":"ArrayTypeName","src":"12720:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12719:18:25"},"scope":3815,"src":"12660:297:25","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3816,"src":"1329:11630:25","usedErrors":[]}],"src":"205:12755:25"},"id":25},"contracts/BankV2.sol":{"ast":{"absolutePath":"contracts/BankV2.sol","exportedSymbols":{"AccessControlEnumerable":[660],"BankV2":[5040],"IERC20":[1122],"IERC20Metadata":[1147],"KeeperCompatibleInterface":[123],"Multicall":[1966],"SafeERC20":[1559]},"id":5041,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3817,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:26"},{"absolutePath":"@openzeppelin/contracts/access/AccessControlEnumerable.sol","file":"@openzeppelin/contracts/access/AccessControlEnumerable.sol","id":3819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5041,"sourceUnit":661,"src":"58:99:26","symbolAliases":[{"foreign":{"id":3818,"name":"AccessControlEnumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"66:23:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlEnumerable_$660_$","typeString":"type(contract AccessControlEnumerable)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","id":3822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5041,"sourceUnit":1148,"src":"158:105:26","symbolAliases":[{"foreign":{"id":3820,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"166:14:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$1147_$","typeString":"type(contract IERC20Metadata)"}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3821,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"182:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5041,"sourceUnit":1560,"src":"264:82:26","symbolAliases":[{"foreign":{"id":3823,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"272:9:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20_$1559_$","typeString":"type(library SafeERC20)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Multicall.sol","file":"@openzeppelin/contracts/utils/Multicall.sol","id":3826,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5041,"sourceUnit":1967,"src":"347:70:26","symbolAliases":[{"foreign":{"id":3825,"name":"Multicall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"355:9:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Multicall_$1966_$","typeString":"type(contract Multicall)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/KeeperCompatible.sol","file":"@chainlink/contracts/src/v0.8/KeeperCompatible.sol","id":3828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5041,"sourceUnit":47,"src":"419:93:26","symbolAliases":[{"foreign":{"id":3827,"name":"KeeperCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"427:25:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AutomationCompatibleInterface_$123_$","typeString":"type(contract AutomationCompatibleInterface)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BankV2","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5040,"linearizedBaseContracts":[5040],"name":"BankV2","nameLocation":"523:6:26","nodeType":"ContractDefinition","nodes":[{"id":3832,"libraryName":{"id":3829,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1559,"src":"542:9:26"},"nodeType":"UsingForDirective","src":"536:27:26","typeName":{"id":3831,"nodeType":"UserDefinedTypeName","pathNode":{"id":3830,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"556:6:26"},"referencedDeclaration":1122,"src":"556:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}}},{"canonicalName":"BankV2.HouseEdgeSplit","id":3847,"members":[{"constant":false,"id":3834,"mutability":"mutable","name":"bank","nameLocation":"1375:4:26","nodeType":"VariableDeclaration","scope":3847,"src":"1368:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3833,"name":"uint16","nodeType":"ElementaryTypeName","src":"1368:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3836,"mutability":"mutable","name":"dividend","nameLocation":"1396:8:26","nodeType":"VariableDeclaration","scope":3847,"src":"1389:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3835,"name":"uint16","nodeType":"ElementaryTypeName","src":"1389:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3838,"mutability":"mutable","name":"treasury","nameLocation":"1421:8:26","nodeType":"VariableDeclaration","scope":3847,"src":"1414:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3837,"name":"uint16","nodeType":"ElementaryTypeName","src":"1414:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3840,"mutability":"mutable","name":"team","nameLocation":"1446:4:26","nodeType":"VariableDeclaration","scope":3847,"src":"1439:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3839,"name":"uint16","nodeType":"ElementaryTypeName","src":"1439:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3842,"mutability":"mutable","name":"dividendAmount","nameLocation":"1468:14:26","nodeType":"VariableDeclaration","scope":3847,"src":"1460:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1460:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3844,"mutability":"mutable","name":"treasuryAmount","nameLocation":"1500:14:26","nodeType":"VariableDeclaration","scope":3847,"src":"1492:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3843,"name":"uint256","nodeType":"ElementaryTypeName","src":"1492:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3846,"mutability":"mutable","name":"teamAmount","nameLocation":"1532:10:26","nodeType":"VariableDeclaration","scope":3847,"src":"1524:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3845,"name":"uint256","nodeType":"ElementaryTypeName","src":"1524:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"HouseEdgeSplit","nameLocation":"1343:14:26","nodeType":"StructDefinition","scope":5040,"src":"1336:213:26","visibility":"public"},{"canonicalName":"BankV2.Token","id":3859,"members":[{"constant":false,"id":3849,"mutability":"mutable","name":"allowed","nameLocation":"1583:7:26","nodeType":"VariableDeclaration","scope":3859,"src":"1578:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3848,"name":"bool","nodeType":"ElementaryTypeName","src":"1578:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3851,"mutability":"mutable","name":"paused","nameLocation":"1605:6:26","nodeType":"VariableDeclaration","scope":3859,"src":"1600:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3850,"name":"bool","nodeType":"ElementaryTypeName","src":"1600:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3853,"mutability":"mutable","name":"balanceRisk","nameLocation":"1628:11:26","nodeType":"VariableDeclaration","scope":3859,"src":"1621:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3852,"name":"uint16","nodeType":"ElementaryTypeName","src":"1621:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3855,"mutability":"mutable","name":"minBetAmount","nameLocation":"1657:12:26","nodeType":"VariableDeclaration","scope":3859,"src":"1649:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3854,"name":"uint256","nodeType":"ElementaryTypeName","src":"1649:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3858,"mutability":"mutable","name":"houseEdgeSplit","nameLocation":"1694:14:26","nodeType":"VariableDeclaration","scope":3859,"src":"1679:29:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"},"typeName":{"id":3857,"nodeType":"UserDefinedTypeName","pathNode":{"id":3856,"name":"HouseEdgeSplit","nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"1679:14:26"},"referencedDeclaration":3847,"src":"1679:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"}},"visibility":"internal"}],"name":"Token","nameLocation":"1562:5:26","nodeType":"StructDefinition","scope":5040,"src":"1555:160:26","visibility":"public"},{"canonicalName":"BankV2.TokenMetadata","id":3871,"members":[{"constant":false,"id":3861,"mutability":"mutable","name":"decimals","nameLocation":"1758:8:26","nodeType":"VariableDeclaration","scope":3871,"src":"1752:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3860,"name":"uint8","nodeType":"ElementaryTypeName","src":"1752:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3863,"mutability":"mutable","name":"tokenAddress","nameLocation":"1784:12:26","nodeType":"VariableDeclaration","scope":3871,"src":"1776:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3862,"name":"address","nodeType":"ElementaryTypeName","src":"1776:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3865,"mutability":"mutable","name":"name","nameLocation":"1813:4:26","nodeType":"VariableDeclaration","scope":3871,"src":"1806:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3864,"name":"string","nodeType":"ElementaryTypeName","src":"1806:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3867,"mutability":"mutable","name":"symbol","nameLocation":"1834:6:26","nodeType":"VariableDeclaration","scope":3871,"src":"1827:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3866,"name":"string","nodeType":"ElementaryTypeName","src":"1827:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3870,"mutability":"mutable","name":"token","nameLocation":"1856:5:26","nodeType":"VariableDeclaration","scope":3871,"src":"1850:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"},"typeName":{"id":3869,"nodeType":"UserDefinedTypeName","pathNode":{"id":3868,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":3859,"src":"1850:5:26"},"referencedDeclaration":3859,"src":"1850:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"}},"visibility":"internal"}],"name":"TokenMetadata","nameLocation":"1728:13:26","nodeType":"StructDefinition","scope":5040,"src":"1721:147:26","visibility":"public"},{"constant":false,"documentation":{"id":3872,"nodeType":"StructuredDocumentation","src":"1874:35:26","text":"@notice Number of tokens added."},"id":3874,"mutability":"mutable","name":"_tokensCount","nameLocation":"1928:12:26","nodeType":"VariableDeclaration","scope":5040,"src":"1914:26:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3873,"name":"uint8","nodeType":"ElementaryTypeName","src":"1914:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":3875,"nodeType":"StructuredDocumentation","src":"1947:38:26","text":"@notice Treasury multi-sig wallet."},"functionSelector":"61d027b3","id":3877,"mutability":"immutable","name":"treasury","nameLocation":"2015:8:26","nodeType":"VariableDeclaration","scope":5040,"src":"1990:33:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3876,"name":"address","nodeType":"ElementaryTypeName","src":"1990:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":3878,"nodeType":"StructuredDocumentation","src":"2030:24:26","text":"@notice Team wallet."},"functionSelector":"59927044","id":3880,"mutability":"mutable","name":"teamWallet","nameLocation":"2074:10:26","nodeType":"VariableDeclaration","scope":5040,"src":"2059:25:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3879,"name":"address","nodeType":"ElementaryTypeName","src":"2059:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":3881,"nodeType":"StructuredDocumentation","src":"2091:57:26","text":"@notice Maps tokens addresses to token configuration."},"functionSelector":"e4860339","id":3886,"mutability":"mutable","name":"tokens","nameLocation":"2186:6:26","nodeType":"VariableDeclaration","scope":5040,"src":"2153:39:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token)"},"typeName":{"id":3885,"keyType":{"id":3882,"name":"address","nodeType":"ElementaryTypeName","src":"2161:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2153:25:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token)"},"valueType":{"id":3884,"nodeType":"UserDefinedTypeName","pathNode":{"id":3883,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":3859,"src":"2172:5:26"},"referencedDeclaration":3859,"src":"2172:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"}}},"visibility":"public"},{"constant":false,"documentation":{"id":3887,"nodeType":"StructuredDocumentation","src":"2199:49:26","text":"@notice Maps tokens indexes to token address."},"id":3891,"mutability":"mutable","name":"_tokensList","nameLocation":"2287:11:26","nodeType":"VariableDeclaration","scope":5040,"src":"2253:45:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"},"typeName":{"id":3890,"keyType":{"id":3888,"name":"uint8","nodeType":"ElementaryTypeName","src":"2261:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Mapping","src":"2253:25:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"},"valueType":{"id":3889,"name":"address","nodeType":"ElementaryTypeName","src":"2270:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"anonymous":false,"documentation":{"id":3892,"nodeType":"StructuredDocumentation","src":"2305:86:26","text":"@notice Emitted after a token is added.\n @param token Address of the token."},"id":3896,"name":"AddToken","nameLocation":"2402:8:26","nodeType":"EventDefinition","parameters":{"id":3895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3894,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"2419:5:26","nodeType":"VariableDeclaration","scope":3896,"src":"2411:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3893,"name":"address","nodeType":"ElementaryTypeName","src":"2411:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2410:15:26"},"src":"2396:30:26"},{"anonymous":false,"documentation":{"id":3897,"nodeType":"StructuredDocumentation","src":"2432:109:26","text":"@notice Emitted after the balance risk is set.\n @param balanceRisk Rate defining the balance risk."},"id":3903,"name":"SetBalanceRisk","nameLocation":"2552:14:26","nodeType":"EventDefinition","parameters":{"id":3902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3899,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2583:5:26","nodeType":"VariableDeclaration","scope":3903,"src":"2567:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3898,"name":"address","nodeType":"ElementaryTypeName","src":"2567:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3901,"indexed":false,"mutability":"mutable","name":"balanceRisk","nameLocation":"2597:11:26","nodeType":"VariableDeclaration","scope":3903,"src":"2590:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3900,"name":"uint16","nodeType":"ElementaryTypeName","src":"2590:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2566:43:26"},"src":"2546:64:26"},{"anonymous":false,"documentation":{"id":3904,"nodeType":"StructuredDocumentation","src":"2616:153:26","text":"@notice Emitted after a token is allowed.\n @param token Address of the token.\n @param allowed Whether the token is allowed for betting."},"id":3910,"name":"SetAllowedToken","nameLocation":"2780:15:26","nodeType":"EventDefinition","parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3906,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2812:5:26","nodeType":"VariableDeclaration","scope":3910,"src":"2796:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3905,"name":"address","nodeType":"ElementaryTypeName","src":"2796:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3908,"indexed":false,"mutability":"mutable","name":"allowed","nameLocation":"2824:7:26","nodeType":"VariableDeclaration","scope":3910,"src":"2819:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3907,"name":"bool","nodeType":"ElementaryTypeName","src":"2819:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2795:37:26"},"src":"2774:59:26"},{"anonymous":false,"documentation":{"id":3911,"nodeType":"StructuredDocumentation","src":"2839:159:26","text":"@notice Emitted after the minimum bet amount is set for a token.\n @param token Address of the token.\n @param minBetAmount Minimum bet amount."},"id":3917,"name":"SetTokenMinBetAmount","nameLocation":"3009:20:26","nodeType":"EventDefinition","parameters":{"id":3916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3913,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3046:5:26","nodeType":"VariableDeclaration","scope":3917,"src":"3030:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3912,"name":"address","nodeType":"ElementaryTypeName","src":"3030:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3915,"indexed":false,"mutability":"mutable","name":"minBetAmount","nameLocation":"3061:12:26","nodeType":"VariableDeclaration","scope":3917,"src":"3053:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3914,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3029:45:26"},"src":"3003:72:26"},{"anonymous":false,"documentation":{"id":3918,"nodeType":"StructuredDocumentation","src":"3081:138:26","text":"@notice Emitted after a token deposit.\n @param token Address of the token.\n @param amount The number of token deposited."},"id":3924,"name":"Deposit","nameLocation":"3230:7:26","nodeType":"EventDefinition","parameters":{"id":3923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3920,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3254:5:26","nodeType":"VariableDeclaration","scope":3924,"src":"3238:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3919,"name":"address","nodeType":"ElementaryTypeName","src":"3238:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3922,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3269:6:26","nodeType":"VariableDeclaration","scope":3924,"src":"3261:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3921,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3237:39:26"},"src":"3224:53:26"},{"anonymous":false,"documentation":{"id":3925,"nodeType":"StructuredDocumentation","src":"3283:141:26","text":"@notice Emitted after a token withdrawal.\n @param token Address of the token.\n @param amount The number of token withdrawn."},"id":3931,"name":"Withdraw","nameLocation":"3435:8:26","nodeType":"EventDefinition","parameters":{"id":3930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3927,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3460:5:26","nodeType":"VariableDeclaration","scope":3931,"src":"3444:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3926,"name":"address","nodeType":"ElementaryTypeName","src":"3444:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3929,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3475:6:26","nodeType":"VariableDeclaration","scope":3931,"src":"3467:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3928,"name":"uint256","nodeType":"ElementaryTypeName","src":"3467:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3443:39:26"},"src":"3429:54:26"},{"anonymous":false,"id":3943,"name":"SetTokenHouseEdgeSplit","nameLocation":"3495:22:26","nodeType":"EventDefinition","parameters":{"id":3942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3933,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3543:5:26","nodeType":"VariableDeclaration","scope":3943,"src":"3527:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3932,"name":"address","nodeType":"ElementaryTypeName","src":"3527:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3935,"indexed":false,"mutability":"mutable","name":"bank","nameLocation":"3565:4:26","nodeType":"VariableDeclaration","scope":3943,"src":"3558:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3934,"name":"uint16","nodeType":"ElementaryTypeName","src":"3558:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3937,"indexed":false,"mutability":"mutable","name":"dividend","nameLocation":"3586:8:26","nodeType":"VariableDeclaration","scope":3943,"src":"3579:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3936,"name":"uint16","nodeType":"ElementaryTypeName","src":"3579:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3939,"indexed":false,"mutability":"mutable","name":"treasury","nameLocation":"3611:8:26","nodeType":"VariableDeclaration","scope":3943,"src":"3604:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3938,"name":"uint16","nodeType":"ElementaryTypeName","src":"3604:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3941,"indexed":false,"mutability":"mutable","name":"team","nameLocation":"3636:4:26","nodeType":"VariableDeclaration","scope":3943,"src":"3629:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3940,"name":"uint16","nodeType":"ElementaryTypeName","src":"3629:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3517:129:26"},"src":"3489:158:26"},{"anonymous":false,"documentation":{"id":3944,"nodeType":"StructuredDocumentation","src":"3653:265:26","text":"@notice Emitted after the token's treasury and team allocations are distributed.\n @param token Address of the token.\n @param treasuryAmount The number of tokens sent to the treasury.\n @param teamAmount The number of tokens sent to the team."},"id":3952,"name":"HouseEdgeDistribution","nameLocation":"3929:21:26","nodeType":"EventDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3976:5:26","nodeType":"VariableDeclaration","scope":3952,"src":"3960:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3945,"name":"address","nodeType":"ElementaryTypeName","src":"3960:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3948,"indexed":false,"mutability":"mutable","name":"treasuryAmount","nameLocation":"3999:14:26","nodeType":"VariableDeclaration","scope":3952,"src":"3991:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"3991:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3950,"indexed":false,"mutability":"mutable","name":"teamAmount","nameLocation":"4031:10:26","nodeType":"VariableDeclaration","scope":3952,"src":"4023:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"4023:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3950:97:26"},"src":"3923:125:26"},{"anonymous":false,"documentation":{"id":3953,"nodeType":"StructuredDocumentation","src":"4054:184:26","text":"@notice Emitted after the token's dividend allocation is distributed.\n @param token Address of the token.\n @param amount The number of tokens sent to the SwirlMaster."},"id":3959,"name":"HarvestDividend","nameLocation":"4249:15:26","nodeType":"EventDefinition","parameters":{"id":3958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4281:5:26","nodeType":"VariableDeclaration","scope":3959,"src":"4265:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3954,"name":"address","nodeType":"ElementaryTypeName","src":"4265:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3957,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4296:6:26","nodeType":"VariableDeclaration","scope":3959,"src":"4288:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3956,"name":"uint256","nodeType":"ElementaryTypeName","src":"4288:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4264:39:26"},"src":"4243:61:26"},{"anonymous":false,"documentation":{"id":3960,"nodeType":"StructuredDocumentation","src":"4310:376:26","text":"@notice Emitted after the token's house edge is allocated.\n @param token Address of the token.\n @param bank The number of tokens allocated to bank.\n @param dividend The number of tokens allocated as staking rewards.\n @param treasury The number of tokens allocated to the treasury.\n @param team The number of tokens allocated to the team."},"id":3972,"name":"AllocateHouseEdgeAmount","nameLocation":"4697:23:26","nodeType":"EventDefinition","parameters":{"id":3971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3962,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4746:5:26","nodeType":"VariableDeclaration","scope":3972,"src":"4730:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3961,"name":"address","nodeType":"ElementaryTypeName","src":"4730:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3964,"indexed":false,"mutability":"mutable","name":"bank","nameLocation":"4769:4:26","nodeType":"VariableDeclaration","scope":3972,"src":"4761:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3963,"name":"uint256","nodeType":"ElementaryTypeName","src":"4761:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3966,"indexed":false,"mutability":"mutable","name":"dividend","nameLocation":"4791:8:26","nodeType":"VariableDeclaration","scope":3972,"src":"4783:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"4783:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3968,"indexed":false,"mutability":"mutable","name":"treasury","nameLocation":"4817:8:26","nodeType":"VariableDeclaration","scope":3972,"src":"4809:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3967,"name":"uint256","nodeType":"ElementaryTypeName","src":"4809:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3970,"indexed":false,"mutability":"mutable","name":"team","nameLocation":"4843:4:26","nodeType":"VariableDeclaration","scope":3972,"src":"4835:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3969,"name":"uint256","nodeType":"ElementaryTypeName","src":"4835:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4720:133:26"},"src":"4691:163:26"},{"anonymous":false,"documentation":{"id":3973,"nodeType":"StructuredDocumentation","src":"4860:196:26","text":"@notice Emitted after the game's fees are sent to the bank.\n @param token Address of the token.\n @param newBalance New token balance.\n @param fees Fees received from game."},"id":3981,"name":"AccountFees","nameLocation":"5067:11:26","nodeType":"EventDefinition","parameters":{"id":3980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3975,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"5095:5:26","nodeType":"VariableDeclaration","scope":3981,"src":"5079:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3974,"name":"address","nodeType":"ElementaryTypeName","src":"5079:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3977,"indexed":false,"mutability":"mutable","name":"newBalance","nameLocation":"5110:10:26","nodeType":"VariableDeclaration","scope":3981,"src":"5102:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"5102:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3979,"indexed":false,"mutability":"mutable","name":"fees","nameLocation":"5130:4:26","nodeType":"VariableDeclaration","scope":3981,"src":"5122:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"5122:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5078:57:26"},"src":"5061:75:26"},{"anonymous":false,"documentation":{"id":3982,"nodeType":"StructuredDocumentation","src":"5142:202:26","text":"@notice Emitted after the bet profit amount is sent to the user.\n @param token Address of the token.\n @param newBalance New token balance.\n @param profit Bet profit amount sent."},"id":3990,"name":"Payout","nameLocation":"5355:6:26","nodeType":"EventDefinition","parameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3984,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"5378:5:26","nodeType":"VariableDeclaration","scope":3990,"src":"5362:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3983,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3986,"indexed":false,"mutability":"mutable","name":"newBalance","nameLocation":"5393:10:26","nodeType":"VariableDeclaration","scope":3990,"src":"5385:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3985,"name":"uint256","nodeType":"ElementaryTypeName","src":"5385:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3988,"indexed":false,"mutability":"mutable","name":"profit","nameLocation":"5413:6:26","nodeType":"VariableDeclaration","scope":3990,"src":"5405:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3987,"name":"uint256","nodeType":"ElementaryTypeName","src":"5405:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5361:59:26"},"src":"5349:72:26"},{"anonymous":false,"documentation":{"id":3991,"nodeType":"StructuredDocumentation","src":"5427:215:26","text":"@notice Emitted after the bet amount is collected from the game smart contract.\n @param token Address of the token.\n @param newBalance New token balance.\n @param amount Bet amount collected."},"id":3999,"name":"CashIn","nameLocation":"5653:6:26","nodeType":"EventDefinition","parameters":{"id":3998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3993,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"5676:5:26","nodeType":"VariableDeclaration","scope":3999,"src":"5660:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3992,"name":"address","nodeType":"ElementaryTypeName","src":"5660:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3995,"indexed":false,"mutability":"mutable","name":"newBalance","nameLocation":"5691:10:26","nodeType":"VariableDeclaration","scope":3999,"src":"5683:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3994,"name":"uint256","nodeType":"ElementaryTypeName","src":"5683:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3997,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"5711:6:26","nodeType":"VariableDeclaration","scope":3999,"src":"5703:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3996,"name":"uint256","nodeType":"ElementaryTypeName","src":"5703:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5659:59:26"},"src":"5647:72:26"},{"documentation":{"id":4000,"nodeType":"StructuredDocumentation","src":"5725:65:26","text":"@notice Reverting error when trying to add an existing token."},"id":4002,"name":"TokenExists","nameLocation":"5801:11:26","nodeType":"ErrorDefinition","parameters":{"id":4001,"nodeType":"ParameterList","parameters":[],"src":"5812:2:26"},"src":"5795:20:26"},{"documentation":{"id":4003,"nodeType":"StructuredDocumentation","src":"5820:157:26","text":"@notice Reverting error when setting the house edge allocations, but the sum isn't 100%.\n @param splitSum Sum of the house edge allocations rates."},"id":4007,"name":"WrongHouseEdgeSplit","nameLocation":"5988:19:26","nodeType":"ErrorDefinition","parameters":{"id":4006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4005,"mutability":"mutable","name":"splitSum","nameLocation":"6015:8:26","nodeType":"VariableDeclaration","scope":4007,"src":"6008:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4004,"name":"uint16","nodeType":"ElementaryTypeName","src":"6008:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6007:17:26"},"src":"5982:43:26"},{"documentation":{"id":4008,"nodeType":"StructuredDocumentation","src":"6030:54:26","text":"@notice Reverting error when sender isn't allowed."},"id":4010,"name":"AccessDenied","nameLocation":"6095:12:26","nodeType":"ErrorDefinition","parameters":{"id":4009,"nodeType":"ParameterList","parameters":[],"src":"6107:2:26"},"src":"6089:21:26"},{"documentation":{"id":4011,"nodeType":"StructuredDocumentation","src":"6115:77:26","text":"@notice Reverting error when team wallet or treasury is the zero address."},"id":4013,"name":"WrongAddress","nameLocation":"6203:12:26","nodeType":"ErrorDefinition","parameters":{"id":4012,"nodeType":"ParameterList","parameters":[],"src":"6215:2:26"},"src":"6197:21:26"},{"documentation":{"id":4014,"nodeType":"StructuredDocumentation","src":"6223:64:26","text":"@notice Reverting error when withdrawing a non paused token."},"id":4016,"name":"TokenNotPaused","nameLocation":"6298:14:26","nodeType":"ErrorDefinition","parameters":{"id":4015,"nodeType":"ParameterList","parameters":[],"src":"6312:2:26"},"src":"6292:23:26"},{"documentation":{"id":4017,"nodeType":"StructuredDocumentation","src":"6320:66:26","text":"@notice Reverting error when token has pending bets on a game."},"id":4019,"name":"TokenHasPendingBets","nameLocation":"6397:19:26","nodeType":"ErrorDefinition","parameters":{"id":4018,"nodeType":"ParameterList","parameters":[],"src":"6416:2:26"},"src":"6391:28:26"},{"anonymous":false,"documentation":{"id":4020,"nodeType":"StructuredDocumentation","src":"6425:100:26","text":"@notice Emitted after the team wallet is set.\n @param teamWallet The team wallet address."},"id":4024,"name":"SetTeamWallet","nameLocation":"6536:13:26","nodeType":"EventDefinition","parameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4022,"indexed":false,"mutability":"mutable","name":"teamWallet","nameLocation":"6558:10:26","nodeType":"VariableDeclaration","scope":4024,"src":"6550:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4021,"name":"address","nodeType":"ElementaryTypeName","src":"6550:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6549:20:26"},"src":"6530:40:26"},{"body":{"id":4051,"nodeType":"Block","src":"6835:300:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4032,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"6849:15:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6876:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6868:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4033,"name":"address","nodeType":"ElementaryTypeName","src":"6868:7:26","typeDescriptions":{}}},"id":4036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6868:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6849:29:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4042,"nodeType":"IfStatement","src":"6845:81:26","trueBody":{"id":4041,"nodeType":"Block","src":"6880:46:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4038,"name":"WrongAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"6901:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6901:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4040,"nodeType":"RevertStatement","src":"6894:21:26"}]}},{"expression":{"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4043,"name":"treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"6936:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4044,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"6947:15:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6936:26:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4046,"nodeType":"ExpressionStatement","src":"6936:26:26"},{"expression":{"arguments":[{"id":4048,"name":"teamWalletAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"7110:17:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4047,"name":"setTeamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"7096:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7096:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4050,"nodeType":"ExpressionStatement","src":"7096:32:26"}]},"documentation":{"id":4025,"nodeType":"StructuredDocumentation","src":"6576:190:26","text":"@notice Initialize the contract's admin role to the deployer, and state variables.\n @param treasuryAddress Treasury multi-sig wallet.\n @param teamWalletAddress Team wallet."},"id":4052,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4027,"mutability":"mutable","name":"treasuryAddress","nameLocation":"6791:15:26","nodeType":"VariableDeclaration","scope":4052,"src":"6783:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4026,"name":"address","nodeType":"ElementaryTypeName","src":"6783:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4029,"mutability":"mutable","name":"teamWalletAddress","nameLocation":"6816:17:26","nodeType":"VariableDeclaration","scope":4052,"src":"6808:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4028,"name":"address","nodeType":"ElementaryTypeName","src":"6808:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6782:52:26"},"returnParameters":{"id":4031,"nodeType":"ParameterList","parameters":[],"src":"6835:0:26"},"scope":5040,"src":"6771:364:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4084,"nodeType":"Block","src":"7570:166:26","statements":[{"condition":{"arguments":[{"id":4063,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"7596:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4062,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"7584:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7584:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4082,"nodeType":"Block","src":"7665:65:26","statements":[{"expression":{"arguments":[{"id":4078,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"7706:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4079,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"7712:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4075,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"7686:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4074,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"7679:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7679:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1216,"src":"7679:26:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1122_$","typeString":"function (contract IERC20,address,uint256)"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7679:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4081,"nodeType":"ExpressionStatement","src":"7679:40:26"}]},"id":4083,"nodeType":"IfStatement","src":"7580:150:26","trueBody":{"id":4073,"nodeType":"Block","src":"7604:55:26","statements":[{"expression":{"arguments":[{"id":4070,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"7641:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4067,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"7626:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7618:8:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4065,"name":"address","nodeType":"ElementaryTypeName","src":"7618:8:26","stateMutability":"payable","typeDescriptions":{}}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7618:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"7618:22:26","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7618:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4072,"nodeType":"ExpressionStatement","src":"7618:30:26"}]}}]},"documentation":{"id":4053,"nodeType":"StructuredDocumentation","src":"7141:318:26","text":"@notice Transfers a specific amount of token to an address.\n Uses native transfer or ERC20 transfer depending on the token.\n @dev The 0x address is considered the gas token.\n @param user Address of destination.\n @param token Address of the token.\n @param amount Number of tokens."},"id":4085,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"7473:13:26","nodeType":"FunctionDefinition","parameters":{"id":4060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"user","nameLocation":"7504:4:26","nodeType":"VariableDeclaration","scope":4085,"src":"7496:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4054,"name":"address","nodeType":"ElementaryTypeName","src":"7496:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4057,"mutability":"mutable","name":"token","nameLocation":"7526:5:26","nodeType":"VariableDeclaration","scope":4085,"src":"7518:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4056,"name":"address","nodeType":"ElementaryTypeName","src":"7518:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4059,"mutability":"mutable","name":"amount","nameLocation":"7549:6:26","nodeType":"VariableDeclaration","scope":4085,"src":"7541:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4058,"name":"uint256","nodeType":"ElementaryTypeName","src":"7541:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7486:75:26"},"returnParameters":{"id":4061,"nodeType":"ParameterList","parameters":[],"src":"7570:0:26"},"scope":5040,"src":"7464:272:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4100,"nodeType":"Block","src":"7967:43:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4093,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"7984:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8001:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7993:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4094,"name":"address","nodeType":"ElementaryTypeName","src":"7993:7:26","typeDescriptions":{}}},"id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7993:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7984:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4092,"id":4099,"nodeType":"Return","src":"7977:26:26"}]},"documentation":{"id":4086,"nodeType":"StructuredDocumentation","src":"7742:156:26","text":"@notice Check if the token has the 0x address.\n @param token Address of the token.\n @return Whether the token's address is the 0x address."},"id":4101,"implemented":true,"kind":"function","modifiers":[],"name":"_isGasToken","nameLocation":"7912:11:26","nodeType":"FunctionDefinition","parameters":{"id":4089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4088,"mutability":"mutable","name":"token","nameLocation":"7932:5:26","nodeType":"VariableDeclaration","scope":4101,"src":"7924:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4087,"name":"address","nodeType":"ElementaryTypeName","src":"7924:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7923:15:26"},"returnParameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4101,"src":"7961:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4090,"name":"bool","nodeType":"ElementaryTypeName","src":"7961:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7960:6:26"},"scope":5040,"src":"7903:107:26","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4138,"nodeType":"Block","src":"8368:216:26","statements":[{"condition":{"arguments":[{"id":4110,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"8394:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4109,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"8382:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8382:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4131,"nodeType":"Block","src":"8451:90:26","statements":[{"expression":{"arguments":[{"expression":{"id":4122,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8496:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8496:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4126,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8516:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_BankV2_$5040","typeString":"contract BankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BankV2_$5040","typeString":"contract BankV2"}],"id":4125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8508:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4124,"name":"address","nodeType":"ElementaryTypeName","src":"8508:7:26","typeDescriptions":{}}},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8508:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4128,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"8523:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4119,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"8472:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4118,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8465:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8465:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"8465:30:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1122_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8465:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4130,"nodeType":"ExpressionStatement","src":"8465:65:26"}]},"id":4132,"nodeType":"IfStatement","src":"8378:163:26","trueBody":{"id":4117,"nodeType":"Block","src":"8402:43:26","statements":[{"expression":{"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4112,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"8416:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4113,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8425:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"8425:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8416:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4116,"nodeType":"ExpressionStatement","src":"8416:18:26"}]}},{"eventCall":{"arguments":[{"id":4134,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"8563:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4135,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"8570:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4133,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"8555:7:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8555:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4137,"nodeType":"EmitStatement","src":"8550:27:26"}]},"documentation":{"id":4102,"nodeType":"StructuredDocumentation","src":"8016:213:26","text":"@notice Deposit funds in the bank to allow gamers to win more.\n ERC20 token allowance should be given prior to deposit.\n @param token Address of the token.\n @param amount Number of tokens."},"functionSelector":"47e7ef24","id":4139,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"8243:7:26","nodeType":"FunctionDefinition","parameters":{"id":4107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4104,"mutability":"mutable","name":"token","nameLocation":"8259:5:26","nodeType":"VariableDeclaration","scope":4139,"src":"8251:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4103,"name":"address","nodeType":"ElementaryTypeName","src":"8251:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4106,"mutability":"mutable","name":"amount","nameLocation":"8274:6:26","nodeType":"VariableDeclaration","scope":4139,"src":"8266:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4105,"name":"uint256","nodeType":"ElementaryTypeName","src":"8266:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8250:31:26"},"returnParameters":{"id":4108,"nodeType":"ParameterList","parameters":[],"src":"8368:0:26"},"scope":5040,"src":"8234:350:26","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4189,"nodeType":"Block","src":"8899:653:26","statements":[{"assignments":[4148],"declarations":[{"constant":false,"id":4148,"mutability":"mutable","name":"balance","nameLocation":"8917:7:26","nodeType":"VariableDeclaration","scope":4189,"src":"8909:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4147,"name":"uint256","nodeType":"ElementaryTypeName","src":"8909:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4152,"initialValue":{"arguments":[{"id":4150,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"8938:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4149,"name":"getBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"8927:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8927:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8909:35:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4153,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"8958:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8958:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4167,"nodeType":"IfStatement","src":"8954:431:26","trueBody":{"id":4166,"nodeType":"Block","src":"8972:413:26","statements":[{"condition":{"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8990:21:26","subExpression":{"expression":{"baseExpression":{"id":4156,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"8991:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4158,"indexExpression":{"id":4157,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"8998:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8991:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4159,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"paused","nodeType":"MemberAccess","referencedDeclaration":3851,"src":"8991:20:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4165,"nodeType":"IfStatement","src":"8986:83:26","trueBody":{"id":4164,"nodeType":"Block","src":"9013:56:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4161,"name":"TokenNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"9038:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9038:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4163,"nodeType":"RevertStatement","src":"9031:23:26"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4168,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"9399:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4169,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"9408:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9399:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4176,"nodeType":"IfStatement","src":"9395:63:26","trueBody":{"id":4175,"nodeType":"Block","src":"9417:41:26","statements":[{"expression":{"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4171,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"9431:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4172,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"9440:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9431:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4174,"nodeType":"ExpressionStatement","src":"9431:16:26"}]}},{"expression":{"arguments":[{"expression":{"id":4178,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9481:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"9481:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4180,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9493:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4181,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"9500:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4177,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"9467:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9467:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4183,"nodeType":"ExpressionStatement","src":"9467:40:26"},{"eventCall":{"arguments":[{"id":4185,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9531:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4186,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"9538:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4184,"name":"Withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3931,"src":"9522:8:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9522:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4188,"nodeType":"EmitStatement","src":"9517:28:26"}]},"documentation":{"id":4140,"nodeType":"StructuredDocumentation","src":"8590:187:26","text":"@notice Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\n @param token Address of the token.\n @param amount Number of tokens."},"functionSelector":"f3fef3a3","id":4190,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"8791:8:26","nodeType":"FunctionDefinition","parameters":{"id":4145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4142,"mutability":"mutable","name":"token","nameLocation":"8808:5:26","nodeType":"VariableDeclaration","scope":4190,"src":"8800:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4141,"name":"address","nodeType":"ElementaryTypeName","src":"8800:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4144,"mutability":"mutable","name":"amount","nameLocation":"8823:6:26","nodeType":"VariableDeclaration","scope":4190,"src":"8815:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4143,"name":"uint256","nodeType":"ElementaryTypeName","src":"8815:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8799:31:26"},"returnParameters":{"id":4146,"nodeType":"ParameterList","parameters":[],"src":"8899:0:26"},"scope":5040,"src":"8782:770:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4210,"nodeType":"Block","src":"9817:105:26","statements":[{"expression":{"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4198,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"9827:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4200,"indexExpression":{"id":4199,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"9834:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9827:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4201,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balanceRisk","nodeType":"MemberAccess","referencedDeclaration":3853,"src":"9827:25:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4202,"name":"balanceRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"9855:11:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"9827:39:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4204,"nodeType":"ExpressionStatement","src":"9827:39:26"},{"eventCall":{"arguments":[{"id":4206,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"9896:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4207,"name":"balanceRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"9903:11:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4205,"name":"SetBalanceRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"9881:14:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint16_$returns$__$","typeString":"function (address,uint16)"}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9881:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4209,"nodeType":"EmitStatement","src":"9876:39:26"}]},"documentation":{"id":4191,"nodeType":"StructuredDocumentation","src":"9558:125:26","text":"@notice Sets the new token balance risk.\n @param token Address of the token.\n @param balanceRisk Risk rate."},"functionSelector":"56f0406d","id":4211,"implemented":true,"kind":"function","modifiers":[],"name":"setBalanceRisk","nameLocation":"9697:14:26","nodeType":"FunctionDefinition","parameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4193,"mutability":"mutable","name":"token","nameLocation":"9720:5:26","nodeType":"VariableDeclaration","scope":4211,"src":"9712:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4192,"name":"address","nodeType":"ElementaryTypeName","src":"9712:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4195,"mutability":"mutable","name":"balanceRisk","nameLocation":"9734:11:26","nodeType":"VariableDeclaration","scope":4211,"src":"9727:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4194,"name":"uint16","nodeType":"ElementaryTypeName","src":"9727:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"9711:35:26"},"returnParameters":{"id":4197,"nodeType":"ParameterList","parameters":[],"src":"9817:0:26"},"scope":5040,"src":"9688:234:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4257,"nodeType":"Block","src":"10170:322:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4217,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"10184:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10200:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10184:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4242,"nodeType":"IfStatement","src":"10180:206:26","trueBody":{"id":4241,"nodeType":"Block","src":"10203:183:26","statements":[{"body":{"id":4239,"nodeType":"Block","src":"10254:122:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4229,"name":"_tokensList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"10276:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"}},"id":4231,"indexExpression":{"id":4230,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"10288:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10276:14:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4232,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"10294:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10276:23:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4238,"nodeType":"IfStatement","src":"10272:90:26","trueBody":{"id":4237,"nodeType":"Block","src":"10301:61:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4234,"name":"TokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"10330:11:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10330:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4236,"nodeType":"RevertStatement","src":"10323:20:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4223,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"10231:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4224,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"10235:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10231:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4240,"initializationExpression":{"assignments":[4221],"declarations":[{"constant":false,"id":4221,"mutability":"mutable","name":"i","nameLocation":"10228:1:26","nodeType":"VariableDeclaration","scope":4240,"src":"10222:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4220,"name":"uint8","nodeType":"ElementaryTypeName","src":"10222:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4222,"nodeType":"VariableDeclarationStatement","src":"10222:7:26"},"loopExpression":{"expression":{"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10249:3:26","subExpression":{"id":4226,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"10249:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4228,"nodeType":"ExpressionStatement","src":"10249:3:26"},"nodeType":"ForStatement","src":"10217:159:26"}]}},{"expression":{"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4243,"name":"_tokensList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"10395:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"}},"id":4245,"indexExpression":{"id":4244,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"10407:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10395:25:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4246,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"10423:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10395:33:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4248,"nodeType":"ExpressionStatement","src":"10395:33:26"},{"expression":{"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4249,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"10438:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10454:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10438:17:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4252,"nodeType":"ExpressionStatement","src":"10438:17:26"},{"eventCall":{"arguments":[{"id":4254,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"10479:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4253,"name":"AddToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"10470:8:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10470:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4256,"nodeType":"EmitStatement","src":"10465:20:26"}]},"documentation":{"id":4212,"nodeType":"StructuredDocumentation","src":"9928:149:26","text":"@notice Adds a new token that'll be enabled for the games' betting.\n Token shouldn't exist yet.\n @param token Address of the token."},"functionSelector":"d48bfca7","id":4258,"implemented":true,"kind":"function","modifiers":[],"name":"addToken","nameLocation":"10091:8:26","nodeType":"FunctionDefinition","parameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"token","nameLocation":"10117:5:26","nodeType":"VariableDeclaration","scope":4258,"src":"10109:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4213,"name":"address","nodeType":"ElementaryTypeName","src":"10109:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10099:61:26"},"returnParameters":{"id":4216,"nodeType":"ParameterList","parameters":[],"src":"10170:0:26"},"scope":5040,"src":"10082:410:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4278,"nodeType":"Block","src":"10766:94:26","statements":[{"expression":{"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4266,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"10776:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4268,"indexExpression":{"id":4267,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"10783:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"allowed","nodeType":"MemberAccess","referencedDeclaration":3849,"src":"10776:21:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4270,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"10800:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10776:31:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4272,"nodeType":"ExpressionStatement","src":"10776:31:26"},{"eventCall":{"arguments":[{"id":4274,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"10838:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4275,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"10845:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4273,"name":"SetAllowedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"10822:15:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10822:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4277,"nodeType":"EmitStatement","src":"10817:36:26"}]},"documentation":{"id":4259,"nodeType":"StructuredDocumentation","src":"10498:152:26","text":"@notice Changes the token's bet permission.\n @param token Address of the token.\n @param allowed Whether the token is enabled for bets."},"functionSelector":"8aaa2284","id":4279,"implemented":true,"kind":"function","modifiers":[],"name":"setAllowedToken","nameLocation":"10664:15:26","nodeType":"FunctionDefinition","parameters":{"id":4264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4261,"mutability":"mutable","name":"token","nameLocation":"10688:5:26","nodeType":"VariableDeclaration","scope":4279,"src":"10680:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4260,"name":"address","nodeType":"ElementaryTypeName","src":"10680:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4263,"mutability":"mutable","name":"allowed","nameLocation":"10700:7:26","nodeType":"VariableDeclaration","scope":4279,"src":"10695:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4262,"name":"bool","nodeType":"ElementaryTypeName","src":"10695:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10679:29:26"},"returnParameters":{"id":4265,"nodeType":"ParameterList","parameters":[],"src":"10766:0:26"},"scope":5040,"src":"10655:205:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4352,"nodeType":"Block","src":"11520:480:26","statements":[{"assignments":[4294],"declarations":[{"constant":false,"id":4294,"mutability":"mutable","name":"splitSum","nameLocation":"11537:8:26","nodeType":"VariableDeclaration","scope":4352,"src":"11530:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4293,"name":"uint16","nodeType":"ElementaryTypeName","src":"11530:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":4302,"initialValue":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4295,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"11548:4:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4296,"name":"dividend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4286,"src":"11555:8:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11548:15:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4298,"name":"team","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4290,"src":"11566:4:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11548:22:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4300,"name":"_treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"11573:9:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11548:34:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"11530:52:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4303,"name":"splitSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"11596:8:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3130303030","id":4304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11608:5:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"11596:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4311,"nodeType":"IfStatement","src":"11592:84:26","trueBody":{"id":4310,"nodeType":"Block","src":"11615:61:26","statements":[{"errorCall":{"arguments":[{"id":4307,"name":"splitSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"11656:8:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4306,"name":"WrongHouseEdgeSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"11636:19:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint16_$returns$__$","typeString":"function (uint16) pure"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11636:29:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4309,"nodeType":"RevertStatement","src":"11629:36:26"}]}},{"assignments":[4314],"declarations":[{"constant":false,"id":4314,"mutability":"mutable","name":"tokenHouseEdge","nameLocation":"11709:14:26","nodeType":"VariableDeclaration","scope":4352,"src":"11686:37:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"},"typeName":{"id":4313,"nodeType":"UserDefinedTypeName","pathNode":{"id":4312,"name":"HouseEdgeSplit","nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"11686:14:26"},"referencedDeclaration":3847,"src":"11686:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"}},"visibility":"internal"}],"id":4319,"initialValue":{"expression":{"baseExpression":{"id":4315,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11726:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4317,"indexExpression":{"id":4316,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"11733:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11726:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"11726:28:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11686:68:26"},{"expression":{"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4320,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"11764:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"bank","nodeType":"MemberAccess","referencedDeclaration":3834,"src":"11764:19:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4323,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"11786:4:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11764:26:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4325,"nodeType":"ExpressionStatement","src":"11764:26:26"},{"expression":{"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4326,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"11800:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"dividend","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"11800:23:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4329,"name":"dividend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4286,"src":"11826:8:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11800:34:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4331,"nodeType":"ExpressionStatement","src":"11800:34:26"},{"expression":{"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4332,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"11844:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4334,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"treasury","nodeType":"MemberAccess","referencedDeclaration":3838,"src":"11844:23:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4335,"name":"_treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"11870:9:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11844:35:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4337,"nodeType":"ExpressionStatement","src":"11844:35:26"},{"expression":{"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4338,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"11889:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"team","nodeType":"MemberAccess","referencedDeclaration":3840,"src":"11889:19:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4341,"name":"team","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4290,"src":"11911:4:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11889:26:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4343,"nodeType":"ExpressionStatement","src":"11889:26:26"},{"eventCall":{"arguments":[{"id":4345,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"11954:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4346,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"11961:4:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4347,"name":"dividend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4286,"src":"11967:8:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4348,"name":"_treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"11977:9:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4349,"name":"team","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4290,"src":"11988:4:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4344,"name":"SetTokenHouseEdgeSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"11931:22:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint16_$returns$__$","typeString":"function (address,uint16,uint16,uint16,uint16)"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11931:62:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4351,"nodeType":"EmitStatement","src":"11926:67:26"}]},"documentation":{"id":4280,"nodeType":"StructuredDocumentation","src":"10866:491:26","text":"@notice Sets the token's house edge allocations for bet payout.\n @param token Address of the token.\n @param bank Rate to be allocated to the bank, on bet payout.\n @param dividend Rate to be allocated as staking rewards, on bet payout.\n @param _treasury Rate to be allocated to the treasury, on bet payout.\n @param team Rate to be allocated to the team, on bet payout.\n @dev `bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000."},"functionSelector":"a7fd00f0","id":4353,"implemented":true,"kind":"function","modifiers":[],"name":"setHouseEdgeSplit","nameLocation":"11371:17:26","nodeType":"FunctionDefinition","parameters":{"id":4291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4282,"mutability":"mutable","name":"token","nameLocation":"11406:5:26","nodeType":"VariableDeclaration","scope":4353,"src":"11398:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4281,"name":"address","nodeType":"ElementaryTypeName","src":"11398:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4284,"mutability":"mutable","name":"bank","nameLocation":"11428:4:26","nodeType":"VariableDeclaration","scope":4353,"src":"11421:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4283,"name":"uint16","nodeType":"ElementaryTypeName","src":"11421:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4286,"mutability":"mutable","name":"dividend","nameLocation":"11449:8:26","nodeType":"VariableDeclaration","scope":4353,"src":"11442:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4285,"name":"uint16","nodeType":"ElementaryTypeName","src":"11442:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4288,"mutability":"mutable","name":"_treasury","nameLocation":"11474:9:26","nodeType":"VariableDeclaration","scope":4353,"src":"11467:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4287,"name":"uint16","nodeType":"ElementaryTypeName","src":"11467:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4290,"mutability":"mutable","name":"team","nameLocation":"11500:4:26","nodeType":"VariableDeclaration","scope":4353,"src":"11493:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4289,"name":"uint16","nodeType":"ElementaryTypeName","src":"11493:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"11388:122:26"},"returnParameters":{"id":4292,"nodeType":"ParameterList","parameters":[],"src":"11520:0:26"},"scope":5040,"src":"11362:638:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4373,"nodeType":"Block","src":"12310:124:26","statements":[{"expression":{"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4361,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"12320:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4363,"indexExpression":{"id":4362,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4356,"src":"12327:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12320:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"minBetAmount","nodeType":"MemberAccess","referencedDeclaration":3855,"src":"12320:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4365,"name":"tokenMinBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"12349:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12320:46:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4367,"nodeType":"ExpressionStatement","src":"12320:46:26"},{"eventCall":{"arguments":[{"id":4369,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4356,"src":"12402:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4370,"name":"tokenMinBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"12409:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4368,"name":"SetTokenMinBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"12381:20:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12381:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4372,"nodeType":"EmitStatement","src":"12376:51:26"}]},"documentation":{"id":4354,"nodeType":"StructuredDocumentation","src":"12006:157:26","text":"@notice Sets the minimum bet amount for a specific token.\n @param token Address of the token.\n @param tokenMinBetAmount Minimum bet amount."},"functionSelector":"4297dcbe","id":4374,"implemented":true,"kind":"function","modifiers":[],"name":"setTokenMinBetAmount","nameLocation":"12177:20:26","nodeType":"FunctionDefinition","parameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4356,"mutability":"mutable","name":"token","nameLocation":"12206:5:26","nodeType":"VariableDeclaration","scope":4374,"src":"12198:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4355,"name":"address","nodeType":"ElementaryTypeName","src":"12198:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4358,"mutability":"mutable","name":"tokenMinBetAmount","nameLocation":"12221:17:26","nodeType":"VariableDeclaration","scope":4374,"src":"12213:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4357,"name":"uint256","nodeType":"ElementaryTypeName","src":"12213:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12197:42:26"},"returnParameters":{"id":4360,"nodeType":"ParameterList","parameters":[],"src":"12310:0:26"},"scope":5040,"src":"12168:266:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4474,"nodeType":"Block","src":"12762:755:26","statements":[{"assignments":[4388],"declarations":[{"constant":false,"id":4388,"mutability":"mutable","name":"_tokens","nameLocation":"12789:7:26","nodeType":"VariableDeclaration","scope":4474,"src":"12772:24:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4386,"name":"address","nodeType":"ElementaryTypeName","src":"12772:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4387,"nodeType":"ArrayTypeName","src":"12772:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4394,"initialValue":{"arguments":[{"id":4392,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"12813:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12799:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":4389,"name":"address","nodeType":"ElementaryTypeName","src":"12803:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4390,"nodeType":"ArrayTypeName","src":"12803:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12799:27:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12772:54:26"},{"assignments":[4399],"declarations":[{"constant":false,"id":4399,"mutability":"mutable","name":"_amounts","nameLocation":"12853:8:26","nodeType":"VariableDeclaration","scope":4474,"src":"12836:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4397,"name":"uint256","nodeType":"ElementaryTypeName","src":"12836:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4398,"nodeType":"ArrayTypeName","src":"12836:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4405,"initialValue":{"arguments":[{"id":4403,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"12878:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12864:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4400,"name":"uint256","nodeType":"ElementaryTypeName","src":"12868:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4401,"nodeType":"ArrayTypeName","src":"12868:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12864:27:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12836:55:26"},{"body":{"id":4468,"nodeType":"Block","src":"12939:535:26","statements":[{"assignments":[4416],"declarations":[{"constant":false,"id":4416,"mutability":"mutable","name":"tokenAddress","nameLocation":"12961:12:26","nodeType":"VariableDeclaration","scope":4468,"src":"12953:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4415,"name":"address","nodeType":"ElementaryTypeName","src":"12953:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4420,"initialValue":{"baseExpression":{"id":4417,"name":"_tokensList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"12976:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"}},"id":4419,"indexExpression":{"id":4418,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"12988:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12976:14:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12953:37:26"},{"assignments":[4423],"declarations":[{"constant":false,"id":4423,"mutability":"mutable","name":"token","nameLocation":"13018:5:26","nodeType":"VariableDeclaration","scope":4468,"src":"13004:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"},"typeName":{"id":4422,"nodeType":"UserDefinedTypeName","pathNode":{"id":4421,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":3859,"src":"13004:5:26"},"referencedDeclaration":3859,"src":"13004:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"}},"visibility":"internal"}],"id":4427,"initialValue":{"baseExpression":{"id":4424,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"13026:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4426,"indexExpression":{"id":4425,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"13033:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13026:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13004:42:26"},{"assignments":[4429],"declarations":[{"constant":false,"id":4429,"mutability":"mutable","name":"dividendAmount","nameLocation":"13068:14:26","nodeType":"VariableDeclaration","scope":4468,"src":"13060:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4428,"name":"uint256","nodeType":"ElementaryTypeName","src":"13060:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4433,"initialValue":{"expression":{"expression":{"id":4430,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4423,"src":"13085:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token storage pointer"}},"id":4431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"13085:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"id":4432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dividendAmount","nodeType":"MemberAccess","referencedDeclaration":3842,"src":"13085:35:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13060:60:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4434,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"13138:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13156:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13138:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4467,"nodeType":"IfStatement","src":"13134:330:26","trueBody":{"id":4466,"nodeType":"Block","src":"13159:305:26","statements":[{"expression":{"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"13177:42:26","subExpression":{"expression":{"expression":{"id":4437,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4423,"src":"13184:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token storage pointer"}},"id":4438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"13184:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"id":4439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"dividendAmount","nodeType":"MemberAccess","referencedDeclaration":3842,"src":"13184:35:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4441,"nodeType":"ExpressionStatement","src":"13177:42:26"},{"expression":{"arguments":[{"expression":{"id":4443,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13251:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"13251:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4445,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"13263:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4446,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"13277:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4442,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"13237:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13237:55:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4448,"nodeType":"ExpressionStatement","src":"13237:55:26"},{"eventCall":{"arguments":[{"id":4450,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"13331:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4451,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"13345:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4449,"name":"HarvestDividend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"13315:15:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13315:45:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4453,"nodeType":"EmitStatement","src":"13310:50:26"},{"expression":{"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4454,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"13378:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4456,"indexExpression":{"id":4455,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"13386:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13378:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4457,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"13391:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13378:25:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4459,"nodeType":"ExpressionStatement","src":"13378:25:26"},{"expression":{"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4460,"name":"_amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"13421:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4462,"indexExpression":{"id":4461,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"13430:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13421:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4463,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"13435:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13421:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4465,"nodeType":"ExpressionStatement","src":"13421:28:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4409,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"12916:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4410,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"12920:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12916:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4469,"initializationExpression":{"assignments":[4407],"declarations":[{"constant":false,"id":4407,"mutability":"mutable","name":"i","nameLocation":"12913:1:26","nodeType":"VariableDeclaration","scope":4469,"src":"12907:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4406,"name":"uint8","nodeType":"ElementaryTypeName","src":"12907:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4408,"nodeType":"VariableDeclarationStatement","src":"12907:7:26"},"loopExpression":{"expression":{"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12934:3:26","subExpression":{"id":4412,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"12934:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4414,"nodeType":"ExpressionStatement","src":"12934:3:26"},"nodeType":"ForStatement","src":"12902:572:26"},{"expression":{"components":[{"id":4470,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"13492:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":4471,"name":"_amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"13501:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":4472,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13491:19:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(address[] memory,uint256[] memory)"}},"functionReturnParameters":4383,"id":4473,"nodeType":"Return","src":"13484:26:26"}]},"documentation":{"id":4375,"nodeType":"StructuredDocumentation","src":"12440:139:26","text":"@notice Harvests tokens dividends.\n @return The list of tokens addresses.\n @return The list of tokens' amounts harvested."},"functionSelector":"802ad8fb","id":4475,"implemented":true,"kind":"function","modifiers":[],"name":"harvestDividends","nameLocation":"12593:16:26","nodeType":"FunctionDefinition","parameters":{"id":4376,"nodeType":"ParameterList","parameters":[],"src":"12609:2:26"},"returnParameters":{"id":4383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4475,"src":"12701:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4377,"name":"address","nodeType":"ElementaryTypeName","src":"12701:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4378,"nodeType":"ArrayTypeName","src":"12701:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4475,"src":"12731:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4380,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4381,"nodeType":"ArrayTypeName","src":"12731:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12645:112:26"},"scope":5040,"src":"12584:933:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4558,"nodeType":"Block","src":"13795:554:26","statements":[{"assignments":[4489],"declarations":[{"constant":false,"id":4489,"mutability":"mutable","name":"_tokens","nameLocation":"13822:7:26","nodeType":"VariableDeclaration","scope":4558,"src":"13805:24:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4487,"name":"address","nodeType":"ElementaryTypeName","src":"13805:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4488,"nodeType":"ArrayTypeName","src":"13805:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4495,"initialValue":{"arguments":[{"id":4493,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"13846:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"13832:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":4490,"name":"address","nodeType":"ElementaryTypeName","src":"13836:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4491,"nodeType":"ArrayTypeName","src":"13836:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13832:27:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"13805:54:26"},{"assignments":[4500],"declarations":[{"constant":false,"id":4500,"mutability":"mutable","name":"_amounts","nameLocation":"13886:8:26","nodeType":"VariableDeclaration","scope":4558,"src":"13869:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4498,"name":"uint256","nodeType":"ElementaryTypeName","src":"13869:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4499,"nodeType":"ArrayTypeName","src":"13869:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4506,"initialValue":{"arguments":[{"id":4504,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"13911:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"13897:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4501,"name":"uint256","nodeType":"ElementaryTypeName","src":"13901:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4502,"nodeType":"ArrayTypeName","src":"13901:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13897:27:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"13869:55:26"},{"body":{"id":4552,"nodeType":"Block","src":"13972:334:26","statements":[{"assignments":[4517],"declarations":[{"constant":false,"id":4517,"mutability":"mutable","name":"tokenAddress","nameLocation":"13994:12:26","nodeType":"VariableDeclaration","scope":4552,"src":"13986:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4516,"name":"address","nodeType":"ElementaryTypeName","src":"13986:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4521,"initialValue":{"baseExpression":{"id":4518,"name":"_tokensList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"14009:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"}},"id":4520,"indexExpression":{"id":4519,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"14021:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14009:14:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13986:37:26"},{"assignments":[4524],"declarations":[{"constant":false,"id":4524,"mutability":"mutable","name":"token","nameLocation":"14051:5:26","nodeType":"VariableDeclaration","scope":4552,"src":"14037:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"},"typeName":{"id":4523,"nodeType":"UserDefinedTypeName","pathNode":{"id":4522,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":3859,"src":"14037:5:26"},"referencedDeclaration":3859,"src":"14037:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"}},"visibility":"internal"}],"id":4528,"initialValue":{"baseExpression":{"id":4525,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"14059:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4527,"indexExpression":{"id":4526,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"14066:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14059:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14037:42:26"},{"assignments":[4530],"declarations":[{"constant":false,"id":4530,"mutability":"mutable","name":"dividendAmount","nameLocation":"14101:14:26","nodeType":"VariableDeclaration","scope":4552,"src":"14093:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4529,"name":"uint256","nodeType":"ElementaryTypeName","src":"14093:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4534,"initialValue":{"expression":{"expression":{"id":4531,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"14118:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token storage pointer"}},"id":4532,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"14118:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"id":4533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dividendAmount","nodeType":"MemberAccess","referencedDeclaration":3842,"src":"14118:35:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14093:60:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4535,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4530,"src":"14171:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14189:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14171:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4551,"nodeType":"IfStatement","src":"14167:129:26","trueBody":{"id":4550,"nodeType":"Block","src":"14192:104:26","statements":[{"expression":{"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4538,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"14210:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4540,"indexExpression":{"id":4539,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"14218:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14210:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4541,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"14223:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14210:25:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4543,"nodeType":"ExpressionStatement","src":"14210:25:26"},{"expression":{"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4544,"name":"_amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"14253:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4546,"indexExpression":{"id":4545,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"14262:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14253:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4547,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4530,"src":"14267:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14253:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4549,"nodeType":"ExpressionStatement","src":"14253:28:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4510,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"13949:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4511,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"13953:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13949:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4553,"initializationExpression":{"assignments":[4508],"declarations":[{"constant":false,"id":4508,"mutability":"mutable","name":"i","nameLocation":"13946:1:26","nodeType":"VariableDeclaration","scope":4553,"src":"13940:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4507,"name":"uint8","nodeType":"ElementaryTypeName","src":"13940:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4509,"nodeType":"VariableDeclarationStatement","src":"13940:7:26"},"loopExpression":{"expression":{"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13967:3:26","subExpression":{"id":4513,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"13967:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4515,"nodeType":"ExpressionStatement","src":"13967:3:26"},"nodeType":"ForStatement","src":"13935:371:26"},{"expression":{"components":[{"id":4554,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"14324:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":4555,"name":"_amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"14333:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":4556,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14323:19:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(address[] memory,uint256[] memory)"}},"functionReturnParameters":4484,"id":4557,"nodeType":"Return","src":"14316:26:26"}]},"documentation":{"id":4476,"nodeType":"StructuredDocumentation","src":"13523:156:26","text":"@notice Get the available tokens dividends amounts.\n @return The list of tokens addresses.\n @return The list of tokens' amounts harvested."},"functionSelector":"ed442e14","id":4559,"implemented":true,"kind":"function","modifiers":[],"name":"getDividends","nameLocation":"13693:12:26","nodeType":"FunctionDefinition","parameters":{"id":4477,"nodeType":"ParameterList","parameters":[],"src":"13705:2:26"},"returnParameters":{"id":4484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4559,"src":"13755:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4478,"name":"address","nodeType":"ElementaryTypeName","src":"13755:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4479,"nodeType":"ArrayTypeName","src":"13755:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4559,"src":"13773:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4481,"name":"uint256","nodeType":"ElementaryTypeName","src":"13773:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4482,"nodeType":"ArrayTypeName","src":"13773:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"13754:36:26"},"scope":5040,"src":"13684:665:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4641,"nodeType":"Block","src":"14648:774:26","statements":[{"assignments":[4569],"declarations":[{"constant":false,"id":4569,"mutability":"mutable","name":"tokenHouseEdge","nameLocation":"14681:14:26","nodeType":"VariableDeclaration","scope":4641,"src":"14658:37:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"},"typeName":{"id":4568,"nodeType":"UserDefinedTypeName","pathNode":{"id":4567,"name":"HouseEdgeSplit","nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"14658:14:26"},"referencedDeclaration":3847,"src":"14658:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"}},"visibility":"internal"}],"id":4574,"initialValue":{"expression":{"baseExpression":{"id":4570,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"14698:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4572,"indexExpression":{"id":4571,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"14705:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14698:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4573,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"14698:28:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14658:68:26"},{"assignments":[4576],"declarations":[{"constant":false,"id":4576,"mutability":"mutable","name":"dividendAmount","nameLocation":"14745:14:26","nodeType":"VariableDeclaration","scope":4641,"src":"14737:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4575,"name":"uint256","nodeType":"ElementaryTypeName","src":"14737:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4584,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4577,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"14763:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4578,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"14770:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4579,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dividend","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"14770:23:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"14763:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4581,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14762:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14797:5:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"14762:40:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14737:65:26"},{"expression":{"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4585,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"14812:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"dividendAmount","nodeType":"MemberAccess","referencedDeclaration":3842,"src":"14812:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4588,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"14845:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14812:47:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4590,"nodeType":"ExpressionStatement","src":"14812:47:26"},{"assignments":[4592],"declarations":[{"constant":false,"id":4592,"mutability":"mutable","name":"bankAmount","nameLocation":"14944:10:26","nodeType":"VariableDeclaration","scope":4641,"src":"14936:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4591,"name":"uint256","nodeType":"ElementaryTypeName","src":"14936:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4600,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4593,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"14958:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4594,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"14965:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"bank","nodeType":"MemberAccess","referencedDeclaration":3834,"src":"14965:19:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"14958:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14957:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14988:5:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"14957:36:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14936:57:26"},{"assignments":[4602],"declarations":[{"constant":false,"id":4602,"mutability":"mutable","name":"treasuryAmount","nameLocation":"15012:14:26","nodeType":"VariableDeclaration","scope":4641,"src":"15004:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4601,"name":"uint256","nodeType":"ElementaryTypeName","src":"15004:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4610,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4603,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"15030:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4604,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"15037:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4605,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"treasury","nodeType":"MemberAccess","referencedDeclaration":3838,"src":"15037:23:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"15030:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4607,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15029:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15064:5:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"15029:40:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15004:65:26"},{"expression":{"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4611,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"15079:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4613,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"treasuryAmount","nodeType":"MemberAccess","referencedDeclaration":3844,"src":"15079:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4614,"name":"treasuryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"15112:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15079:47:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4616,"nodeType":"ExpressionStatement","src":"15079:47:26"},{"assignments":[4618],"declarations":[{"constant":false,"id":4618,"mutability":"mutable","name":"teamAmount","nameLocation":"15145:10:26","nodeType":"VariableDeclaration","scope":4641,"src":"15137:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4617,"name":"uint256","nodeType":"ElementaryTypeName","src":"15137:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4626,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4619,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"15159:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4620,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"15166:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4621,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"team","nodeType":"MemberAccess","referencedDeclaration":3840,"src":"15166:19:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"15159:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4623,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15158:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15189:5:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"15158:36:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15137:57:26"},{"expression":{"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4627,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"15204:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"teamAmount","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"15204:25:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4630,"name":"teamAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"15233:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15204:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4632,"nodeType":"ExpressionStatement","src":"15204:39:26"},{"eventCall":{"arguments":[{"id":4634,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"15296:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4635,"name":"bankAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4592,"src":"15315:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4636,"name":"dividendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"15339:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4637,"name":"treasuryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"15367:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4638,"name":"teamAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"15395:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4633,"name":"AllocateHouseEdgeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"15259:23:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256,uint256)"}},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15259:156:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4640,"nodeType":"EmitStatement","src":"15254:161:26"}]},"documentation":{"id":4560,"nodeType":"StructuredDocumentation","src":"14355:223:26","text":"@notice Splits the house edge fees and allocates them as dividends, to the partner, the bank, the treasury, and team.\n @param token Address of the token.\n @param fees Bet amount and bet profit fees amount."},"id":4642,"implemented":true,"kind":"function","modifiers":[],"name":"_allocateHouseEdge","nameLocation":"14592:18:26","nodeType":"FunctionDefinition","parameters":{"id":4565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"token","nameLocation":"14619:5:26","nodeType":"VariableDeclaration","scope":4642,"src":"14611:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4561,"name":"address","nodeType":"ElementaryTypeName","src":"14611:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4564,"mutability":"mutable","name":"fees","nameLocation":"14634:4:26","nodeType":"VariableDeclaration","scope":4642,"src":"14626:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4563,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14610:29:26"},"returnParameters":{"id":4566,"nodeType":"ParameterList","parameters":[],"src":"14648:0:26"},"scope":5040,"src":"14583:839:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4669,"nodeType":"Block","src":"15681:186:26","statements":[{"expression":{"arguments":[{"id":4651,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"15710:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4652,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"15717:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4650,"name":"_allocateHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"15691:18:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15691:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4654,"nodeType":"ExpressionStatement","src":"15691:31:26"},{"eventCall":{"arguments":[{"id":4656,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"15763:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4658,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"15793:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4657,"name":"getBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"15782:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15782:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"condition":{"arguments":[{"id":4661,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"15825:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4660,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"15813:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15813:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4665,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"15846:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15813:37:26","trueExpression":{"expression":{"id":4663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15834:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"15834:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4655,"name":"AccountFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"15738:11:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15738:122:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4668,"nodeType":"EmitStatement","src":"15733:127:26"}]},"documentation":{"id":4643,"nodeType":"StructuredDocumentation","src":"15428:134:26","text":"@notice Receive game's fees.\n @param token Address of the token.\n @param fees Bet amount and bet profit fees amount."},"functionSelector":"ca7a8769","id":4670,"implemented":true,"kind":"function","modifiers":[],"name":"accountFees","nameLocation":"15576:11:26","nodeType":"FunctionDefinition","parameters":{"id":4648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4645,"mutability":"mutable","name":"token","nameLocation":"15596:5:26","nodeType":"VariableDeclaration","scope":4670,"src":"15588:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4644,"name":"address","nodeType":"ElementaryTypeName","src":"15588:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4647,"mutability":"mutable","name":"fees","nameLocation":"15611:4:26","nodeType":"VariableDeclaration","scope":4670,"src":"15603:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4646,"name":"uint256","nodeType":"ElementaryTypeName","src":"15603:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15587:29:26"},"returnParameters":{"id":4649,"nodeType":"ParameterList","parameters":[],"src":"15681:0:26"},"scope":5040,"src":"15567:300:26","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4701,"nodeType":"Block","src":"16314:172:26","statements":[{"expression":{"arguments":[{"id":4683,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"16343:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4684,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"16350:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4682,"name":"_allocateHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"16324:18:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16324:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4686,"nodeType":"ExpressionStatement","src":"16324:31:26"},{"expression":{"arguments":[{"id":4688,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"16404:4:26","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4689,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"16410:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4690,"name":"profit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"16417:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4687,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"16390:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16390:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4692,"nodeType":"ExpressionStatement","src":"16390:34:26"},{"eventCall":{"arguments":[{"id":4694,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"16446:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4696,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"16464:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4695,"name":"getBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"16453:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16453:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4698,"name":"profit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"16472:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4693,"name":"Payout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"16439:6:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16439:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4700,"nodeType":"EmitStatement","src":"16434:45:26"}]},"documentation":{"id":4671,"nodeType":"StructuredDocumentation","src":"15873:275:26","text":"@notice Payouts a winning bet, and allocate the house edge fee.\n @param user Address of the gamer.\n @param token Address of the token.\n @param profit Number of tokens to be sent to the gamer.\n @param fees Bet amount and bet profit fees amount."},"functionSelector":"1f615023","id":4702,"implemented":true,"kind":"function","modifiers":[],"name":"payout","nameLocation":"16162:6:26","nodeType":"FunctionDefinition","parameters":{"id":4680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4673,"mutability":"mutable","name":"user","nameLocation":"16194:4:26","nodeType":"VariableDeclaration","scope":4702,"src":"16178:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4672,"name":"address","nodeType":"ElementaryTypeName","src":"16178:15:26","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4675,"mutability":"mutable","name":"token","nameLocation":"16216:5:26","nodeType":"VariableDeclaration","scope":4702,"src":"16208:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4674,"name":"address","nodeType":"ElementaryTypeName","src":"16208:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4677,"mutability":"mutable","name":"profit","nameLocation":"16239:6:26","nodeType":"VariableDeclaration","scope":4702,"src":"16231:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4676,"name":"uint256","nodeType":"ElementaryTypeName","src":"16231:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4679,"mutability":"mutable","name":"fees","nameLocation":"16263:4:26","nodeType":"VariableDeclaration","scope":4702,"src":"16255:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4678,"name":"uint256","nodeType":"ElementaryTypeName","src":"16255:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16168:128:26"},"returnParameters":{"id":4681,"nodeType":"ParameterList","parameters":[],"src":"16314:0:26"},"scope":5040,"src":"16153:333:26","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4724,"nodeType":"Block","src":"16906:162:26","statements":[{"eventCall":{"arguments":[{"id":4711,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"16941:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4713,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"16978:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4712,"name":"getBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"16967:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16967:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"condition":{"arguments":[{"id":4716,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"17017:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4715,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"17005:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17005:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4720,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"17045:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"17005:46:26","trueExpression":{"expression":{"id":4718,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17033:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"17033:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4710,"name":"CashIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"16921:6:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16921:140:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4723,"nodeType":"EmitStatement","src":"16916:145:26"}]},"documentation":{"id":4703,"nodeType":"StructuredDocumentation","src":"16492:291:26","text":"@notice Accounts a loss bet.\n @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\n @dev In case of the gas token, the bet amount is sent along with this tx.\n @param tokenAddress Address of the token.\n @param amount Loss bet amount."},"functionSelector":"3138809d","id":4725,"implemented":true,"kind":"function","modifiers":[],"name":"cashIn","nameLocation":"16797:6:26","nodeType":"FunctionDefinition","parameters":{"id":4708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4705,"mutability":"mutable","name":"tokenAddress","nameLocation":"16812:12:26","nodeType":"VariableDeclaration","scope":4725,"src":"16804:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4704,"name":"address","nodeType":"ElementaryTypeName","src":"16804:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4707,"mutability":"mutable","name":"amount","nameLocation":"16834:6:26","nodeType":"VariableDeclaration","scope":4725,"src":"16826:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4706,"name":"uint256","nodeType":"ElementaryTypeName","src":"16826:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16803:38:26"},"returnParameters":{"id":4709,"nodeType":"ParameterList","parameters":[],"src":"16906:0:26"},"scope":5040,"src":"16788:280:26","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4814,"nodeType":"Block","src":"17173:977:26","statements":[{"assignments":[4737],"declarations":[{"constant":false,"id":4737,"mutability":"mutable","name":"_tokens","nameLocation":"17206:7:26","nodeType":"VariableDeclaration","scope":4814,"src":"17183:30:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr","typeString":"struct BankV2.TokenMetadata[]"},"typeName":{"baseType":{"id":4735,"nodeType":"UserDefinedTypeName","pathNode":{"id":4734,"name":"TokenMetadata","nodeType":"IdentifierPath","referencedDeclaration":3871,"src":"17183:13:26"},"referencedDeclaration":3871,"src":"17183:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_storage_ptr","typeString":"struct BankV2.TokenMetadata"}},"id":4736,"nodeType":"ArrayTypeName","src":"17183:15:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_storage_$dyn_storage_ptr","typeString":"struct BankV2.TokenMetadata[]"}},"visibility":"internal"}],"id":4744,"initialValue":{"arguments":[{"id":4742,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17236:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17216:19:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct BankV2.TokenMetadata memory[] memory)"},"typeName":{"baseType":{"id":4739,"nodeType":"UserDefinedTypeName","pathNode":{"id":4738,"name":"TokenMetadata","nodeType":"IdentifierPath","referencedDeclaration":3871,"src":"17220:13:26"},"referencedDeclaration":3871,"src":"17220:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_storage_ptr","typeString":"struct BankV2.TokenMetadata"}},"id":4740,"nodeType":"ArrayTypeName","src":"17220:15:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_storage_$dyn_storage_ptr","typeString":"struct BankV2.TokenMetadata[]"}}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17216:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr","typeString":"struct BankV2.TokenMetadata memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17183:66:26"},{"body":{"id":4810,"nodeType":"Block","src":"17296:824:26","statements":[{"assignments":[4755],"declarations":[{"constant":false,"id":4755,"mutability":"mutable","name":"tokenAddress","nameLocation":"17318:12:26","nodeType":"VariableDeclaration","scope":4810,"src":"17310:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4754,"name":"address","nodeType":"ElementaryTypeName","src":"17310:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4759,"initialValue":{"baseExpression":{"id":4756,"name":"_tokensList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"17333:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_address_$","typeString":"mapping(uint8 => address)"}},"id":4758,"indexExpression":{"id":4757,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"17345:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17333:14:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17310:37:26"},{"assignments":[4762],"declarations":[{"constant":false,"id":4762,"mutability":"mutable","name":"token","nameLocation":"17374:5:26","nodeType":"VariableDeclaration","scope":4810,"src":"17361:18:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token"},"typeName":{"id":4761,"nodeType":"UserDefinedTypeName","pathNode":{"id":4760,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":3859,"src":"17361:5:26"},"referencedDeclaration":3859,"src":"17361:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"}},"visibility":"internal"}],"id":4766,"initialValue":{"baseExpression":{"id":4763,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"17382:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4765,"indexExpression":{"id":4764,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"17389:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17382:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17361:41:26"},{"condition":{"arguments":[{"id":4768,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"17432:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4767,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"17420:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17420:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4808,"nodeType":"Block","src":"17716:394:26","statements":[{"assignments":[4785],"declarations":[{"constant":false,"id":4785,"mutability":"mutable","name":"erc20Metadata","nameLocation":"17749:13:26","nodeType":"VariableDeclaration","scope":4808,"src":"17734:28:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1147","typeString":"contract IERC20Metadata"},"typeName":{"id":4784,"nodeType":"UserDefinedTypeName","pathNode":{"id":4783,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":1147,"src":"17734:14:26"},"referencedDeclaration":1147,"src":"17734:14:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1147","typeString":"contract IERC20Metadata"}},"visibility":"internal"}],"id":4789,"initialValue":{"arguments":[{"id":4787,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"17780:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4786,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"17765:14:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$1147_$","typeString":"type(contract IERC20Metadata)"}},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17765:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1147","typeString":"contract IERC20Metadata"}},"nodeType":"VariableDeclarationStatement","src":"17734:59:26"},{"expression":{"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4790,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"17811:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr","typeString":"struct BankV2.TokenMetadata memory[] memory"}},"id":4792,"indexExpression":{"id":4791,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"17819:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17811:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_memory_ptr","typeString":"struct BankV2.TokenMetadata memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4794,"name":"erc20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"17870:13:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1147","typeString":"contract IERC20Metadata"}},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":1146,"src":"17870:22:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17870:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4797,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"17930:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4798,"name":"erc20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"17970:13:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1147","typeString":"contract IERC20Metadata"}},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"name","nodeType":"MemberAccess","referencedDeclaration":1134,"src":"17970:18:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17970:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4801,"name":"erc20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"18020:13:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1147","typeString":"contract IERC20Metadata"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":1140,"src":"18020:20:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18020:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4804,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4762,"src":"18071:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token memory"}],"id":4793,"name":"TokenMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"17824:13:26","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_TokenMetadata_$3871_storage_ptr_$","typeString":"type(struct BankV2.TokenMetadata storage pointer)"}},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["decimals","tokenAddress","name","symbol","token"],"nodeType":"FunctionCall","src":"17824:271:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_memory_ptr","typeString":"struct BankV2.TokenMetadata memory"}},"src":"17811:284:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_memory_ptr","typeString":"struct BankV2.TokenMetadata memory"}},"id":4807,"nodeType":"ExpressionStatement","src":"17811:284:26"}]},"id":4809,"nodeType":"IfStatement","src":"17416:694:26","trueBody":{"id":4782,"nodeType":"Block","src":"17447:263:26","statements":[{"expression":{"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4770,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"17465:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr","typeString":"struct BankV2.TokenMetadata memory[] memory"}},"id":4772,"indexExpression":{"id":4771,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"17473:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17465:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_memory_ptr","typeString":"struct BankV2.TokenMetadata memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"3138","id":4774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17524:2:26","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},{"id":4775,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"17562:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"455448","id":4776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17602:5:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4","typeString":"literal_string \"ETH\""},"value":"ETH"},{"hexValue":"455448","id":4777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17637:5:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4","typeString":"literal_string \"ETH\""},"value":"ETH"},{"id":4778,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4762,"src":"17671:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4","typeString":"literal_string \"ETH\""},{"typeIdentifier":"t_stringliteral_aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4","typeString":"literal_string \"ETH\""},{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token memory"}],"id":4773,"name":"TokenMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"17478:13:26","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_TokenMetadata_$3871_storage_ptr_$","typeString":"type(struct BankV2.TokenMetadata storage pointer)"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["decimals","tokenAddress","name","symbol","token"],"nodeType":"FunctionCall","src":"17478:217:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_memory_ptr","typeString":"struct BankV2.TokenMetadata memory"}},"src":"17465:230:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_memory_ptr","typeString":"struct BankV2.TokenMetadata memory"}},"id":4781,"nodeType":"ExpressionStatement","src":"17465:230:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4748,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"17273:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4749,"name":"_tokensCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17277:12:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17273:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4811,"initializationExpression":{"assignments":[4746],"declarations":[{"constant":false,"id":4746,"mutability":"mutable","name":"i","nameLocation":"17270:1:26","nodeType":"VariableDeclaration","scope":4811,"src":"17264:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4745,"name":"uint8","nodeType":"ElementaryTypeName","src":"17264:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4747,"nodeType":"VariableDeclarationStatement","src":"17264:7:26"},"loopExpression":{"expression":{"id":4752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17291:3:26","subExpression":{"id":4751,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"17291:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4753,"nodeType":"ExpressionStatement","src":"17291:3:26"},"nodeType":"ForStatement","src":"17259:861:26"},{"expression":{"id":4812,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"18136:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr","typeString":"struct BankV2.TokenMetadata memory[] memory"}},"functionReturnParameters":4732,"id":4813,"nodeType":"Return","src":"18129:14:26"}]},"documentation":{"id":4726,"nodeType":"StructuredDocumentation","src":"17074:26:26","text":"@dev For the front-end"},"functionSelector":"aa6ca808","id":4815,"implemented":true,"kind":"function","modifiers":[],"name":"getTokens","nameLocation":"17114:9:26","nodeType":"FunctionDefinition","parameters":{"id":4727,"nodeType":"ParameterList","parameters":[],"src":"17123:2:26"},"returnParameters":{"id":4732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4815,"src":"17149:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr","typeString":"struct BankV2.TokenMetadata[]"},"typeName":{"baseType":{"id":4729,"nodeType":"UserDefinedTypeName","pathNode":{"id":4728,"name":"TokenMetadata","nodeType":"IdentifierPath","referencedDeclaration":3871,"src":"17149:13:26"},"referencedDeclaration":3871,"src":"17149:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenMetadata_$3871_storage_ptr","typeString":"struct BankV2.TokenMetadata"}},"id":4730,"nodeType":"ArrayTypeName","src":"17149:15:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenMetadata_$3871_storage_$dyn_storage_ptr","typeString":"struct BankV2.TokenMetadata[]"}},"visibility":"internal"}],"src":"17148:24:26"},"scope":5040,"src":"17105:1045:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4839,"nodeType":"Block","src":"18507:135:26","statements":[{"expression":{"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4823,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"18517:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":4824,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"18532:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4826,"indexExpression":{"id":4825,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"18539:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18532:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"minBetAmount","nodeType":"MemberAccess","referencedDeclaration":3855,"src":"18532:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18517:41:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4829,"nodeType":"ExpressionStatement","src":"18517:41:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4830,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"18572:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18588:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18572:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4838,"nodeType":"IfStatement","src":"18568:68:26","trueBody":{"id":4837,"nodeType":"Block","src":"18591:45:26","statements":[{"expression":{"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4833,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"18605:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130303030","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18620:5:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"18605:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4836,"nodeType":"ExpressionStatement","src":"18605:20:26"}]}}]},"documentation":{"id":4816,"nodeType":"StructuredDocumentation","src":"18156:233:26","text":"@notice Gets the token's min bet amount.\n @param token Address of the token.\n @return minBetAmount Min bet amount.\n @dev The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation."},"functionSelector":"f6b2a2f1","id":4840,"implemented":true,"kind":"function","modifiers":[],"name":"getMinBetAmount","nameLocation":"18403:15:26","nodeType":"FunctionDefinition","parameters":{"id":4819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4818,"mutability":"mutable","name":"token","nameLocation":"18427:5:26","nodeType":"VariableDeclaration","scope":4840,"src":"18419:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4817,"name":"address","nodeType":"ElementaryTypeName","src":"18419:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18418:15:26"},"returnParameters":{"id":4822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"minBetAmount","nameLocation":"18489:12:26","nodeType":"VariableDeclaration","scope":4840,"src":"18481:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4820,"name":"uint256","nodeType":"ElementaryTypeName","src":"18481:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18480:22:26"},"scope":5040,"src":"18394:248:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4862,"nodeType":"Block","src":"19145:84:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4851,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"19174:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4850,"name":"getBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"19163:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19163:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"baseExpression":{"id":4853,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"19183:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4855,"indexExpression":{"id":4854,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"19190:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19183:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4856,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balanceRisk","nodeType":"MemberAccess","referencedDeclaration":3853,"src":"19183:25:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"19163:45:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4858,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19162:47:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4859,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"19212:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19162:60:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4849,"id":4861,"nodeType":"Return","src":"19155:67:26"}]},"documentation":{"id":4841,"nodeType":"StructuredDocumentation","src":"18648:372:26","text":"@notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\n @param token Address of the token.\n @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\n @return Maximum bet amount for the token.\n @dev The multiplier should be at least 10000."},"functionSelector":"278b39de","id":4863,"implemented":true,"kind":"function","modifiers":[],"name":"getMaxBetAmount","nameLocation":"19034:15:26","nodeType":"FunctionDefinition","parameters":{"id":4846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"mutability":"mutable","name":"token","nameLocation":"19058:5:26","nodeType":"VariableDeclaration","scope":4863,"src":"19050:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4842,"name":"address","nodeType":"ElementaryTypeName","src":"19050:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4845,"mutability":"mutable","name":"multiplier","nameLocation":"19073:10:26","nodeType":"VariableDeclaration","scope":4863,"src":"19065:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4844,"name":"uint256","nodeType":"ElementaryTypeName","src":"19065:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19049:35:26"},"returnParameters":{"id":4849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4863,"src":"19132:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4847,"name":"uint256","nodeType":"ElementaryTypeName","src":"19132:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19131:9:26"},"scope":5040,"src":"19025:204:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4885,"nodeType":"Block","src":"19496:105:26","statements":[{"assignments":[4873],"declarations":[{"constant":false,"id":4873,"mutability":"mutable","name":"token","nameLocation":"19519:5:26","nodeType":"VariableDeclaration","scope":4885,"src":"19506:18:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token"},"typeName":{"id":4872,"nodeType":"UserDefinedTypeName","pathNode":{"id":4871,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":3859,"src":"19506:5:26"},"referencedDeclaration":3859,"src":"19506:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage_ptr","typeString":"struct BankV2.Token"}},"visibility":"internal"}],"id":4877,"initialValue":{"baseExpression":{"id":4874,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"19527:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4876,"indexExpression":{"id":4875,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4866,"src":"19534:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19527:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19506:41:26"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4878,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"19564:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token memory"}},"id":4879,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"allowed","nodeType":"MemberAccess","referencedDeclaration":3849,"src":"19564:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"19581:13:26","subExpression":{"expression":{"id":4880,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"19582:5:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_memory_ptr","typeString":"struct BankV2.Token memory"}},"id":4881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"paused","nodeType":"MemberAccess","referencedDeclaration":3851,"src":"19582:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"19564:30:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4870,"id":4884,"nodeType":"Return","src":"19557:37:26"}]},"documentation":{"id":4864,"nodeType":"StructuredDocumentation","src":"19235:181:26","text":"@notice Gets the token's allow status used on the games smart contracts.\n @param tokenAddress Address of the token.\n @return Whether the token is enabled for bets."},"functionSelector":"cbe230c3","id":4886,"implemented":true,"kind":"function","modifiers":[],"name":"isAllowedToken","nameLocation":"19430:14:26","nodeType":"FunctionDefinition","parameters":{"id":4867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4866,"mutability":"mutable","name":"tokenAddress","nameLocation":"19453:12:26","nodeType":"VariableDeclaration","scope":4886,"src":"19445:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4865,"name":"address","nodeType":"ElementaryTypeName","src":"19445:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19444:22:26"},"returnParameters":{"id":4870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4886,"src":"19490:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4868,"name":"bool","nodeType":"ElementaryTypeName","src":"19490:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19489:6:26"},"scope":5040,"src":"19421:180:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4911,"nodeType":"Block","src":"20235:167:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4892,"name":"_teamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"20249:11:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20272:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20264:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4893,"name":"address","nodeType":"ElementaryTypeName","src":"20264:7:26","typeDescriptions":{}}},"id":4896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20264:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20249:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4902,"nodeType":"IfStatement","src":"20245:77:26","trueBody":{"id":4901,"nodeType":"Block","src":"20276:46:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4898,"name":"WrongAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"20297:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20297:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4900,"nodeType":"RevertStatement","src":"20290:21:26"}]}},{"expression":{"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4903,"name":"teamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"20331:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4904,"name":"_teamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"20344:11:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20331:24:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4906,"nodeType":"ExpressionStatement","src":"20331:24:26"},{"eventCall":{"arguments":[{"id":4908,"name":"teamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"20384:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4907,"name":"SetTeamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"20370:13:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20370:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4910,"nodeType":"EmitStatement","src":"20365:30:26"}]},"documentation":{"id":4887,"nodeType":"StructuredDocumentation","src":"20042:89:26","text":"@notice Sets the new team wallet.\n @param _teamWallet The team wallet address."},"functionSelector":"1525ff7d","id":4912,"implemented":true,"kind":"function","modifiers":[],"name":"setTeamWallet","nameLocation":"20145:13:26","nodeType":"FunctionDefinition","parameters":{"id":4890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4889,"mutability":"mutable","name":"_teamWallet","nameLocation":"20167:11:26","nodeType":"VariableDeclaration","scope":4912,"src":"20159:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4888,"name":"address","nodeType":"ElementaryTypeName","src":"20159:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"20158:21:26"},"returnParameters":{"id":4891,"nodeType":"ParameterList","parameters":[],"src":"20235:0:26"},"scope":5040,"src":"20136:266:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4981,"nodeType":"Block","src":"20599:747:26","statements":[{"assignments":[4920],"declarations":[{"constant":false,"id":4920,"mutability":"mutable","name":"tokenHouseEdge","nameLocation":"20632:14:26","nodeType":"VariableDeclaration","scope":4981,"src":"20609:37:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"},"typeName":{"id":4919,"nodeType":"UserDefinedTypeName","pathNode":{"id":4918,"name":"HouseEdgeSplit","nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"20609:14:26"},"referencedDeclaration":3847,"src":"20609:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"}},"visibility":"internal"}],"id":4925,"initialValue":{"expression":{"baseExpression":{"id":4921,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"20649:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":4923,"indexExpression":{"id":4922,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"20656:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20649:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":4924,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"20649:48:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"20609:88:26"},{"assignments":[4927],"declarations":[{"constant":false,"id":4927,"mutability":"mutable","name":"treasuryAmount","nameLocation":"20715:14:26","nodeType":"VariableDeclaration","scope":4981,"src":"20707:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4926,"name":"uint256","nodeType":"ElementaryTypeName","src":"20707:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4930,"initialValue":{"expression":{"id":4928,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"20732:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"treasuryAmount","nodeType":"MemberAccess","referencedDeclaration":3844,"src":"20732:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20707:54:26"},{"assignments":[4932],"declarations":[{"constant":false,"id":4932,"mutability":"mutable","name":"teamAmount","nameLocation":"20779:10:26","nodeType":"VariableDeclaration","scope":4981,"src":"20771:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4931,"name":"uint256","nodeType":"ElementaryTypeName","src":"20771:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4935,"initialValue":{"expression":{"id":4933,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"20792:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"teamAmount","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"20792:25:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20771:46:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4936,"name":"treasuryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"20831:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20849:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20831:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4950,"nodeType":"IfStatement","src":"20827:153:26","trueBody":{"id":4949,"nodeType":"Block","src":"20852:128:26","statements":[{"expression":{"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"20866:36:26","subExpression":{"expression":{"id":4939,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"20873:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4940,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"treasuryAmount","nodeType":"MemberAccess","referencedDeclaration":3844,"src":"20873:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4942,"nodeType":"ExpressionStatement","src":"20866:36:26"},{"expression":{"arguments":[{"id":4944,"name":"treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"20930:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4945,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"20940:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4946,"name":"treasuryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"20954:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4943,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"20916:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20916:53:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4948,"nodeType":"ExpressionStatement","src":"20916:53:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4951,"name":"teamAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"20993:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21007:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20993:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4965,"nodeType":"IfStatement","src":"20989:143:26","trueBody":{"id":4964,"nodeType":"Block","src":"21010:122:26","statements":[{"expression":{"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"21024:32:26","subExpression":{"expression":{"id":4954,"name":"tokenHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"21031:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit storage pointer"}},"id":4955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"teamAmount","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"21031:25:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4957,"nodeType":"ExpressionStatement","src":"21024:32:26"},{"expression":{"arguments":[{"id":4959,"name":"teamWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"21084:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4960,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"21096:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4961,"name":"teamAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"21110:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4958,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"21070:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21070:51:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4963,"nodeType":"ExpressionStatement","src":"21070:51:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4966,"name":"treasuryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"21145:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21163:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21145:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4969,"name":"teamAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"21168:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21182:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21168:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"21145:38:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4980,"nodeType":"IfStatement","src":"21141:199:26","trueBody":{"id":4979,"nodeType":"Block","src":"21185:155:26","statements":[{"eventCall":{"arguments":[{"id":4974,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"21243:12:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4975,"name":"treasuryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"21273:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4976,"name":"teamAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"21305:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4973,"name":"HouseEdgeDistribution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"21204:21:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21204:125:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4978,"nodeType":"EmitStatement","src":"21199:130:26"}]}}]},"documentation":{"id":4913,"nodeType":"StructuredDocumentation","src":"20408:124:26","text":"@notice Distributes the token's treasury and team allocations amounts.\n @param tokenAddress Address of the token."},"functionSelector":"0ae30cb0","id":4982,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawHouseEdgeAmount","nameLocation":"20546:23:26","nodeType":"FunctionDefinition","parameters":{"id":4916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4915,"mutability":"mutable","name":"tokenAddress","nameLocation":"20578:12:26","nodeType":"VariableDeclaration","scope":4982,"src":"20570:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4914,"name":"address","nodeType":"ElementaryTypeName","src":"20570:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"20569:22:26"},"returnParameters":{"id":4917,"nodeType":"ParameterList","parameters":[],"src":"20599:0:26"},"scope":5040,"src":"20537:809:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5038,"nodeType":"Block","src":"21644:474:26","statements":[{"assignments":[4991],"declarations":[{"constant":false,"id":4991,"mutability":"mutable","name":"balance","nameLocation":"21662:7:26","nodeType":"VariableDeclaration","scope":5038,"src":"21654:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4990,"name":"uint256","nodeType":"ElementaryTypeName","src":"21654:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4992,"nodeType":"VariableDeclarationStatement","src":"21654:15:26"},{"condition":{"arguments":[{"id":4994,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"21695:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4993,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"21683:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21683:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5017,"nodeType":"Block","src":"21765:73:26","statements":[{"expression":{"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5005,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"21779:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5012,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"21821:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_BankV2_$5040","typeString":"contract BankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BankV2_$5040","typeString":"contract BankV2"}],"id":5011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21813:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5010,"name":"address","nodeType":"ElementaryTypeName","src":"21813:7:26","typeDescriptions":{}}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21813:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":5007,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"21796:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5006,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"21789:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21789:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1079,"src":"21789:23:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21789:38:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21779:48:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5016,"nodeType":"ExpressionStatement","src":"21779:48:26"}]},"id":5018,"nodeType":"IfStatement","src":"21679:159:26","trueBody":{"id":5004,"nodeType":"Block","src":"21703:56:26","statements":[{"expression":{"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4996,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"21717:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":4999,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"21735:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_BankV2_$5040","typeString":"contract BankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BankV2_$5040","typeString":"contract BankV2"}],"id":4998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21727:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4997,"name":"address","nodeType":"ElementaryTypeName","src":"21727:7:26","typeDescriptions":{}}},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21727:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"21727:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21717:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5003,"nodeType":"ExpressionStatement","src":"21717:31:26"}]}},{"assignments":[5021],"declarations":[{"constant":false,"id":5021,"mutability":"mutable","name":"tokenHouseEdgeSplit","nameLocation":"21869:19:26","nodeType":"VariableDeclaration","scope":5038,"src":"21847:41:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_memory_ptr","typeString":"struct BankV2.HouseEdgeSplit"},"typeName":{"id":5020,"nodeType":"UserDefinedTypeName","pathNode":{"id":5019,"name":"HouseEdgeSplit","nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"21847:14:26"},"referencedDeclaration":3847,"src":"21847:14:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage_ptr","typeString":"struct BankV2.HouseEdgeSplit"}},"visibility":"internal"}],"id":5026,"initialValue":{"expression":{"baseExpression":{"id":5022,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"21891:6:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$3859_storage_$","typeString":"mapping(address => struct BankV2.Token storage ref)"}},"id":5024,"indexExpression":{"id":5023,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"21898:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21891:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$3859_storage","typeString":"struct BankV2.Token storage ref"}},"id":5025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdgeSplit","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"21891:41:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_storage","typeString":"struct BankV2.HouseEdgeSplit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21847:85:26"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5027,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"21961:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5028,"name":"tokenHouseEdgeSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"21983:19:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_memory_ptr","typeString":"struct BankV2.HouseEdgeSplit memory"}},"id":5029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dividendAmount","nodeType":"MemberAccess","referencedDeclaration":3842,"src":"21983:34:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21961:56:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5031,"name":"tokenHouseEdgeSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"22032:19:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_memory_ptr","typeString":"struct BankV2.HouseEdgeSplit memory"}},"id":5032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"treasuryAmount","nodeType":"MemberAccess","referencedDeclaration":3844,"src":"22032:34:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21961:105:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5034,"name":"tokenHouseEdgeSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"22081:19:26","typeDescriptions":{"typeIdentifier":"t_struct$_HouseEdgeSplit_$3847_memory_ptr","typeString":"struct BankV2.HouseEdgeSplit memory"}},"id":5035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"teamAmount","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"22081:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21961:150:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4989,"id":5037,"nodeType":"Return","src":"21942:169:26"}]},"documentation":{"id":4983,"nodeType":"StructuredDocumentation","src":"21352:222:26","text":"@notice Gets the token's balance.\n The token's house edge allocation amounts are subtracted from the balance.\n @param token Address of the token.\n @return The amount of token available for profits."},"functionSelector":"f8b2cb4f","id":5039,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"21588:10:26","nodeType":"FunctionDefinition","parameters":{"id":4986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4985,"mutability":"mutable","name":"token","nameLocation":"21607:5:26","nodeType":"VariableDeclaration","scope":5039,"src":"21599:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4984,"name":"address","nodeType":"ElementaryTypeName","src":"21599:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21598:15:26"},"returnParameters":{"id":4989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5039,"src":"21635:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4987,"name":"uint256","nodeType":"ElementaryTypeName","src":"21635:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21634:9:26"},"scope":5040,"src":"21579:539:26","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5041,"src":"514:21606:26","usedErrors":[4002,4007,4010,4013,4016,4019]}],"src":"32:22089:26"},"id":26},"contracts/CoinToss.sol":{"ast":{"absolutePath":"contracts/CoinToss.sol","exportedSymbols":{"CoinTossV5":[6125],"IBankV2":[7313],"IERC20":[1122],"Multicall":[1966],"Ownable":[871],"Pausable":[979],"ReentrancyGuard":[1044],"SafeERC20":[1559],"VRFConsumerBaseV2":[104],"VRFCoordinatorV2Interface":[219]},"id":6126,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5042,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5044,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":872,"src":"57:67:27","symbolAliases":[{"foreign":{"id":5043,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"65:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Ownable_$871_$","typeString":"type(contract Ownable)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Multicall.sol","file":"@openzeppelin/contracts/utils/Multicall.sol","id":5046,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":1967,"src":"125:70:27","symbolAliases":[{"foreign":{"id":5045,"name":"Multicall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"133:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Multicall_$1966_$","typeString":"type(contract Multicall)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"@openzeppelin/contracts/security/Pausable.sol","id":5048,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":980,"src":"196:71:27","symbolAliases":[{"foreign":{"id":5047,"name":"Pausable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"204:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Pausable_$979_$","typeString":"type(contract Pausable)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":5051,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":1560,"src":"268:90:27","symbolAliases":[{"foreign":{"id":5049,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"276:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5050,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"284:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20_$1559_$","typeString":"type(library SafeERC20)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":5053,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":1045,"src":"359:85:27","symbolAliases":[{"foreign":{"id":5052,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"367:15:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ReentrancyGuard_$1044_$","typeString":"type(contract ReentrancyGuard)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":5054,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":220,"src":"446:80:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":5055,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":105,"src":"527:61:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interface/IBankV2.sol","file":"./interface/IBankV2.sol","id":5057,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6126,"sourceUnit":7314,"src":"590:48:27","symbolAliases":[{"foreign":{"id":5056,"name":"IBankV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"598:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBankV2_$7313_$","typeString":"type(contract IBankV2)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5058,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":104,"src":"712:17:27"},"id":5059,"nodeType":"InheritanceSpecifier","src":"712:17:27"},{"baseName":{"id":5060,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":871,"src":"735:7:27"},"id":5061,"nodeType":"InheritanceSpecifier","src":"735:7:27"},{"baseName":{"id":5062,"name":"Pausable","nodeType":"IdentifierPath","referencedDeclaration":979,"src":"748:8:27"},"id":5063,"nodeType":"InheritanceSpecifier","src":"748:8:27"},{"baseName":{"id":5064,"name":"Multicall","nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"762:9:27"},"id":5065,"nodeType":"InheritanceSpecifier","src":"762:9:27"},{"baseName":{"id":5066,"name":"ReentrancyGuard","nodeType":"IdentifierPath","referencedDeclaration":1044,"src":"777:15:27"},"id":5067,"nodeType":"InheritanceSpecifier","src":"777:15:27"}],"canonicalName":"CoinTossV5","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6125,"linearizedBaseContracts":[6125,1044,1966,979,871,1911,104],"name":"CoinTossV5","nameLocation":"694:10:27","nodeType":"ContractDefinition","nodes":[{"id":5071,"libraryName":{"id":5068,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1559,"src":"805:9:27"},"nodeType":"UsingForDirective","src":"799:27:27","typeName":{"id":5070,"nodeType":"UserDefinedTypeName","pathNode":{"id":5069,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"819:6:27"},"referencedDeclaration":1122,"src":"819:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"76cdb03b","id":5074,"mutability":"mutable","name":"bank","nameLocation":"846:4:27","nodeType":"VariableDeclaration","scope":6125,"src":"831:19:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"},"typeName":{"id":5073,"nodeType":"UserDefinedTypeName","pathNode":{"id":5072,"name":"IBankV2","nodeType":"IdentifierPath","referencedDeclaration":7313,"src":"831:7:27"},"referencedDeclaration":7313,"src":"831:7:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"visibility":"public"},{"constant":false,"id":5076,"mutability":"mutable","name":"s_subscriptionId","nameLocation":"864:16:27","nodeType":"VariableDeclaration","scope":6125,"src":"857:23:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5075,"name":"uint64","nodeType":"ElementaryTypeName","src":"857:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5079,"mutability":"mutable","name":"COORDINATOR","nameLocation":"913:11:27","nodeType":"VariableDeclaration","scope":6125,"src":"887:37:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":5078,"nodeType":"UserDefinedTypeName","pathNode":{"id":5077,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":219,"src":"887:25:27"},"referencedDeclaration":219,"src":"887:25:27","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"internal"},{"constant":false,"id":5082,"mutability":"mutable","name":"vrfCoordinator","nameLocation":"939:14:27","nodeType":"VariableDeclaration","scope":6125,"src":"931:67:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5080,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862643133663038623833353241333633353231386162393431384533343063363064364562343138","id":5081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"956:42:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbd13f08b8352A3635218ab9418E340c60d6Eb418"},"visibility":"internal"},{"constant":false,"id":5085,"mutability":"mutable","name":"keyHash","nameLocation":"1219:7:27","nodeType":"VariableDeclaration","scope":6125,"src":"1211:92:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1211:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307831323161313433303636653066326630386236323037383461663737636363623335633632343234363062346138656532353162346234313661626165626434","id":5084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1237:66:27","typeDescriptions":{"typeIdentifier":"t_rational_8187708638021801212127066638579471321700834395232224440760253399419588373460_by_1","typeString":"int_const 8187...(68 digits omitted)...3460"},"value":"0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4"},"visibility":"internal"},{"constant":false,"id":5088,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1317:16:27","nodeType":"VariableDeclaration","scope":6125,"src":"1310:32:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5086,"name":"uint32","nodeType":"ElementaryTypeName","src":"1310:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"323030303030","id":5087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:6:27","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200000"},"visibility":"internal"},{"constant":false,"id":5091,"mutability":"mutable","name":"requestConfirmations","nameLocation":"1410:20:27","nodeType":"VariableDeclaration","scope":6125,"src":"1403:31:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5089,"name":"uint16","nodeType":"ElementaryTypeName","src":"1403:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":5090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1433:1:27","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":false,"id":5094,"mutability":"mutable","name":"numWords","nameLocation":"1567:8:27","nodeType":"VariableDeclaration","scope":6125,"src":"1560:19:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5092,"name":"uint32","nodeType":"ElementaryTypeName","src":"1560:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"32","id":5093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1578:1:27","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":false,"functionSelector":"1d3c7b91","id":5096,"mutability":"mutable","name":"s_randomWords","nameLocation":"1601:13:27","nodeType":"VariableDeclaration","scope":6125,"src":"1586:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5095,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e89e106a","id":5098,"mutability":"mutable","name":"s_requestId","nameLocation":"1635:11:27","nodeType":"VariableDeclaration","scope":6125,"src":"1620:26:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5097,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e3978240","id":5100,"mutability":"mutable","name":"s_owner","nameLocation":"1667:7:27","nodeType":"VariableDeclaration","scope":6125,"src":"1652:22:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5099,"name":"address","nodeType":"ElementaryTypeName","src":"1652:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":5101,"nodeType":"StructuredDocumentation","src":"1681:92:27","text":"@notice Emitted after the bank is set.\n @param bank Address of the bank contract."},"id":5105,"name":"SetBank","nameLocation":"1784:7:27","nodeType":"EventDefinition","parameters":{"id":5104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"indexed":false,"mutability":"mutable","name":"bank","nameLocation":"1800:4:27","nodeType":"VariableDeclaration","scope":5105,"src":"1792:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5102,"name":"address","nodeType":"ElementaryTypeName","src":"1792:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1791:14:27"},"src":"1778:28:27"},{"anonymous":false,"documentation":{"id":5106,"nodeType":"StructuredDocumentation","src":"1811:145:27","text":"@notice Emitted after the house edge is set for a token.\n @param token Address of the token.\n @param houseEdge House edge rate."},"id":5112,"name":"SetHouseEdge","nameLocation":"1967:12:27","nodeType":"EventDefinition","parameters":{"id":5111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5108,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1996:5:27","nodeType":"VariableDeclaration","scope":5112,"src":"1980:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5107,"name":"address","nodeType":"ElementaryTypeName","src":"1980:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5110,"indexed":false,"mutability":"mutable","name":"houseEdge","nameLocation":"2010:9:27","nodeType":"VariableDeclaration","scope":5112,"src":"2003:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5109,"name":"uint16","nodeType":"ElementaryTypeName","src":"2003:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1979:41:27"},"src":"1961:60:27"},{"id":5114,"name":"ExcessiveHouseEdge","nameLocation":"2033:18:27","nodeType":"ErrorDefinition","parameters":{"id":5113,"nodeType":"ParameterList","parameters":[],"src":"2051:2:27"},"src":"2027:27:27"},{"id":5116,"name":"ForbiddenToken","nameLocation":"2065:14:27","nodeType":"ErrorDefinition","parameters":{"id":5115,"nodeType":"ParameterList","parameters":[],"src":"2079:2:27"},"src":"2059:23:27"},{"id":5118,"name":"WrongGasValueToCoverFee","nameLocation":"2093:23:27","nodeType":"ErrorDefinition","parameters":{"id":5117,"nodeType":"ParameterList","parameters":[],"src":"2116:2:27"},"src":"2087:32:27"},{"id":5120,"name":"AccessDenied","nameLocation":"2130:12:27","nodeType":"ErrorDefinition","parameters":{"id":5119,"nodeType":"ParameterList","parameters":[],"src":"2142:2:27"},"src":"2124:21:27"},{"id":5122,"name":"InvalidAddress","nameLocation":"2156:14:27","nodeType":"ErrorDefinition","parameters":{"id":5121,"nodeType":"ParameterList","parameters":[],"src":"2170:2:27"},"src":"2150:23:27"},{"id":5124,"name":"TokenHasPendingBets","nameLocation":"2184:19:27","nodeType":"ErrorDefinition","parameters":{"id":5123,"nodeType":"ParameterList","parameters":[],"src":"2203:2:27"},"src":"2178:28:27"},{"canonicalName":"CoinTossV5.Token","id":5129,"members":[{"constant":false,"id":5126,"mutability":"mutable","name":"houseEdge","nameLocation":"2242:9:27","nodeType":"VariableDeclaration","scope":5129,"src":"2235:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5125,"name":"uint16","nodeType":"ElementaryTypeName","src":"2235:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5128,"mutability":"mutable","name":"pendingCount","nameLocation":"2268:12:27","nodeType":"VariableDeclaration","scope":5129,"src":"2261:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5127,"name":"uint64","nodeType":"ElementaryTypeName","src":"2261:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"Token","nameLocation":"2219:5:27","nodeType":"StructDefinition","scope":6125,"src":"2212:75:27","visibility":"public"},{"constant":false,"documentation":{"id":5130,"nodeType":"StructuredDocumentation","src":"2292:57:27","text":"@notice Maps tokens addresses to token configuration."},"functionSelector":"e4860339","id":5135,"mutability":"mutable","name":"tokens","nameLocation":"2387:6:27","nodeType":"VariableDeclaration","scope":6125,"src":"2354:39:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token)"},"typeName":{"id":5134,"keyType":{"id":5131,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2354:25:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token)"},"valueType":{"id":5133,"nodeType":"UserDefinedTypeName","pathNode":{"id":5132,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":5129,"src":"2373:5:27"},"referencedDeclaration":5129,"src":"2373:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token"}}},"visibility":"public"},{"canonicalName":"CoinTossV5.Bet","id":5150,"members":[{"constant":false,"id":5137,"mutability":"mutable","name":"resolved","nameLocation":"2426:8:27","nodeType":"VariableDeclaration","scope":5150,"src":"2421:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5136,"name":"bool","nodeType":"ElementaryTypeName","src":"2421:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5139,"mutability":"mutable","name":"user","nameLocation":"2460:4:27","nodeType":"VariableDeclaration","scope":5150,"src":"2444:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5138,"name":"address","nodeType":"ElementaryTypeName","src":"2444:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":5141,"mutability":"mutable","name":"token","nameLocation":"2482:5:27","nodeType":"VariableDeclaration","scope":5150,"src":"2474:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5140,"name":"address","nodeType":"ElementaryTypeName","src":"2474:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5143,"mutability":"mutable","name":"id","nameLocation":"2505:2:27","nodeType":"VariableDeclaration","scope":5150,"src":"2497:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5142,"name":"uint256","nodeType":"ElementaryTypeName","src":"2497:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5145,"mutability":"mutable","name":"amount","nameLocation":"2525:6:27","nodeType":"VariableDeclaration","scope":5150,"src":"2517:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5144,"name":"uint256","nodeType":"ElementaryTypeName","src":"2517:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5147,"mutability":"mutable","name":"blockTime","nameLocation":"2549:9:27","nodeType":"VariableDeclaration","scope":5150,"src":"2541:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2541:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5149,"mutability":"mutable","name":"betStatus","nameLocation":"2573:9:27","nodeType":"VariableDeclaration","scope":5150,"src":"2568:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5148,"name":"bool","nodeType":"ElementaryTypeName","src":"2568:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Bet","nameLocation":"2407:3:27","nodeType":"StructDefinition","scope":6125,"src":"2400:216:27","visibility":"public"},{"canonicalName":"CoinTossV5.Fee","id":5155,"members":[{"constant":false,"id":5152,"mutability":"mutable","name":"betAmountFee","nameLocation":"2669:12:27","nodeType":"VariableDeclaration","scope":5155,"src":"2661:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5151,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5154,"mutability":"mutable","name":"ProfitFee","nameLocation":"2699:9:27","nodeType":"VariableDeclaration","scope":5155,"src":"2691:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5153,"name":"uint256","nodeType":"ElementaryTypeName","src":"2691:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Fee","nameLocation":"2647:3:27","nodeType":"StructDefinition","scope":6125,"src":"2640:75:27","visibility":"public"},{"constant":false,"documentation":{"id":5156,"nodeType":"StructuredDocumentation","src":"2721:45:27","text":"@notice Maps bets IDs to Bet information."},"functionSelector":"22af00fa","id":5161,"mutability":"mutable","name":"bets","nameLocation":"2802:4:27","nodeType":"VariableDeclaration","scope":6125,"src":"2771:35:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet)"},"typeName":{"id":5160,"keyType":{"id":5157,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2771:23:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet)"},"valueType":{"id":5159,"nodeType":"UserDefinedTypeName","pathNode":{"id":5158,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"2790:3:27"},"referencedDeclaration":5150,"src":"2790:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}}},"visibility":"public"},{"constant":false,"documentation":{"id":5162,"nodeType":"StructuredDocumentation","src":"2813:45:27","text":"@notice Maps users addrejsses to bets IDs"},"id":5167,"mutability":"mutable","name":"_userBets","nameLocation":"2902:9:27","nodeType":"VariableDeclaration","scope":6125,"src":"2863:48:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":5166,"keyType":{"id":5163,"name":"address","nodeType":"ElementaryTypeName","src":"2871:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2863:29:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueType":{"baseType":{"id":5164,"name":"uint256","nodeType":"ElementaryTypeName","src":"2882:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5165,"nodeType":"ArrayTypeName","src":"2882:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"internal"},{"anonymous":false,"documentation":{"id":5168,"nodeType":"StructuredDocumentation","src":"2918:263:27","text":"@notice Emitted after the bet amount is transfered to the user.\n @param id The bet ID.\n @param user Address of the gamer.\n @param amount Number of tokens refunded.\n @param chainlinkVRFCost The Chainlink VRF cost refunded to player."},"id":5178,"name":"BetRefunded","nameLocation":"3192:11:27","nodeType":"EventDefinition","parameters":{"id":5177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5170,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"3221:2:27","nodeType":"VariableDeclaration","scope":5178,"src":"3213:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5169,"name":"uint256","nodeType":"ElementaryTypeName","src":"3213:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5172,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"3241:4:27","nodeType":"VariableDeclaration","scope":5178,"src":"3233:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5171,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5174,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3263:6:27","nodeType":"VariableDeclaration","scope":5178,"src":"3255:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5173,"name":"uint256","nodeType":"ElementaryTypeName","src":"3255:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5176,"indexed":false,"mutability":"mutable","name":"chainlinkVRFCost","nameLocation":"3287:16:27","nodeType":"VariableDeclaration","scope":5178,"src":"3279:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5175,"name":"uint256","nodeType":"ElementaryTypeName","src":"3279:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3203:106:27"},"src":"3186:124:27"},{"documentation":{"id":5179,"nodeType":"StructuredDocumentation","src":"3316:76:27","text":"@notice Insufficient bet amount.\n @param minBetAmount Bet amount."},"id":5183,"name":"UnderMinBetAmount","nameLocation":"3403:17:27","nodeType":"ErrorDefinition","parameters":{"id":5182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5181,"mutability":"mutable","name":"minBetAmount","nameLocation":"3429:12:27","nodeType":"VariableDeclaration","scope":5183,"src":"3421:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5180,"name":"uint256","nodeType":"ElementaryTypeName","src":"3421:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3420:22:27"},"src":"3397:46:27"},{"documentation":{"id":5184,"nodeType":"StructuredDocumentation","src":"3449:35:27","text":"@notice Bet isn't resolved yet."},"id":5186,"name":"NotFulfilled","nameLocation":"3495:12:27","nodeType":"ErrorDefinition","parameters":{"id":5185,"nodeType":"ParameterList","parameters":[],"src":"3507:2:27"},"src":"3489:21:27"},{"documentation":{"id":5187,"nodeType":"StructuredDocumentation","src":"3516:63:27","text":"@notice Bet provided doesn't exist or was already resolved."},"id":5189,"name":"NotPendingBet","nameLocation":"3590:13:27","nodeType":"ErrorDefinition","parameters":{"id":5188,"nodeType":"ParameterList","parameters":[],"src":"3603:2:27"},"src":"3584:22:27"},{"canonicalName":"CoinTossV5.FullCoinTossBet","id":5196,"members":[{"constant":false,"id":5192,"mutability":"mutable","name":"bet","nameLocation":"3893:3:27","nodeType":"VariableDeclaration","scope":5196,"src":"3889:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5191,"nodeType":"UserDefinedTypeName","pathNode":{"id":5190,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"3889:3:27"},"referencedDeclaration":5150,"src":"3889:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"},{"constant":false,"id":5195,"mutability":"mutable","name":"coinTossBet","nameLocation":"3918:11:27","nodeType":"VariableDeclaration","scope":5196,"src":"3906:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet"},"typeName":{"id":5194,"nodeType":"UserDefinedTypeName","pathNode":{"id":5193,"name":"CoinTossBet","nodeType":"IdentifierPath","referencedDeclaration":5201,"src":"3906:11:27"},"referencedDeclaration":5201,"src":"3906:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet"}},"visibility":"internal"}],"name":"FullCoinTossBet","nameLocation":"3863:15:27","nodeType":"StructDefinition","scope":6125,"src":"3856:80:27","visibility":"public"},{"canonicalName":"CoinTossV5.CoinTossBet","id":5201,"members":[{"constant":false,"id":5198,"mutability":"mutable","name":"face","nameLocation":"4112:4:27","nodeType":"VariableDeclaration","scope":5201,"src":"4107:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5197,"name":"bool","nodeType":"ElementaryTypeName","src":"4107:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5200,"mutability":"mutable","name":"rolled","nameLocation":"4131:6:27","nodeType":"VariableDeclaration","scope":5201,"src":"4126:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5199,"name":"bool","nodeType":"ElementaryTypeName","src":"4126:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"CoinTossBet","nameLocation":"4085:11:27","nodeType":"StructDefinition","scope":6125,"src":"4078:66:27","visibility":"public"},{"constant":false,"documentation":{"id":5202,"nodeType":"StructuredDocumentation","src":"4150:112:27","text":"@notice Maps bets IDs to chosen and rolled coin faces.\n @dev Coin faces: true = Tails, false = Heads."},"functionSelector":"e051ece9","id":5207,"mutability":"mutable","name":"coinTossBets","nameLocation":"4306:12:27","nodeType":"VariableDeclaration","scope":6125,"src":"4267:51:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CoinTossBet_$5201_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.CoinTossBet)"},"typeName":{"id":5206,"keyType":{"id":5203,"name":"uint256","nodeType":"ElementaryTypeName","src":"4275:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4267:31:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CoinTossBet_$5201_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.CoinTossBet)"},"valueType":{"id":5205,"nodeType":"UserDefinedTypeName","pathNode":{"id":5204,"name":"CoinTossBet","nodeType":"IdentifierPath","referencedDeclaration":5201,"src":"4286:11:27"},"referencedDeclaration":5201,"src":"4286:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":5208,"nodeType":"StructuredDocumentation","src":"4325:237:27","text":"@notice Emitted after a bet is placed.\n @param id The bet ID.\n @param user Address of the gamer.\n @param token Address of the token.\n @param amount The bet amount.\n @param face The chosen coin face."},"id":5220,"name":"PlaceBet","nameLocation":"4573:8:27","nodeType":"EventDefinition","parameters":{"id":5219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5210,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"4599:2:27","nodeType":"VariableDeclaration","scope":5220,"src":"4591:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5209,"name":"uint256","nodeType":"ElementaryTypeName","src":"4591:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5212,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"4627:4:27","nodeType":"VariableDeclaration","scope":5220,"src":"4611:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5211,"name":"address","nodeType":"ElementaryTypeName","src":"4611:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5214,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4657:5:27","nodeType":"VariableDeclaration","scope":5220,"src":"4641:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5213,"name":"address","nodeType":"ElementaryTypeName","src":"4641:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5216,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4680:6:27","nodeType":"VariableDeclaration","scope":5220,"src":"4672:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5215,"name":"uint256","nodeType":"ElementaryTypeName","src":"4672:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5218,"indexed":false,"mutability":"mutable","name":"face","nameLocation":"4701:4:27","nodeType":"VariableDeclaration","scope":5220,"src":"4696:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5217,"name":"bool","nodeType":"ElementaryTypeName","src":"4696:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4581:130:27"},"src":"4567:145:27"},{"anonymous":false,"documentation":{"id":5221,"nodeType":"StructuredDocumentation","src":"4718:281:27","text":"@notice Emitted after a bet is rolled.\n @param id The bet ID.\n @param user Address of the gamer.\n @param token Address of the token.\n @param amount The bet amount.\n @param face The chosen coin face.\n @param rolled The rolled coin face."},"id":5235,"name":"Roll","nameLocation":"5010:4:27","nodeType":"EventDefinition","parameters":{"id":5234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5223,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"5032:2:27","nodeType":"VariableDeclaration","scope":5235,"src":"5024:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5222,"name":"uint256","nodeType":"ElementaryTypeName","src":"5024:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5225,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"5060:4:27","nodeType":"VariableDeclaration","scope":5235,"src":"5044:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5224,"name":"address","nodeType":"ElementaryTypeName","src":"5044:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5227,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"5090:5:27","nodeType":"VariableDeclaration","scope":5235,"src":"5074:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5226,"name":"address","nodeType":"ElementaryTypeName","src":"5074:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5229,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"5113:6:27","nodeType":"VariableDeclaration","scope":5235,"src":"5105:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5228,"name":"uint256","nodeType":"ElementaryTypeName","src":"5105:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5231,"indexed":false,"mutability":"mutable","name":"face","nameLocation":"5134:4:27","nodeType":"VariableDeclaration","scope":5235,"src":"5129:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5230,"name":"bool","nodeType":"ElementaryTypeName","src":"5129:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5233,"indexed":false,"mutability":"mutable","name":"rolled","nameLocation":"5153:6:27","nodeType":"VariableDeclaration","scope":5235,"src":"5148:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5232,"name":"bool","nodeType":"ElementaryTypeName","src":"5148:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5014:177:27"},"src":"5004:188:27"},{"body":{"id":5266,"nodeType":"Block","src":"5319:184:27","statements":[{"expression":{"id":5249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5245,"name":"COORDINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"5329:11:27","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5247,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"5369:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5246,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"5343:25:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$219_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5343:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"src":"5329:55:27","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"id":5250,"nodeType":"ExpressionStatement","src":"5329:55:27"},{"expression":{"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5251,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"5394:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5252,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5404:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5404:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5394:20:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5255,"nodeType":"ExpressionStatement","src":"5394:20:27"},{"expression":{"id":5258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5256,"name":"s_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"5424:16:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5257,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5237,"src":"5443:14:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5424:33:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":5259,"nodeType":"ExpressionStatement","src":"5424:33:27"},{"expression":{"arguments":[{"arguments":[{"id":5262,"name":"bankAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5239,"src":"5483:11:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5261,"name":"IBankV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"5475:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBankV2_$7313_$","typeString":"type(contract IBankV2)"}},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5475:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":5260,"name":"setBank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"5467:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IBankV2_$7313_$returns$__$","typeString":"function (contract IBankV2)"}},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5467:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5265,"nodeType":"ExpressionStatement","src":"5467:29:27"}]},"id":5267,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5242,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"5299:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5243,"kind":"baseConstructorSpecifier","modifierName":{"id":5241,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":104,"src":"5281:17:27"},"nodeType":"ModifierInvocation","src":"5281:33:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5237,"mutability":"mutable","name":"subscriptionId","nameLocation":"5236:14:27","nodeType":"VariableDeclaration","scope":5267,"src":"5229:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5236,"name":"uint64","nodeType":"ElementaryTypeName","src":"5229:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5239,"mutability":"mutable","name":"bankAddress","nameLocation":"5260:11:27","nodeType":"VariableDeclaration","scope":5267,"src":"5252:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5238,"name":"address","nodeType":"ElementaryTypeName","src":"5252:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5228:44:27"},"returnParameters":{"id":5244,"nodeType":"ParameterList","parameters":[],"src":"5319:0:27"},"scope":6125,"src":"5217:286:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5282,"nodeType":"Block","src":"5687:55:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5275,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"5704:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token storage ref)"}},"id":5277,"indexExpression":{"id":5276,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5270,"src":"5711:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5704:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage","typeString":"struct CoinTossV5.Token storage ref"}},"id":5278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pendingCount","nodeType":"MemberAccess","referencedDeclaration":5128,"src":"5704:26:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5734:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5704:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5274,"id":5281,"nodeType":"Return","src":"5697:38:27"}]},"documentation":{"id":5268,"nodeType":"StructuredDocumentation","src":"5509:107:27","text":"@notice Returns whether the token has pending bets.\n @return Whether the token has pending bets."},"functionSelector":"594043fd","id":5283,"implemented":true,"kind":"function","modifiers":[],"name":"hasPendingBets","nameLocation":"5630:14:27","nodeType":"FunctionDefinition","parameters":{"id":5271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5270,"mutability":"mutable","name":"token","nameLocation":"5653:5:27","nodeType":"VariableDeclaration","scope":5283,"src":"5645:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5269,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:15:27"},"returnParameters":{"id":5274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5283,"src":"5681:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5272,"name":"bool","nodeType":"ElementaryTypeName","src":"5681:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5680:6:27"},"scope":6125,"src":"5621:121:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5302,"nodeType":"Block","src":"5856:66:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5292,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"5874:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token storage ref)"}},"id":5294,"indexExpression":{"id":5293,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"5881:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5874:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage","typeString":"struct CoinTossV5.Token storage ref"}},"id":5295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdge","nodeType":"MemberAccess","referencedDeclaration":5126,"src":"5874:23:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5296,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5287,"src":"5900:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5874:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5873:34:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":5299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5910:5:27","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"5873:42:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5291,"id":5301,"nodeType":"Return","src":"5866:49:27"}]},"id":5303,"implemented":true,"kind":"function","modifiers":[],"name":"_getFees","nameLocation":"5757:8:27","nodeType":"FunctionDefinition","parameters":{"id":5288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5285,"mutability":"mutable","name":"token","nameLocation":"5774:5:27","nodeType":"VariableDeclaration","scope":5303,"src":"5766:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5284,"name":"address","nodeType":"ElementaryTypeName","src":"5766:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5287,"mutability":"mutable","name":"amount","nameLocation":"5789:6:27","nodeType":"VariableDeclaration","scope":5303,"src":"5781:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5286,"name":"uint256","nodeType":"ElementaryTypeName","src":"5781:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5765:31:27"},"returnParameters":{"id":5291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5303,"src":"5843:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5289,"name":"uint256","nodeType":"ElementaryTypeName","src":"5843:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5842:9:27"},"scope":6125,"src":"5748:174:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5334,"nodeType":"Block","src":"6068:190:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5314,"name":"_bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5307,"src":"6090:5:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":5313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6082:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5312,"name":"address","nodeType":"ElementaryTypeName","src":"6082:7:27","typeDescriptions":{}}},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6082:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6108:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6100:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5316,"name":"address","nodeType":"ElementaryTypeName","src":"6100:7:27","typeDescriptions":{}}},"id":5319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6100:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6082:28:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5322,"nodeType":"IfStatement","src":"6078:114:27","trueBody":{"id":5321,"nodeType":"Block","src":"6112:80:27","statements":[]}},{"expression":{"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5323,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6201:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5324,"name":"_bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5307,"src":"6208:5:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"src":"6201:12:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":5326,"nodeType":"ExpressionStatement","src":"6201:12:27"},{"eventCall":{"arguments":[{"arguments":[{"id":5330,"name":"_bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5307,"src":"6244:5:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":5329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6236:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5328,"name":"address","nodeType":"ElementaryTypeName","src":"6236:7:27","typeDescriptions":{}}},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6236:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5327,"name":"SetBank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5105,"src":"6228:7:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6228:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5333,"nodeType":"EmitStatement","src":"6223:28:27"}]},"documentation":{"id":5304,"nodeType":"StructuredDocumentation","src":"5928:86:27","text":"@notice Sets the Bank contract.\n @param _bank Address of the Bank contract."},"functionSelector":"090d23b9","id":5335,"implemented":true,"kind":"function","modifiers":[{"id":5310,"kind":"modifierInvocation","modifierName":{"id":5309,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"6058:9:27"},"nodeType":"ModifierInvocation","src":"6058:9:27"}],"name":"setBank","nameLocation":"6028:7:27","nodeType":"FunctionDefinition","parameters":{"id":5308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5307,"mutability":"mutable","name":"_bank","nameLocation":"6044:5:27","nodeType":"VariableDeclaration","scope":5335,"src":"6036:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"},"typeName":{"id":5306,"nodeType":"UserDefinedTypeName","pathNode":{"id":5305,"name":"IBankV2","nodeType":"IdentifierPath","referencedDeclaration":7313,"src":"6036:7:27"},"referencedDeclaration":7313,"src":"6036:7:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"visibility":"internal"}],"src":"6035:15:27"},"returnParameters":{"id":5311,"nodeType":"ParameterList","parameters":[],"src":"6068:0:27"},"scope":6125,"src":"6019:239:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5373,"nodeType":"Block","src":"6544:268:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5345,"name":"houseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"6558:9:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"343030","id":5346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6570:3:27","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"},"src":"6558:15:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5352,"nodeType":"IfStatement","src":"6554:73:27","trueBody":{"id":5351,"nodeType":"Block","src":"6575:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5348,"name":"ExcessiveHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5114,"src":"6596:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6596:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5350,"nodeType":"RevertStatement","src":"6589:27:27"}]}},{"condition":{"arguments":[{"id":5354,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"6655:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5353,"name":"hasPendingBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"6640:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6640:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5360,"nodeType":"IfStatement","src":"6636:80:27","trueBody":{"id":5359,"nodeType":"Block","src":"6663:53:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5356,"name":"TokenHasPendingBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6684:19:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6684:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5358,"nodeType":"RevertStatement","src":"6677:28:27"}]}},{"expression":{"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5361,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"6725:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token storage ref)"}},"id":5363,"indexExpression":{"id":5362,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"6732:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6725:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage","typeString":"struct CoinTossV5.Token storage ref"}},"id":5364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"houseEdge","nodeType":"MemberAccess","referencedDeclaration":5126,"src":"6725:23:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5365,"name":"houseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"6751:9:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6725:35:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5367,"nodeType":"ExpressionStatement","src":"6725:35:27"},{"eventCall":{"arguments":[{"id":5369,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"6788:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5370,"name":"houseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"6795:9:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":5368,"name":"SetHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"6775:12:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint16_$returns$__$","typeString":"function (address,uint16)"}},"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6775:30:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5372,"nodeType":"EmitStatement","src":"6770:35:27"}]},"documentation":{"id":5336,"nodeType":"StructuredDocumentation","src":"6264:201:27","text":"@notice Sets the game house edge rate for a specific token.\n @param token Address of the token.\n @param houseEdge House edge rate.\n @dev The house edge rate couldn't exceed 4%."},"functionSelector":"78bcde22","id":5374,"implemented":true,"kind":"function","modifiers":[{"id":5343,"kind":"modifierInvocation","modifierName":{"id":5342,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"6534:9:27"},"nodeType":"ModifierInvocation","src":"6534:9:27"}],"name":"setHouseEdge","nameLocation":"6479:12:27","nodeType":"FunctionDefinition","parameters":{"id":5341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5338,"mutability":"mutable","name":"token","nameLocation":"6500:5:27","nodeType":"VariableDeclaration","scope":5374,"src":"6492:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5337,"name":"address","nodeType":"ElementaryTypeName","src":"6492:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5340,"mutability":"mutable","name":"houseEdge","nameLocation":"6514:9:27","nodeType":"VariableDeclaration","scope":5374,"src":"6507:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5339,"name":"uint16","nodeType":"ElementaryTypeName","src":"6507:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6491:33:27"},"returnParameters":{"id":5344,"nodeType":"ParameterList","parameters":[],"src":"6544:0:27"},"scope":6125,"src":"6470:342:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5389,"nodeType":"Block","src":"7043:43:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5382,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"7060:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7077:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7069:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5383,"name":"address","nodeType":"ElementaryTypeName","src":"7069:7:27","typeDescriptions":{}}},"id":5386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7069:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7060:19:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5381,"id":5388,"nodeType":"Return","src":"7053:26:27"}]},"documentation":{"id":5375,"nodeType":"StructuredDocumentation","src":"6818:156:27","text":"@notice Check if the token has the 0x address.\n @param token Address of the token.\n @return Whether the token's address is the 0x address."},"id":5390,"implemented":true,"kind":"function","modifiers":[],"name":"_isGasToken","nameLocation":"6988:11:27","nodeType":"FunctionDefinition","parameters":{"id":5378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5377,"mutability":"mutable","name":"token","nameLocation":"7008:5:27","nodeType":"VariableDeclaration","scope":5390,"src":"7000:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5376,"name":"address","nodeType":"ElementaryTypeName","src":"7000:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6999:15:27"},"returnParameters":{"id":5381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5390,"src":"7037:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5379,"name":"bool","nodeType":"ElementaryTypeName","src":"7037:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7036:6:27"},"scope":6125,"src":"6979:107:27","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":5553,"nodeType":"Block","src":"7254:1710:27","statements":[{"assignments":[5408],"declarations":[{"constant":false,"id":5408,"mutability":"mutable","name":"token","nameLocation":"7278:5:27","nodeType":"VariableDeclaration","scope":5553,"src":"7264:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token"},"typeName":{"id":5407,"nodeType":"UserDefinedTypeName","pathNode":{"id":5406,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":5129,"src":"7264:5:27"},"referencedDeclaration":5129,"src":"7264:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token"}},"visibility":"internal"}],"id":5412,"initialValue":{"baseExpression":{"id":5409,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"7286:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token storage ref)"}},"id":5411,"indexExpression":{"id":5410,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"7293:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7286:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage","typeString":"struct CoinTossV5.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7264:42:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5415,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"7353:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5413,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"7333:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isAllowedToken","nodeType":"MemberAccess","referencedDeclaration":7248,"src":"7333:19:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":5416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7333:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":5417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7370:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7333:42:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5419,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"7379:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token storage pointer"}},"id":5420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdge","nodeType":"MemberAccess","referencedDeclaration":5126,"src":"7379:15:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7398:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7379:20:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7333:66:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5428,"nodeType":"IfStatement","src":"7316:142:27","trueBody":{"id":5427,"nodeType":"Block","src":"7410:48:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5424,"name":"ForbiddenToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"7431:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7431:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5426,"nodeType":"RevertStatement","src":"7424:23:27"}]}},{"assignments":[5430],"declarations":[{"constant":false,"id":5430,"mutability":"mutable","name":"user","nameLocation":"7476:4:27","nodeType":"VariableDeclaration","scope":5553,"src":"7468:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5429,"name":"address","nodeType":"ElementaryTypeName","src":"7468:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5433,"initialValue":{"expression":{"id":5431,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7483:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7483:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7468:25:27"},{"assignments":[5435],"declarations":[{"constant":false,"id":5435,"mutability":"mutable","name":"isGasToken","nameLocation":"7508:10:27","nodeType":"VariableDeclaration","scope":5553,"src":"7503:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5434,"name":"bool","nodeType":"ElementaryTypeName","src":"7503:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5442,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5436,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"7521:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7545:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7537:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5437,"name":"address","nodeType":"ElementaryTypeName","src":"7537:7:27","typeDescriptions":{}}},"id":5440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7537:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7521:26:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"7503:44:27"},{"assignments":[5444],"declarations":[{"constant":false,"id":5444,"mutability":"mutable","name":"betAmount","nameLocation":"7565:9:27","nodeType":"VariableDeclaration","scope":5553,"src":"7557:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5443,"name":"uint256","nodeType":"ElementaryTypeName","src":"7557:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5446,"initialValue":{"id":5445,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"7577:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7557:31:27"},{"id":5493,"nodeType":"Block","src":"7599:497:27","statements":[{"assignments":[5448],"declarations":[{"constant":false,"id":5448,"mutability":"mutable","name":"minBetAmount","nameLocation":"7621:12:27","nodeType":"VariableDeclaration","scope":5493,"src":"7613:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5447,"name":"uint256","nodeType":"ElementaryTypeName","src":"7613:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5453,"initialValue":{"arguments":[{"id":5451,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"7657:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5449,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"7636:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getMinBetAmount","nodeType":"MemberAccess","referencedDeclaration":7312,"src":"7636:20:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7636:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7613:57:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5454,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"7688:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5455,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"7700:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7688:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5462,"nodeType":"IfStatement","src":"7684:101:27","trueBody":{"id":5461,"nodeType":"Block","src":"7714:71:27","statements":[{"errorCall":{"arguments":[{"id":5458,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"7757:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5457,"name":"UnderMinBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"7739:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":5459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7739:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5460,"nodeType":"RevertStatement","src":"7732:38:27"}]}},{"assignments":[5464],"declarations":[{"constant":false,"id":5464,"mutability":"mutable","name":"maxBetAmount","nameLocation":"7807:12:27","nodeType":"VariableDeclaration","scope":5493,"src":"7799:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5463,"name":"uint256","nodeType":"ElementaryTypeName","src":"7799:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5470,"initialValue":{"arguments":[{"id":5467,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"7843:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5468,"name":"multi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5396,"src":"7857:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5465,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"7822:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getMaxBetAmount","nodeType":"MemberAccess","referencedDeclaration":7278,"src":"7822:20:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7822:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7799:64:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5471,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"7881:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5472,"name":"maxBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"7893:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7881:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5492,"nodeType":"IfStatement","src":"7877:209:27","trueBody":{"id":5491,"nodeType":"Block","src":"7907:179:27","statements":[{"condition":{"id":5474,"name":"isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"7929:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5486,"nodeType":"IfStatement","src":"7925:105:27","trueBody":{"id":5485,"nodeType":"Block","src":"7941:89:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5480,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"7986:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5481,"name":"maxBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"7998:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7986:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5477,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"7971:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7963:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5475,"name":"address","nodeType":"ElementaryTypeName","src":"7963:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7963:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"7963:22:27","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7963:48:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5484,"nodeType":"ExpressionStatement","src":"7963:48:27"}]}},{"expression":{"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5487,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"8047:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5488,"name":"maxBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"8059:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8047:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5490,"nodeType":"ExpressionStatement","src":"8047:24:27"}]}}]},{"expression":{"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5494,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"8106:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5497,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"8164:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5498,"name":"s_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"8185:16:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":5499,"name":"requestConfirmations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"8215:20:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":5500,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5088,"src":"8249:16:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5501,"name":"numWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5094,"src":"8279:8:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":5495,"name":"COORDINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"8120:11:27","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"id":5496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":152,"src":"8120:30:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8120:177:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:191:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5504,"nodeType":"ExpressionStatement","src":"8106:191:27"},{"assignments":[5507],"declarations":[{"constant":false,"id":5507,"mutability":"mutable","name":"newBet","nameLocation":"8319:6:27","nodeType":"VariableDeclaration","scope":5553,"src":"8308:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5506,"nodeType":"UserDefinedTypeName","pathNode":{"id":5505,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"8308:3:27"},"referencedDeclaration":5150,"src":"8308:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"id":5521,"initialValue":{"arguments":[{"hexValue":"66616c7365","id":5509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8345:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"id":5512,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"8372:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8364:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5510,"name":"address","nodeType":"ElementaryTypeName","src":"8364:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":5513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8364:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5514,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"8391:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5515,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"8417:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5516,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"8442:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5517,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8465:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"8465:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":5519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8494:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5508,"name":"Bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"8328:3:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Bet_$5150_storage_ptr_$","typeString":"type(struct CoinTossV5.Bet storage pointer)"}},"id":5520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8328:198:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"nodeType":"VariableDeclarationStatement","src":"8308:218:27"},{"expression":{"arguments":[{"id":5526,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"8557:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5522,"name":"_userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"8536:9:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":5524,"indexExpression":{"id":5523,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"8546:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8536:15:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"8536:20:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8536:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5528,"nodeType":"ExpressionStatement","src":"8536:33:27"},{"expression":{"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5529,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"8579:4:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet storage ref)"}},"id":5531,"indexExpression":{"id":5530,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"8584:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8579:17:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5532,"name":"newBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"8599:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"src":"8579:26:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"id":5534,"nodeType":"ExpressionStatement","src":"8579:26:27"},{"condition":{"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8661:11:27","subExpression":{"id":5535,"name":"isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"8662:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5550,"nodeType":"IfStatement","src":"8657:277:27","trueBody":{"id":5549,"nodeType":"Block","src":"8674:260:27","statements":[{"expression":{"arguments":[{"id":5541,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"8743:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5544,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"8773:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":5543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8765:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5542,"name":"address","nodeType":"ElementaryTypeName","src":"8765:7:27","typeDescriptions":{}}},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8765:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5546,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"8796:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5538,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"8695:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5537,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8688:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":5539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8688:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"8688:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1122_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8688:131:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5548,"nodeType":"ExpressionStatement","src":"8688:131:27"}]}},{"expression":{"id":5551,"name":"newBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"8951:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"functionReturnParameters":5405,"id":5552,"nodeType":"Return","src":"8944:13:27"}]},"id":5554,"implemented":true,"kind":"function","modifiers":[{"id":5399,"kind":"modifierInvocation","modifierName":{"id":5398,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":906,"src":"7206:13:27"},"nodeType":"ModifierInvocation","src":"7206:13:27"},{"id":5401,"kind":"modifierInvocation","modifierName":{"id":5400,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1009,"src":"7220:12:27"},"nodeType":"ModifierInvocation","src":"7220:12:27"}],"name":"_newBet","nameLocation":"7101:7:27","nodeType":"FunctionDefinition","parameters":{"id":5397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5392,"mutability":"mutable","name":"tokenAddress","nameLocation":"7126:12:27","nodeType":"VariableDeclaration","scope":5554,"src":"7118:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5391,"name":"address","nodeType":"ElementaryTypeName","src":"7118:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5394,"mutability":"mutable","name":"tokenAmount","nameLocation":"7156:11:27","nodeType":"VariableDeclaration","scope":5554,"src":"7148:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5393,"name":"uint256","nodeType":"ElementaryTypeName","src":"7148:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5396,"mutability":"mutable","name":"multi","nameLocation":"7185:5:27","nodeType":"VariableDeclaration","scope":5554,"src":"7177:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5395,"name":"uint256","nodeType":"ElementaryTypeName","src":"7177:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7108:88:27"},"returnParameters":{"id":5405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5554,"src":"7242:10:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5403,"nodeType":"UserDefinedTypeName","pathNode":{"id":5402,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"7242:3:27"},"referencedDeclaration":5150,"src":"7242:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"src":"7241:12:27"},"scope":6125,"src":"7092:1872:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"functionSelector":"1b3ed722","id":5557,"mutability":"mutable","name":"multiplier","nameLocation":"8985:10:27","nodeType":"VariableDeclaration","scope":6125,"src":"8970:29:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5555,"name":"uint256","nodeType":"ElementaryTypeName","src":"8970:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":5556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8998:1:27","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"body":{"id":5568,"nodeType":"Block","src":"9067:36:27","statements":[{"expression":{"id":5566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5564,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"9077:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5565,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5559,"src":"9090:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9077:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5567,"nodeType":"ExpressionStatement","src":"9077:19:27"}]},"functionSelector":"5ffe6146","id":5569,"implemented":true,"kind":"function","modifiers":[{"id":5562,"kind":"modifierInvocation","modifierName":{"id":5561,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"9057:9:27"},"nodeType":"ModifierInvocation","src":"9057:9:27"}],"name":"updateMultiplier","nameLocation":"9015:16:27","nodeType":"FunctionDefinition","parameters":{"id":5560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5559,"mutability":"mutable","name":"amount","nameLocation":"9040:6:27","nodeType":"VariableDeclaration","scope":5569,"src":"9032:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5558,"name":"uint256","nodeType":"ElementaryTypeName","src":"9032:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9031:16:27"},"returnParameters":{"id":5563,"nodeType":"ParameterList","parameters":[],"src":"9067:0:27"},"scope":6125,"src":"9006:97:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5576,"nodeType":"Block","src":"9165:34:27","statements":[{"expression":{"id":5574,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"9182:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5573,"id":5575,"nodeType":"Return","src":"9175:17:27"}]},"id":5577,"implemented":true,"kind":"function","modifiers":[],"name":"getMultiplier","nameLocation":"9118:13:27","nodeType":"FunctionDefinition","parameters":{"id":5570,"nodeType":"ParameterList","parameters":[],"src":"9131:2:27"},"returnParameters":{"id":5573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5577,"src":"9156:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5571,"name":"uint256","nodeType":"ElementaryTypeName","src":"9156:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9155:9:27"},"scope":6125,"src":"9109:90:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5663,"nodeType":"Block","src":"9512:549:27","statements":[{"assignments":[5593],"declarations":[{"constant":false,"id":5593,"mutability":"mutable","name":"userBetsIds","nameLocation":"9539:11:27","nodeType":"VariableDeclaration","scope":5663,"src":"9522:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5591,"name":"uint256","nodeType":"ElementaryTypeName","src":"9522:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5592,"nodeType":"ArrayTypeName","src":"9522:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5597,"initialValue":{"baseExpression":{"id":5594,"name":"_userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"9553:9:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":5596,"indexExpression":{"id":5595,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5580,"src":"9563:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9553:15:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9522:46:27"},{"assignments":[5599],"declarations":[{"constant":false,"id":5599,"mutability":"mutable","name":"betsLength","nameLocation":"9586:10:27","nodeType":"VariableDeclaration","scope":5663,"src":"9578:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5598,"name":"uint256","nodeType":"ElementaryTypeName","src":"9578:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5602,"initialValue":{"expression":{"id":5600,"name":"userBetsIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"9599:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9599:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9578:39:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5603,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"9632:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5604,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"9645:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9632:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5611,"nodeType":"IfStatement","src":"9628:77:27","trueBody":{"id":5610,"nodeType":"Block","src":"9657:48:27","statements":[{"expression":{"id":5608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5606,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"9671:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5607,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"9684:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9671:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5609,"nodeType":"ExpressionStatement","src":"9671:23:27"}]}},{"assignments":[5616],"declarations":[{"constant":false,"id":5616,"mutability":"mutable","name":"userBets","nameLocation":"9728:8:27","nodeType":"VariableDeclaration","scope":5663,"src":"9715:21:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet[]"},"typeName":{"baseType":{"id":5614,"nodeType":"UserDefinedTypeName","pathNode":{"id":5613,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"9715:3:27"},"referencedDeclaration":5150,"src":"9715:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"id":5615,"nodeType":"ArrayTypeName","src":"9715:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.Bet[]"}},"visibility":"internal"}],"id":5623,"initialValue":{"arguments":[{"id":5621,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"9749:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9739:9:27","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct CoinTossV5.Bet memory[] memory)"},"typeName":{"baseType":{"id":5618,"nodeType":"UserDefinedTypeName","pathNode":{"id":5617,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"9743:3:27"},"referencedDeclaration":5150,"src":"9743:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"id":5619,"nodeType":"ArrayTypeName","src":"9743:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.Bet[]"}}},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9739:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9715:45:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5624,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"9774:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9788:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9774:15:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5660,"nodeType":"IfStatement","src":"9770:259:27","trueBody":{"id":5659,"nodeType":"Block","src":"9791:238:27","statements":[{"assignments":[5628],"declarations":[{"constant":false,"id":5628,"mutability":"mutable","name":"userBetsIndex","nameLocation":"9813:13:27","nodeType":"VariableDeclaration","scope":5659,"src":"9805:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5627,"name":"uint256","nodeType":"ElementaryTypeName","src":"9805:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5629,"nodeType":"VariableDeclarationStatement","src":"9805:21:27"},{"body":{"id":5657,"nodeType":"Block","src":"9903:116:27","statements":[{"expression":{"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5642,"name":"userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"9921:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"id":5644,"indexExpression":{"id":5643,"name":"userBetsIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5628,"src":"9930:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9921:23:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5645,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"9947:4:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet storage ref)"}},"id":5651,"indexExpression":{"baseExpression":{"id":5646,"name":"userBetsIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"9952:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5650,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5647,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5631,"src":"9964:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9968:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9964:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9952:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9947:24:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"src":"9921:50:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":5653,"nodeType":"ExpressionStatement","src":"9921:50:27"},{"expression":{"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9989:15:27","subExpression":{"id":5654,"name":"userBetsIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5628,"src":"9989:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5656,"nodeType":"ExpressionStatement","src":"9989:15:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5634,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5631,"src":"9869:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5635,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"9873:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5636,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"9886:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9873:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9869:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5658,"initializationExpression":{"assignments":[5631],"declarations":[{"constant":false,"id":5631,"mutability":"mutable","name":"i","nameLocation":"9853:1:27","nodeType":"VariableDeclaration","scope":5658,"src":"9845:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5630,"name":"uint256","nodeType":"ElementaryTypeName","src":"9845:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5633,"initialValue":{"id":5632,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"9857:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9845:22:27"},"loopExpression":{"expression":{"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"9898:3:27","subExpression":{"id":5639,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5631,"src":"9898:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5641,"nodeType":"ExpressionStatement","src":"9898:3:27"},"nodeType":"ForStatement","src":"9840:179:27"}]}},{"expression":{"id":5661,"name":"userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5616,"src":"10046:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"functionReturnParameters":5588,"id":5662,"nodeType":"Return","src":"10039:15:27"}]},"documentation":{"id":5578,"nodeType":"StructuredDocumentation","src":"9205:177:27","text":"@notice Gets the list of the last user bets.\n @param user Address of the gamer.\n @param dataLength The amount of bets to return.\n @return A list of Bet."},"id":5664,"implemented":true,"kind":"function","modifiers":[],"name":"_getLastUserBets","nameLocation":"9396:16:27","nodeType":"FunctionDefinition","parameters":{"id":5583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5580,"mutability":"mutable","name":"user","nameLocation":"9421:4:27","nodeType":"VariableDeclaration","scope":5664,"src":"9413:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5579,"name":"address","nodeType":"ElementaryTypeName","src":"9413:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5582,"mutability":"mutable","name":"dataLength","nameLocation":"9435:10:27","nodeType":"VariableDeclaration","scope":5664,"src":"9427:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5581,"name":"uint256","nodeType":"ElementaryTypeName","src":"9427:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9412:34:27"},"returnParameters":{"id":5588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5664,"src":"9494:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet[]"},"typeName":{"baseType":{"id":5585,"nodeType":"UserDefinedTypeName","pathNode":{"id":5584,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"9494:3:27"},"referencedDeclaration":5150,"src":"9494:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"id":5586,"nodeType":"ArrayTypeName","src":"9494:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.Bet[]"}},"visibility":"internal"}],"src":"9493:14:27"},"scope":6125,"src":"9387:674:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5681,"nodeType":"Block","src":"10140:65:27","statements":[{"assignments":[5674],"declarations":[{"constant":false,"id":5674,"mutability":"mutable","name":"data","nameLocation":"10162:4:27","nodeType":"VariableDeclaration","scope":5681,"src":"10150:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5673,"nodeType":"UserDefinedTypeName","pathNode":{"id":5672,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"10150:3:27"},"referencedDeclaration":5150,"src":"10150:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"id":5678,"initialValue":{"baseExpression":{"id":5675,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"10169:4:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet storage ref)"}},"id":5677,"indexExpression":{"id":5676,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5666,"src":"10174:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10169:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10150:27:27"},{"expression":{"id":5679,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"10194:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"functionReturnParameters":5671,"id":5680,"nodeType":"Return","src":"10187:11:27"}]},"functionSelector":"5bfe1630","id":5682,"implemented":true,"kind":"function","modifiers":[],"name":"getBetData","nameLocation":"10076:10:27","nodeType":"FunctionDefinition","parameters":{"id":5667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5666,"mutability":"mutable","name":"id","nameLocation":"10095:2:27","nodeType":"VariableDeclaration","scope":5682,"src":"10087:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5665,"name":"uint256","nodeType":"ElementaryTypeName","src":"10087:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10086:12:27"},"returnParameters":{"id":5671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5670,"mutability":"mutable","name":"betData","nameLocation":"10131:7:27","nodeType":"VariableDeclaration","scope":5682,"src":"10120:18:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5669,"nodeType":"UserDefinedTypeName","pathNode":{"id":5668,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"10120:3:27"},"referencedDeclaration":5150,"src":"10120:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"src":"10119:20:27"},"scope":6125,"src":"10067:138:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5699,"nodeType":"Block","src":"10279:75:27","statements":[{"assignments":[5691],"declarations":[{"constant":false,"id":5691,"mutability":"mutable","name":"data","nameLocation":"10301:4:27","nodeType":"VariableDeclaration","scope":5699,"src":"10289:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5690,"nodeType":"UserDefinedTypeName","pathNode":{"id":5689,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"10289:3:27"},"referencedDeclaration":5150,"src":"10289:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"id":5695,"initialValue":{"baseExpression":{"id":5692,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"10308:4:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet storage ref)"}},"id":5694,"indexExpression":{"id":5693,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"10313:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10308:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10289:27:27"},{"expression":{"expression":{"id":5696,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5691,"src":"10333:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"betStatus","nodeType":"MemberAccess","referencedDeclaration":5149,"src":"10333:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5688,"id":5698,"nodeType":"Return","src":"10326:21:27"}]},"functionSelector":"61f14f11","id":5700,"implemented":true,"kind":"function","modifiers":[],"name":"getBetStatus","nameLocation":"10220:12:27","nodeType":"FunctionDefinition","parameters":{"id":5685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5684,"mutability":"mutable","name":"id","nameLocation":"10241:2:27","nodeType":"VariableDeclaration","scope":5700,"src":"10233:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5683,"name":"uint256","nodeType":"ElementaryTypeName","src":"10233:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10232:12:27"},"returnParameters":{"id":5688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5687,"mutability":"mutable","name":"status","nameLocation":"10271:6:27","nodeType":"VariableDeclaration","scope":5700,"src":"10266:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5686,"name":"bool","nodeType":"ElementaryTypeName","src":"10266:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10265:13:27"},"scope":6125,"src":"10211:143:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5786,"nodeType":"Block","src":"10525:550:27","statements":[{"assignments":[5710],"declarations":[{"constant":false,"id":5710,"mutability":"mutable","name":"bet","nameLocation":"10547:3:27","nodeType":"VariableDeclaration","scope":5786,"src":"10535:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5709,"nodeType":"UserDefinedTypeName","pathNode":{"id":5708,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"10535:3:27"},"referencedDeclaration":5150,"src":"10535:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"id":5714,"initialValue":{"baseExpression":{"id":5711,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"10553:4:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet storage ref)"}},"id":5713,"indexExpression":{"id":5712,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"10558:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10553:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10535:26:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5715,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10575:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5716,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":5137,"src":"10575:12:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":5717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10591:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10575:20:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5723,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10654:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"10654:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5725,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10672:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5726,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockTime","nodeType":"MemberAccess","referencedDeclaration":5147,"src":"10672:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3330","id":5727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10688:2:27","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"src":"10672:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10654:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5734,"nodeType":"IfStatement","src":"10650:88:27","trueBody":{"id":5733,"nodeType":"Block","src":"10692:46:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5730,"name":"NotFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"10713:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10713:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5732,"nodeType":"RevertStatement","src":"10706:21:27"}]}},"id":5735,"nodeType":"IfStatement","src":"10571:167:27","trueBody":{"id":5722,"nodeType":"Block","src":"10597:47:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5719,"name":"NotPendingBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5189,"src":"10618:13:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10618:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5721,"nodeType":"RevertStatement","src":"10611:22:27"}]}},{"assignments":[5738],"declarations":[{"constant":false,"id":5738,"mutability":"mutable","name":"token","nameLocation":"10762:5:27","nodeType":"VariableDeclaration","scope":5786,"src":"10748:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token"},"typeName":{"id":5737,"nodeType":"UserDefinedTypeName","pathNode":{"id":5736,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":5129,"src":"10748:5:27"},"referencedDeclaration":5129,"src":"10748:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token"}},"visibility":"internal"}],"id":5743,"initialValue":{"baseExpression":{"id":5739,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"10770:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$5129_storage_$","typeString":"mapping(address => struct CoinTossV5.Token storage ref)"}},"id":5742,"indexExpression":{"expression":{"id":5740,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10777:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5741,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"10777:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10770:17:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage","typeString":"struct CoinTossV5.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10748:39:27"},{"expression":{"id":5747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"10797:20:27","subExpression":{"expression":{"id":5744,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"10797:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$5129_storage_ptr","typeString":"struct CoinTossV5.Token storage pointer"}},"id":5746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"pendingCount","nodeType":"MemberAccess","referencedDeclaration":5128,"src":"10797:18:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":5748,"nodeType":"ExpressionStatement","src":"10797:20:27"},{"expression":{"id":5753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5749,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10828:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":5137,"src":"10828:12:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10843:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10828:19:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5754,"nodeType":"ExpressionStatement","src":"10828:19:27"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5755,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10898:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"10898:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10919:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5757,"name":"address","nodeType":"ElementaryTypeName","src":"10911:7:27","typeDescriptions":{}}},"id":5760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10911:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10898:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5784,"nodeType":"Block","src":"10992:77:27","statements":[{"expression":{"arguments":[{"expression":{"id":5778,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"11037:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"11037:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":5780,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"11047:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5781,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5145,"src":"11047:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5774,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"11013:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"11013:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5773,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"11006:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":5776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11006:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1216,"src":"11006:30:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1122_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11006:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5783,"nodeType":"ExpressionStatement","src":"11006:52:27"}]},"id":5785,"nodeType":"IfStatement","src":"10894:175:27","trueBody":{"id":5772,"nodeType":"Block","src":"10923:63:27","statements":[{"expression":{"arguments":[{"expression":{"id":5768,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10964:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5145,"src":"10964:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5764,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10945:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5765,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"10945:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10937:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5762,"name":"address","nodeType":"ElementaryTypeName","src":"10937:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":5766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10937:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"10937:26:27","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10937:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5771,"nodeType":"ExpressionStatement","src":"10937:38:27"}]}}]},"documentation":{"id":5701,"nodeType":"StructuredDocumentation","src":"10360:107:27","text":"@notice Refunds the bet to the user if the Chainlink VRF callback failed.\n @param id The Bet ID."},"functionSelector":"e1fdb4b4","id":5787,"implemented":true,"kind":"function","modifiers":[{"id":5706,"kind":"modifierInvocation","modifierName":{"id":5705,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1009,"src":"10512:12:27"},"nodeType":"ModifierInvocation","src":"10512:12:27"}],"name":"refundBet","nameLocation":"10481:9:27","nodeType":"FunctionDefinition","parameters":{"id":5704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5703,"mutability":"mutable","name":"id","nameLocation":"10499:2:27","nodeType":"VariableDeclaration","scope":5787,"src":"10491:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5702,"name":"uint256","nodeType":"ElementaryTypeName","src":"10491:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10490:12:27"},"returnParameters":{"id":5707,"nodeType":"ParameterList","parameters":[],"src":"10525:0:27"},"scope":6125,"src":"10472:603:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5799,"nodeType":"Block","src":"11311:46:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5795,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5790,"src":"11328:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5796,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"11340:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11328:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5794,"id":5798,"nodeType":"Return","src":"11321:29:27"}]},"documentation":{"id":5788,"nodeType":"StructuredDocumentation","src":"11109:127:27","text":"@notice Calculates the target payout amount.\n @param betAmount Bet amount.\n @return The target payout amount."},"id":5800,"implemented":true,"kind":"function","modifiers":[],"name":"_getPayout","nameLocation":"11250:10:27","nodeType":"FunctionDefinition","parameters":{"id":5791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5790,"mutability":"mutable","name":"betAmount","nameLocation":"11269:9:27","nodeType":"VariableDeclaration","scope":5800,"src":"11261:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5789,"name":"uint256","nodeType":"ElementaryTypeName","src":"11261:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11260:19:27"},"returnParameters":{"id":5794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5800,"src":"11302:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5792,"name":"uint256","nodeType":"ElementaryTypeName","src":"11302:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11301:9:27"},"scope":6125,"src":"11241:116:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5843,"nodeType":"Block","src":"11711:194:27","statements":[{"assignments":[5814],"declarations":[{"constant":false,"id":5814,"mutability":"mutable","name":"bet","nameLocation":"11732:3:27","nodeType":"VariableDeclaration","scope":5843,"src":"11721:14:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5813,"nodeType":"UserDefinedTypeName","pathNode":{"id":5812,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"11721:3:27"},"referencedDeclaration":5150,"src":"11721:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"id":5822,"initialValue":{"arguments":[{"id":5816,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"11746:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5817,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5807,"src":"11753:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"3130303030","id":5819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11777:5:27","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}],"id":5818,"name":"_getPayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"11766:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11766:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5815,"name":"_newBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5554,"src":"11738:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_struct$_Bet_$5150_memory_ptr_$","typeString":"function (address,uint256,uint256) returns (struct CoinTossV5.Bet memory)"}},"id":5821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11738:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"nodeType":"VariableDeclarationStatement","src":"11721:63:27"},{"expression":{"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5823,"name":"coinTossBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"11795:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CoinTossBet_$5201_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.CoinTossBet storage ref)"}},"id":5826,"indexExpression":{"expression":{"id":5824,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"11808:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":5825,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":5143,"src":"11808:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11795:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage","typeString":"struct CoinTossV5.CoinTossBet storage ref"}},"id":5827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"face","nodeType":"MemberAccess","referencedDeclaration":5198,"src":"11795:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5828,"name":"face","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"11823:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11795:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5830,"nodeType":"ExpressionStatement","src":"11795:32:27"},{"eventCall":{"arguments":[{"expression":{"id":5832,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"11852:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":5833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":5143,"src":"11852:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5834,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"11860:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":5835,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"11860:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":5836,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"11870:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":5837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"11870:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5838,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"11881:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":5839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5145,"src":"11881:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5840,"name":"face","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"11893:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5831,"name":"PlaceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"11843:8:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (uint256,address,address,uint256,bool)"}},"id":5841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5842,"nodeType":"EmitStatement","src":"11838:60:27"}]},"documentation":{"id":5801,"nodeType":"StructuredDocumentation","src":"11363:220:27","text":"@notice Creates a new bet and stores the chosen coin face.\n @param face The chosen color number from the struct .\n @param token Address of the token.\n @param tokenAmount The number of tokens bet."},"functionSelector":"50462ea0","id":5844,"implemented":true,"kind":"function","modifiers":[{"id":5810,"kind":"modifierInvocation","modifierName":{"id":5809,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":906,"src":"11697:13:27"},"nodeType":"ModifierInvocation","src":"11697:13:27"}],"name":"wager","nameLocation":"11597:5:27","nodeType":"FunctionDefinition","parameters":{"id":5808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5803,"mutability":"mutable","name":"face","nameLocation":"11617:4:27","nodeType":"VariableDeclaration","scope":5844,"src":"11612:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5802,"name":"bool","nodeType":"ElementaryTypeName","src":"11612:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5805,"mutability":"mutable","name":"token","nameLocation":"11639:5:27","nodeType":"VariableDeclaration","scope":5844,"src":"11631:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5804,"name":"address","nodeType":"ElementaryTypeName","src":"11631:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5807,"mutability":"mutable","name":"tokenAmount","nameLocation":"11662:11:27","nodeType":"VariableDeclaration","scope":5844,"src":"11654:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5806,"name":"uint256","nodeType":"ElementaryTypeName","src":"11654:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11602:77:27"},"returnParameters":{"id":5811,"nodeType":"ParameterList","parameters":[],"src":"11711:0:27"},"scope":6125,"src":"11588:317:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5855,"nodeType":"Block","src":"11963:45:27","statements":[{"expression":{"expression":{"arguments":[{"id":5851,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"11988:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_CoinTossV5_$6125","typeString":"contract CoinTossV5"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CoinTossV5_$6125","typeString":"contract CoinTossV5"}],"id":5850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11980:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5849,"name":"address","nodeType":"ElementaryTypeName","src":"11980:7:27","typeDescriptions":{}}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11980:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"11980:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5848,"id":5854,"nodeType":"Return","src":"11973:28:27"}]},"functionSelector":"12065fe0","id":5856,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"11920:10:27","nodeType":"FunctionDefinition","parameters":{"id":5845,"nodeType":"ParameterList","parameters":[],"src":"11930:2:27"},"returnParameters":{"id":5848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5856,"src":"11954:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5846,"name":"uint256","nodeType":"ElementaryTypeName","src":"11954:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11953:9:27"},"scope":6125,"src":"11911:97:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5893,"nodeType":"Block","src":"12311:217:27","statements":[{"assignments":[5865],"declarations":[{"constant":false,"id":5865,"mutability":"mutable","name":"tokenBal","nameLocation":"12329:8:27","nodeType":"VariableDeclaration","scope":5893,"src":"12321:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5864,"name":"uint256","nodeType":"ElementaryTypeName","src":"12321:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5866,"nodeType":"VariableDeclarationStatement","src":"12321:16:27"},{"condition":{"arguments":[{"id":5868,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5859,"src":"12363:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5867,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"12351:11:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12351:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5891,"nodeType":"Block","src":"12441:81:27","statements":[{"expression":{"id":5889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5879,"name":"tokenBal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5865,"src":"12462:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5886,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12505:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_CoinTossV5_$6125","typeString":"contract CoinTossV5"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CoinTossV5_$6125","typeString":"contract CoinTossV5"}],"id":5885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12497:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5884,"name":"address","nodeType":"ElementaryTypeName","src":"12497:7:27","typeDescriptions":{}}},"id":5887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12497:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":5881,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5859,"src":"12480:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5880,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"12473:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":5882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12473:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1079,"src":"12473:23:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12473:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:49:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5863,"id":5890,"nodeType":"Return","src":"12455:56:27"}]},"id":5892,"nodeType":"IfStatement","src":"12347:175:27","trueBody":{"id":5878,"nodeType":"Block","src":"12371:64:27","statements":[{"expression":{"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5870,"name":"tokenBal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5865,"src":"12392:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":5873,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12411:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_CoinTossV5_$6125","typeString":"contract CoinTossV5"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CoinTossV5_$6125","typeString":"contract CoinTossV5"}],"id":5872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12403:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5871,"name":"address","nodeType":"ElementaryTypeName","src":"12403:7:27","typeDescriptions":{}}},"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12403:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"12403:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12392:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5863,"id":5877,"nodeType":"Return","src":"12385:39:27"}]}}]},"documentation":{"id":5857,"nodeType":"StructuredDocumentation","src":"12014:222:27","text":"@notice Gets the token's balance.\n The token's house edge allocation amounts are subtracted from the balance.\n @param token Address of the token.\n @return The amount of token available for profits."},"functionSelector":"3aecd0e3","id":5894,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenBalance","nameLocation":"12250:15:27","nodeType":"FunctionDefinition","parameters":{"id":5860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5859,"mutability":"mutable","name":"token","nameLocation":"12274:5:27","nodeType":"VariableDeclaration","scope":5894,"src":"12266:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5858,"name":"address","nodeType":"ElementaryTypeName","src":"12266:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12265:15:27"},"returnParameters":{"id":5863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5894,"src":"12302:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5861,"name":"uint256","nodeType":"ElementaryTypeName","src":"12302:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12301:9:27"},"scope":6125,"src":"12241:287:27","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[77],"body":{"id":6039,"nodeType":"Block","src":"12660:1281:27","statements":[{"assignments":[5905],"declarations":[{"constant":false,"id":5905,"mutability":"mutable","name":"coinTossBet","nameLocation":"12690:11:27","nodeType":"VariableDeclaration","scope":6039,"src":"12670:31:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet"},"typeName":{"id":5904,"nodeType":"UserDefinedTypeName","pathNode":{"id":5903,"name":"CoinTossBet","nodeType":"IdentifierPath","referencedDeclaration":5201,"src":"12670:11:27"},"referencedDeclaration":5201,"src":"12670:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet"}},"visibility":"internal"}],"id":5909,"initialValue":{"baseExpression":{"id":5906,"name":"coinTossBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"12704:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CoinTossBet_$5201_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.CoinTossBet storage ref)"}},"id":5908,"indexExpression":{"id":5907,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"12717:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12704:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage","typeString":"struct CoinTossV5.CoinTossBet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12670:50:27"},{"assignments":[5912],"declarations":[{"constant":false,"id":5912,"mutability":"mutable","name":"bet","nameLocation":"12742:3:27","nodeType":"VariableDeclaration","scope":6039,"src":"12730:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"},"typeName":{"id":5911,"nodeType":"UserDefinedTypeName","pathNode":{"id":5910,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"12730:3:27"},"referencedDeclaration":5150,"src":"12730:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"visibility":"internal"}],"id":5916,"initialValue":{"baseExpression":{"id":5913,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"12748:4:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$5150_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.Bet storage ref)"}},"id":5915,"indexExpression":{"id":5914,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"12753:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12748:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage","typeString":"struct CoinTossV5.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12730:26:27"},{"assignments":[5918],"declarations":[{"constant":false,"id":5918,"mutability":"mutable","name":"roller","nameLocation":"12774:6:27","nodeType":"VariableDeclaration","scope":6039,"src":"12766:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5917,"name":"uint256","nodeType":"ElementaryTypeName","src":"12766:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5924,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5919,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"12783:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5921,"indexExpression":{"hexValue":"30","id":5920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12795:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12783:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":5922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12800:1:27","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12783:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12766:35:27"},{"assignments":[5930],"declarations":[{"constant":false,"id":5930,"mutability":"mutable","name":"coinSides","nameLocation":"12827:9:27","nodeType":"VariableDeclaration","scope":6039,"src":"12812:24:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$2_memory_ptr","typeString":"bool[2]"},"typeName":{"baseType":{"id":5928,"name":"bool","nodeType":"ElementaryTypeName","src":"12812:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5929,"length":{"hexValue":"32","id":5927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12817:1:27","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"12812:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$2_storage_ptr","typeString":"bool[2]"}},"visibility":"internal"}],"id":5934,"initialValue":{"components":[{"hexValue":"66616c7365","id":5931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12840:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"74727565","id":5932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12847:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"id":5933,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"12839:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$2_memory_ptr","typeString":"bool[2] memory"}},"nodeType":"VariableDeclarationStatement","src":"12812:40:27"},{"assignments":[5936],"declarations":[{"constant":false,"id":5936,"mutability":"mutable","name":"rolledCoinSide","nameLocation":"12867:14:27","nodeType":"VariableDeclaration","scope":6039,"src":"12862:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5935,"name":"bool","nodeType":"ElementaryTypeName","src":"12862:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5940,"initialValue":{"baseExpression":{"id":5937,"name":"coinSides","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"12884:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$2_memory_ptr","typeString":"bool[2] memory"}},"id":5939,"indexExpression":{"id":5938,"name":"roller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5918,"src":"12894:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12884:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12862:39:27"},{"expression":{"id":5945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5941,"name":"coinTossBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"12911:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet storage pointer"}},"id":5943,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"rolled","nodeType":"MemberAccess","referencedDeclaration":5200,"src":"12911:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5944,"name":"rolledCoinSide","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5936,"src":"12932:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12911:35:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5946,"nodeType":"ExpressionStatement","src":"12911:35:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5947,"name":"rolledCoinSide","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5936,"src":"12961:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5948,"name":"coinTossBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"12979:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet storage pointer"}},"id":5949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"face","nodeType":"MemberAccess","referencedDeclaration":5198,"src":"12979:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12961:34:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6023,"nodeType":"Block","src":"13657:79:27","statements":[{"expression":{"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6011,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13671:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":6013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":5137,"src":"13671:12:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13686:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13671:19:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6016,"nodeType":"ExpressionStatement","src":"13671:19:27"},{"expression":{"id":6021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6017,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13704:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":6019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"betStatus","nodeType":"MemberAccess","referencedDeclaration":5149,"src":"13704:13:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13720:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"13704:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6022,"nodeType":"ExpressionStatement","src":"13704:21:27"}]},"id":6024,"nodeType":"IfStatement","src":"12957:779:27","trueBody":{"id":6010,"nodeType":"Block","src":"12997:654:27","statements":[{"expression":{"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5951,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13011:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":5137,"src":"13011:12:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13026:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13011:19:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5956,"nodeType":"ExpressionStatement","src":"13011:19:27"},{"expression":{"id":5961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5957,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13044:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"betStatus","nodeType":"MemberAccess","referencedDeclaration":5149,"src":"13044:13:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13060:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13044:20:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5962,"nodeType":"ExpressionStatement","src":"13044:20:27"},{"assignments":[5964],"declarations":[{"constant":false,"id":5964,"mutability":"mutable","name":"token","nameLocation":"13086:5:27","nodeType":"VariableDeclaration","scope":6010,"src":"13078:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5963,"name":"address","nodeType":"ElementaryTypeName","src":"13078:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5967,"initialValue":{"expression":{"id":5965,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13094:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5966,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"13094:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13078:25:27"},{"assignments":[5969],"declarations":[{"constant":false,"id":5969,"mutability":"mutable","name":"user","nameLocation":"13133:4:27","nodeType":"VariableDeclaration","scope":6010,"src":"13117:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5968,"name":"address","nodeType":"ElementaryTypeName","src":"13117:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":5972,"initialValue":{"expression":{"id":5970,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13140:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5971,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"13140:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"13117:31:27"},{"assignments":[5974],"declarations":[{"constant":false,"id":5974,"mutability":"mutable","name":"betAmount","nameLocation":"13170:9:27","nodeType":"VariableDeclaration","scope":6010,"src":"13162:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5973,"name":"uint256","nodeType":"ElementaryTypeName","src":"13162:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5977,"initialValue":{"expression":{"id":5975,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13182:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":5976,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5145,"src":"13182:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13162:30:27"},{"assignments":[5979],"declarations":[{"constant":false,"id":5979,"mutability":"mutable","name":"payout","nameLocation":"13291:6:27","nodeType":"VariableDeclaration","scope":6010,"src":"13283:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5978,"name":"uint256","nodeType":"ElementaryTypeName","src":"13283:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5983,"initialValue":{"arguments":[{"id":5981,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"13311:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5980,"name":"_getPayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"13300:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13300:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13283:38:27"},{"assignments":[5985],"declarations":[{"constant":false,"id":5985,"mutability":"mutable","name":"profit","nameLocation":"13343:6:27","nodeType":"VariableDeclaration","scope":6010,"src":"13335:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5984,"name":"uint256","nodeType":"ElementaryTypeName","src":"13335:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5987,"initialValue":{"id":5986,"name":"payout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"13352:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13335:23:27"},{"assignments":[5989],"declarations":[{"constant":false,"id":5989,"mutability":"mutable","name":"profitFee","nameLocation":"13381:9:27","nodeType":"VariableDeclaration","scope":6010,"src":"13373:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5988,"name":"uint256","nodeType":"ElementaryTypeName","src":"13373:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5994,"initialValue":{"arguments":[{"id":5991,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5964,"src":"13402:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5992,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"13409:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5990,"name":"_getFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"13393:8:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13393:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13373:46:27"},{"assignments":[5996],"declarations":[{"constant":false,"id":5996,"mutability":"mutable","name":"profitPayout","nameLocation":"13442:12:27","nodeType":"VariableDeclaration","scope":6010,"src":"13434:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5995,"name":"uint256","nodeType":"ElementaryTypeName","src":"13434:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6000,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5997,"name":"profit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5985,"src":"13457:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5998,"name":"profitFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5989,"src":"13466:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13457:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13434:41:27"},{"expression":{"arguments":[{"id":6004,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"13602:4:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":6005,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5964,"src":"13608:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6006,"name":"profitPayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5996,"src":"13615:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6007,"name":"profitFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5989,"src":"13629:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6001,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"13590:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"payout","nodeType":"MemberAccess","referencedDeclaration":7260,"src":"13590:11:27","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_payable_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address payable,address,uint256,uint256) payable external"}},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13590:49:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6009,"nodeType":"ExpressionStatement","src":"13590:49:27"}]}},{"eventCall":{"arguments":[{"expression":{"id":6026,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13769:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":6027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":5143,"src":"13769:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6028,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13789:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":6029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"13789:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":6030,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13811:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":6031,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5141,"src":"13811:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6032,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5912,"src":"13834:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet storage pointer"}},"id":6033,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5145,"src":"13834:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6034,"name":"coinTossBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"13858:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage_ptr","typeString":"struct CoinTossV5.CoinTossBet storage pointer"}},"id":6035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"face","nodeType":"MemberAccess","referencedDeclaration":5198,"src":"13858:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6036,"name":"rolledCoinSide","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5936,"src":"13888:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6025,"name":"Roll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5235,"src":"13751:4:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bool_$returns$__$","typeString":"function (uint256,address,address,uint256,bool,bool)"}},"id":6037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13751:183:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6038,"nodeType":"EmitStatement","src":"13746:188:27"}]},"id":6040,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"12543:18:27","nodeType":"FunctionDefinition","overrides":{"id":5901,"nodeType":"OverrideSpecifier","overrides":[],"src":"12651:8:27"},"parameters":{"id":5900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5896,"mutability":"mutable","name":"id","nameLocation":"12579:2:27","nodeType":"VariableDeclaration","scope":6040,"src":"12571:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5895,"name":"uint256","nodeType":"ElementaryTypeName","src":"12571:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5899,"mutability":"mutable","name":"randomWords","nameLocation":"12624:11:27","nodeType":"VariableDeclaration","scope":6040,"src":"12607:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5897,"name":"uint256","nodeType":"ElementaryTypeName","src":"12607:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5898,"nodeType":"ArrayTypeName","src":"12607:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12561:80:27"},"returnParameters":{"id":5902,"nodeType":"ParameterList","parameters":[],"src":"12660:0:27"},"scope":6125,"src":"12534:1407:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6057,"nodeType":"Block","src":"14040:104:27","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":6046,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"14054:6:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":6047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14054:8:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6055,"nodeType":"Block","src":"14105:33:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6052,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"14119:6:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14119:8:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6054,"nodeType":"ExpressionStatement","src":"14119:8:27"}]},"id":6056,"nodeType":"IfStatement","src":"14050:88:27","trueBody":{"id":6051,"nodeType":"Block","src":"14064:35:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6048,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"14078:8:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14078:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6050,"nodeType":"ExpressionStatement","src":"14078:10:27"}]}}]},"documentation":{"id":6041,"nodeType":"StructuredDocumentation","src":"13947:52:27","text":"@notice Pauses the contract to disable new bets."},"functionSelector":"8456cb59","id":6058,"implemented":true,"kind":"function","modifiers":[{"id":6044,"kind":"modifierInvocation","modifierName":{"id":6043,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"14030:9:27"},"nodeType":"ModifierInvocation","src":"14030:9:27"}],"name":"pause","nameLocation":"14013:5:27","nodeType":"FunctionDefinition","parameters":{"id":6042,"nodeType":"ParameterList","parameters":[],"src":"14018:2:27"},"returnParameters":{"id":6045,"nodeType":"ParameterList","parameters":[],"src":"14040:0:27"},"scope":6125,"src":"14004:140:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6123,"nodeType":"Block","src":"14478:424:27","statements":[{"assignments":[6074],"declarations":[{"constant":false,"id":6074,"mutability":"mutable","name":"lastBets","nameLocation":"14501:8:27","nodeType":"VariableDeclaration","scope":6123,"src":"14488:21:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet[]"},"typeName":{"baseType":{"id":6072,"nodeType":"UserDefinedTypeName","pathNode":{"id":6071,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":5150,"src":"14488:3:27"},"referencedDeclaration":5150,"src":"14488:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_storage_ptr","typeString":"struct CoinTossV5.Bet"}},"id":6073,"nodeType":"ArrayTypeName","src":"14488:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.Bet[]"}},"visibility":"internal"}],"id":6079,"initialValue":{"arguments":[{"id":6076,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6061,"src":"14529:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6077,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6063,"src":"14535:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6075,"name":"_getLastUserBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"14512:16:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr_$","typeString":"function (address,uint256) view returns (struct CoinTossV5.Bet memory[] memory)"}},"id":6078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14512:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14488:58:27"},{"assignments":[6084],"declarations":[{"constant":false,"id":6084,"mutability":"mutable","name":"lastCoinTossBets","nameLocation":"14581:16:27","nodeType":"VariableDeclaration","scope":6123,"src":"14556:41:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet[]"},"typeName":{"baseType":{"id":6082,"nodeType":"UserDefinedTypeName","pathNode":{"id":6081,"name":"FullCoinTossBet","nodeType":"IdentifierPath","referencedDeclaration":5196,"src":"14556:15:27"},"referencedDeclaration":5196,"src":"14556:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_FullCoinTossBet_$5196_storage_ptr","typeString":"struct CoinTossV5.FullCoinTossBet"}},"id":6083,"nodeType":"ArrayTypeName","src":"14556:17:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.FullCoinTossBet[]"}},"visibility":"internal"}],"id":6092,"initialValue":{"arguments":[{"expression":{"id":6089,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6074,"src":"14635:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"id":6090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14635:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14600:21:27","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct CoinTossV5.FullCoinTossBet memory[] memory)"},"typeName":{"baseType":{"id":6086,"nodeType":"UserDefinedTypeName","pathNode":{"id":6085,"name":"FullCoinTossBet","nodeType":"IdentifierPath","referencedDeclaration":5196,"src":"14604:15:27"},"referencedDeclaration":5196,"src":"14604:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_FullCoinTossBet_$5196_storage_ptr","typeString":"struct CoinTossV5.FullCoinTossBet"}},"id":6087,"nodeType":"ArrayTypeName","src":"14604:17:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.FullCoinTossBet[]"}}},"id":6091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14600:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14556:104:27"},{"body":{"id":6119,"nodeType":"Block","src":"14712:151:27","statements":[{"expression":{"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6103,"name":"lastCoinTossBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"14726:16:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet memory[] memory"}},"id":6105,"indexExpression":{"id":6104,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"14743:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14726:19:27","typeDescriptions":{"typeIdentifier":"t_struct$_FullCoinTossBet_$5196_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":6107,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6074,"src":"14781:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"id":6109,"indexExpression":{"id":6108,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"14790:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14781:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},{"baseExpression":{"id":6110,"name":"coinTossBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"14810:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CoinTossBet_$5201_storage_$","typeString":"mapping(uint256 => struct CoinTossV5.CoinTossBet storage ref)"}},"id":6115,"indexExpression":{"expression":{"baseExpression":{"id":6111,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6074,"src":"14823:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"id":6113,"indexExpression":{"id":6112,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"14832:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14823:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"}},"id":6114,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":5143,"src":"14823:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14810:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage","typeString":"struct CoinTossV5.CoinTossBet storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bet_$5150_memory_ptr","typeString":"struct CoinTossV5.Bet memory"},{"typeIdentifier":"t_struct$_CoinTossBet_$5201_storage","typeString":"struct CoinTossV5.CoinTossBet storage ref"}],"id":6106,"name":"FullCoinTossBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5196,"src":"14748:15:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_FullCoinTossBet_$5196_storage_ptr_$","typeString":"type(struct CoinTossV5.FullCoinTossBet storage pointer)"}},"id":6116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14748:104:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_FullCoinTossBet_$5196_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet memory"}},"src":"14726:126:27","typeDescriptions":{"typeIdentifier":"t_struct$_FullCoinTossBet_$5196_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet memory"}},"id":6118,"nodeType":"ExpressionStatement","src":"14726:126:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6096,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"14686:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6097,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6074,"src":"14690:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$5150_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.Bet memory[] memory"}},"id":6098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14690:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14686:19:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6120,"initializationExpression":{"assignments":[6094],"declarations":[{"constant":false,"id":6094,"mutability":"mutable","name":"i","nameLocation":"14683:1:27","nodeType":"VariableDeclaration","scope":6120,"src":"14675:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6093,"name":"uint256","nodeType":"ElementaryTypeName","src":"14675:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6095,"nodeType":"VariableDeclarationStatement","src":"14675:9:27"},"loopExpression":{"expression":{"id":6101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14707:3:27","subExpression":{"id":6100,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"14707:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6102,"nodeType":"ExpressionStatement","src":"14707:3:27"},"nodeType":"ForStatement","src":"14670:193:27"},{"expression":{"id":6121,"name":"lastCoinTossBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"14879:16:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet memory[] memory"}},"functionReturnParameters":6069,"id":6122,"nodeType":"Return","src":"14872:23:27"}]},"documentation":{"id":6059,"nodeType":"StructuredDocumentation","src":"14150:187:27","text":"@notice Gets the list of the last user bets.\n @param user Address of the gamer.\n @param dataLength The amount of bets to return.\n @return A list of Coin Toss bet."},"functionSelector":"c2fb579f","id":6124,"implemented":true,"kind":"function","modifiers":[],"name":"getLastUserBets","nameLocation":"14351:15:27","nodeType":"FunctionDefinition","parameters":{"id":6064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6061,"mutability":"mutable","name":"user","nameLocation":"14375:4:27","nodeType":"VariableDeclaration","scope":6124,"src":"14367:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6060,"name":"address","nodeType":"ElementaryTypeName","src":"14367:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6063,"mutability":"mutable","name":"dataLength","nameLocation":"14389:10:27","nodeType":"VariableDeclaration","scope":6124,"src":"14381:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6062,"name":"uint256","nodeType":"ElementaryTypeName","src":"14381:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14366:34:27"},"returnParameters":{"id":6069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6124,"src":"14448:24:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr","typeString":"struct CoinTossV5.FullCoinTossBet[]"},"typeName":{"baseType":{"id":6066,"nodeType":"UserDefinedTypeName","pathNode":{"id":6065,"name":"FullCoinTossBet","nodeType":"IdentifierPath","referencedDeclaration":5196,"src":"14448:15:27"},"referencedDeclaration":5196,"src":"14448:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_FullCoinTossBet_$5196_storage_ptr","typeString":"struct CoinTossV5.FullCoinTossBet"}},"id":6067,"nodeType":"ArrayTypeName","src":"14448:17:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullCoinTossBet_$5196_storage_$dyn_storage_ptr","typeString":"struct CoinTossV5.FullCoinTossBet[]"}},"visibility":"internal"}],"src":"14447:26:27"},"scope":6125,"src":"14342:560:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6126,"src":"685:14219:27","usedErrors":[55,5114,5116,5118,5120,5122,5124,5183,5186,5189]}],"src":"32:14872:27"},"id":27},"contracts/Dice.sol":{"ast":{"absolutePath":"contracts/Dice.sol","exportedSymbols":{"DiceV4":[7237],"IBankV2":[7313],"IERC20":[1122],"Multicall":[1966],"Ownable":[871],"Pausable":[979],"ReentrancyGuard":[1044],"SafeERC20":[1559],"VRFConsumerBaseV2":[104],"VRFCoordinatorV2Interface":[219]},"id":7238,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6127,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":6129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":872,"src":"58:67:28","symbolAliases":[{"foreign":{"id":6128,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"66:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Ownable_$871_$","typeString":"type(contract Ownable)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Multicall.sol","file":"@openzeppelin/contracts/utils/Multicall.sol","id":6131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":1967,"src":"126:70:28","symbolAliases":[{"foreign":{"id":6130,"name":"Multicall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"134:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Multicall_$1966_$","typeString":"type(contract Multicall)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"@openzeppelin/contracts/security/Pausable.sol","id":6133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":980,"src":"197:71:28","symbolAliases":[{"foreign":{"id":6132,"name":"Pausable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"205:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Pausable_$979_$","typeString":"type(contract Pausable)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":6136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":1560,"src":"269:90:28","symbolAliases":[{"foreign":{"id":6134,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"277:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":6135,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"285:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20_$1559_$","typeString":"type(library SafeERC20)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":6138,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":1045,"src":"360:85:28","symbolAliases":[{"foreign":{"id":6137,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"368:15:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ReentrancyGuard_$1044_$","typeString":"type(contract ReentrancyGuard)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":6139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":220,"src":"447:80:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":6140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":105,"src":"528:61:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interface/IBankV2.sol","file":"./interface/IBankV2.sol","id":6142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7238,"sourceUnit":7314,"src":"591:48:28","symbolAliases":[{"foreign":{"id":6141,"name":"IBankV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"599:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBankV2_$7313_$","typeString":"type(contract IBankV2)"}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6143,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":104,"src":"664:17:28"},"id":6144,"nodeType":"InheritanceSpecifier","src":"664:17:28"},{"baseName":{"id":6145,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":871,"src":"687:7:28"},"id":6146,"nodeType":"InheritanceSpecifier","src":"687:7:28"},{"baseName":{"id":6147,"name":"Pausable","nodeType":"IdentifierPath","referencedDeclaration":979,"src":"700:8:28"},"id":6148,"nodeType":"InheritanceSpecifier","src":"700:8:28"},{"baseName":{"id":6149,"name":"Multicall","nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"714:9:28"},"id":6150,"nodeType":"InheritanceSpecifier","src":"714:9:28"},{"baseName":{"id":6151,"name":"ReentrancyGuard","nodeType":"IdentifierPath","referencedDeclaration":1044,"src":"729:15:28"},"id":6152,"nodeType":"InheritanceSpecifier","src":"729:15:28"}],"canonicalName":"DiceV4","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":7237,"linearizedBaseContracts":[7237,1044,1966,979,871,1911,104],"name":"DiceV4","nameLocation":"650:6:28","nodeType":"ContractDefinition","nodes":[{"id":6156,"libraryName":{"id":6153,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1559,"src":"757:9:28"},"nodeType":"UsingForDirective","src":"751:27:28","typeName":{"id":6155,"nodeType":"UserDefinedTypeName","pathNode":{"id":6154,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"771:6:28"},"referencedDeclaration":1122,"src":"771:6:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}}},{"constant":false,"id":6158,"mutability":"mutable","name":"s_subscriptionId","nameLocation":"791:16:28","nodeType":"VariableDeclaration","scope":7237,"src":"784:23:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6157,"name":"uint64","nodeType":"ElementaryTypeName","src":"784:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6161,"mutability":"mutable","name":"COORDINATOR","nameLocation":"840:11:28","nodeType":"VariableDeclaration","scope":7237,"src":"814:37:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":6160,"nodeType":"UserDefinedTypeName","pathNode":{"id":6159,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":219,"src":"814:25:28"},"referencedDeclaration":219,"src":"814:25:28","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"internal"},{"constant":false,"id":6164,"mutability":"mutable","name":"vrfCoordinator","nameLocation":"866:14:28","nodeType":"VariableDeclaration","scope":7237,"src":"858:67:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6162,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862643133663038623833353241333633353231386162393431384533343063363064364562343138","id":6163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"883:42:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbd13f08b8352A3635218ab9418E340c60d6Eb418"},"visibility":"internal"},{"constant":false,"id":6167,"mutability":"mutable","name":"keyHash","nameLocation":"1146:7:28","nodeType":"VariableDeclaration","scope":7237,"src":"1138:92:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1138:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307831323161313433303636653066326630386236323037383461663737636363623335633632343234363062346138656532353162346234313661626165626434","id":6166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1164:66:28","typeDescriptions":{"typeIdentifier":"t_rational_8187708638021801212127066638579471321700834395232224440760253399419588373460_by_1","typeString":"int_const 8187...(68 digits omitted)...3460"},"value":"0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4"},"visibility":"internal"},{"constant":false,"id":6170,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1244:16:28","nodeType":"VariableDeclaration","scope":7237,"src":"1237:32:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6168,"name":"uint32","nodeType":"ElementaryTypeName","src":"1237:6:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"323030303030","id":6169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1263:6:28","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200000"},"visibility":"internal"},{"constant":false,"id":6173,"mutability":"mutable","name":"requestConfirmations","nameLocation":"1337:20:28","nodeType":"VariableDeclaration","scope":7237,"src":"1330:31:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6171,"name":"uint16","nodeType":"ElementaryTypeName","src":"1330:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":6172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1360:1:28","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":false,"id":6176,"mutability":"mutable","name":"numWords","nameLocation":"1494:8:28","nodeType":"VariableDeclaration","scope":7237,"src":"1487:19:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6174,"name":"uint32","nodeType":"ElementaryTypeName","src":"1487:6:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"32","id":6175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1505:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":false,"functionSelector":"1d3c7b91","id":6178,"mutability":"mutable","name":"s_randomWords","nameLocation":"1528:13:28","nodeType":"VariableDeclaration","scope":7237,"src":"1513:28:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6177,"name":"uint256","nodeType":"ElementaryTypeName","src":"1513:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e89e106a","id":6180,"mutability":"mutable","name":"s_requestId","nameLocation":"1562:11:28","nodeType":"VariableDeclaration","scope":7237,"src":"1547:26:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e3978240","id":6182,"mutability":"mutable","name":"s_owner","nameLocation":"1594:7:28","nodeType":"VariableDeclaration","scope":7237,"src":"1579:22:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6181,"name":"address","nodeType":"ElementaryTypeName","src":"1579:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"76cdb03b","id":6185,"mutability":"mutable","name":"bank","nameLocation":"1623:4:28","nodeType":"VariableDeclaration","scope":7237,"src":"1608:19:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"},"typeName":{"id":6184,"nodeType":"UserDefinedTypeName","pathNode":{"id":6183,"name":"IBankV2","nodeType":"IdentifierPath","referencedDeclaration":7313,"src":"1608:7:28"},"referencedDeclaration":7313,"src":"1608:7:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":6186,"nodeType":"StructuredDocumentation","src":"1633:92:28","text":"@notice Emitted after the bank is set.\n @param bank Address of the bank contract."},"id":6190,"name":"SetBank","nameLocation":"1736:7:28","nodeType":"EventDefinition","parameters":{"id":6189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6188,"indexed":false,"mutability":"mutable","name":"bank","nameLocation":"1752:4:28","nodeType":"VariableDeclaration","scope":6190,"src":"1744:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6187,"name":"address","nodeType":"ElementaryTypeName","src":"1744:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1743:14:28"},"src":"1730:28:28"},{"anonymous":false,"documentation":{"id":6191,"nodeType":"StructuredDocumentation","src":"1763:145:28","text":"@notice Emitted after the house edge is set for a token.\n @param token Address of the token.\n @param houseEdge House edge rate."},"id":6197,"name":"SetHouseEdge","nameLocation":"1919:12:28","nodeType":"EventDefinition","parameters":{"id":6196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6193,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1948:5:28","nodeType":"VariableDeclaration","scope":6197,"src":"1932:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6192,"name":"address","nodeType":"ElementaryTypeName","src":"1932:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6195,"indexed":false,"mutability":"mutable","name":"houseEdge","nameLocation":"1962:9:28","nodeType":"VariableDeclaration","scope":6197,"src":"1955:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6194,"name":"uint16","nodeType":"ElementaryTypeName","src":"1955:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1931:41:28"},"src":"1913:60:28"},{"id":6199,"name":"ExcessiveHouseEdge","nameLocation":"1985:18:28","nodeType":"ErrorDefinition","parameters":{"id":6198,"nodeType":"ParameterList","parameters":[],"src":"2003:2:28"},"src":"1979:27:28"},{"id":6201,"name":"ForbiddenToken","nameLocation":"2017:14:28","nodeType":"ErrorDefinition","parameters":{"id":6200,"nodeType":"ParameterList","parameters":[],"src":"2031:2:28"},"src":"2011:23:28"},{"id":6203,"name":"WrongGasValueToCoverFee","nameLocation":"2045:23:28","nodeType":"ErrorDefinition","parameters":{"id":6202,"nodeType":"ParameterList","parameters":[],"src":"2068:2:28"},"src":"2039:32:28"},{"id":6205,"name":"AccessDenied","nameLocation":"2082:12:28","nodeType":"ErrorDefinition","parameters":{"id":6204,"nodeType":"ParameterList","parameters":[],"src":"2094:2:28"},"src":"2076:21:28"},{"id":6207,"name":"InvalidAddress","nameLocation":"2108:14:28","nodeType":"ErrorDefinition","parameters":{"id":6206,"nodeType":"ParameterList","parameters":[],"src":"2122:2:28"},"src":"2102:23:28"},{"id":6209,"name":"TokenHasPendingBets","nameLocation":"2136:19:28","nodeType":"ErrorDefinition","parameters":{"id":6208,"nodeType":"ParameterList","parameters":[],"src":"2155:2:28"},"src":"2130:28:28"},{"canonicalName":"DiceV4.Bet","id":6224,"members":[{"constant":false,"id":6211,"mutability":"mutable","name":"resolved","nameLocation":"2190:8:28","nodeType":"VariableDeclaration","scope":6224,"src":"2185:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6210,"name":"bool","nodeType":"ElementaryTypeName","src":"2185:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6213,"mutability":"mutable","name":"user","nameLocation":"2224:4:28","nodeType":"VariableDeclaration","scope":6224,"src":"2208:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":6212,"name":"address","nodeType":"ElementaryTypeName","src":"2208:15:28","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":6215,"mutability":"mutable","name":"token","nameLocation":"2246:5:28","nodeType":"VariableDeclaration","scope":6224,"src":"2238:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6214,"name":"address","nodeType":"ElementaryTypeName","src":"2238:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6217,"mutability":"mutable","name":"id","nameLocation":"2269:2:28","nodeType":"VariableDeclaration","scope":6224,"src":"2261:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6216,"name":"uint256","nodeType":"ElementaryTypeName","src":"2261:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6219,"mutability":"mutable","name":"amount","nameLocation":"2289:6:28","nodeType":"VariableDeclaration","scope":6224,"src":"2281:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6218,"name":"uint256","nodeType":"ElementaryTypeName","src":"2281:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6221,"mutability":"mutable","name":"blockTime","nameLocation":"2313:9:28","nodeType":"VariableDeclaration","scope":6224,"src":"2305:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6220,"name":"uint256","nodeType":"ElementaryTypeName","src":"2305:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6223,"mutability":"mutable","name":"betStatus","nameLocation":"2337:9:28","nodeType":"VariableDeclaration","scope":6224,"src":"2332:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6222,"name":"bool","nodeType":"ElementaryTypeName","src":"2332:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Bet","nameLocation":"2171:3:28","nodeType":"StructDefinition","scope":7237,"src":"2164:216:28","visibility":"public"},{"constant":false,"documentation":{"id":6225,"nodeType":"StructuredDocumentation","src":"2386:45:28","text":"@notice Maps bets IDs to Bet information."},"functionSelector":"22af00fa","id":6230,"mutability":"mutable","name":"bets","nameLocation":"2467:4:28","nodeType":"VariableDeclaration","scope":7237,"src":"2436:35:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet)"},"typeName":{"id":6229,"keyType":{"id":6226,"name":"uint256","nodeType":"ElementaryTypeName","src":"2444:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2436:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet)"},"valueType":{"id":6228,"nodeType":"UserDefinedTypeName","pathNode":{"id":6227,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"2455:3:28"},"referencedDeclaration":6224,"src":"2455:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}}},"visibility":"public"},{"constant":false,"documentation":{"id":6231,"nodeType":"StructuredDocumentation","src":"2478:45:28","text":"@notice Maps users addrejsses to bets IDs"},"id":6236,"mutability":"mutable","name":"_userBets","nameLocation":"2567:9:28","nodeType":"VariableDeclaration","scope":7237,"src":"2528:48:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":6235,"keyType":{"id":6232,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2528:29:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueType":{"baseType":{"id":6233,"name":"uint256","nodeType":"ElementaryTypeName","src":"2547:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6234,"nodeType":"ArrayTypeName","src":"2547:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"internal"},{"anonymous":false,"documentation":{"id":6237,"nodeType":"StructuredDocumentation","src":"2583:263:28","text":"@notice Emitted after the bet amount is transfered to the user.\n @param id The bet ID.\n @param user Address of the gamer.\n @param amount Number of tokens refunded.\n @param chainlinkVRFCost The Chainlink VRF cost refunded to player."},"id":6247,"name":"BetRefunded","nameLocation":"2857:11:28","nodeType":"EventDefinition","parameters":{"id":6246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6239,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"2886:2:28","nodeType":"VariableDeclaration","scope":6247,"src":"2878:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6238,"name":"uint256","nodeType":"ElementaryTypeName","src":"2878:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6241,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"2906:4:28","nodeType":"VariableDeclaration","scope":6247,"src":"2898:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6240,"name":"address","nodeType":"ElementaryTypeName","src":"2898:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6243,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2928:6:28","nodeType":"VariableDeclaration","scope":6247,"src":"2920:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6242,"name":"uint256","nodeType":"ElementaryTypeName","src":"2920:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6245,"indexed":false,"mutability":"mutable","name":"chainlinkVRFCost","nameLocation":"2952:16:28","nodeType":"VariableDeclaration","scope":6247,"src":"2944:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6244,"name":"uint256","nodeType":"ElementaryTypeName","src":"2944:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2868:106:28"},"src":"2851:124:28"},{"documentation":{"id":6248,"nodeType":"StructuredDocumentation","src":"2981:76:28","text":"@notice Insufficient bet amount.\n @param minBetAmount Bet amount."},"id":6252,"name":"UnderMinBetAmount","nameLocation":"3068:17:28","nodeType":"ErrorDefinition","parameters":{"id":6251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6250,"mutability":"mutable","name":"minBetAmount","nameLocation":"3094:12:28","nodeType":"VariableDeclaration","scope":6252,"src":"3086:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6249,"name":"uint256","nodeType":"ElementaryTypeName","src":"3086:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3085:22:28"},"src":"3062:46:28"},{"documentation":{"id":6253,"nodeType":"StructuredDocumentation","src":"3114:35:28","text":"@notice Bet isn't resolved yet."},"id":6255,"name":"NotFulfilled","nameLocation":"3160:12:28","nodeType":"ErrorDefinition","parameters":{"id":6254,"nodeType":"ParameterList","parameters":[],"src":"3172:2:28"},"src":"3154:21:28"},{"documentation":{"id":6256,"nodeType":"StructuredDocumentation","src":"3181:63:28","text":"@notice Bet provided doesn't exist or was already resolved."},"id":6258,"name":"NotPendingBet","nameLocation":"3255:13:28","nodeType":"ErrorDefinition","parameters":{"id":6257,"nodeType":"ParameterList","parameters":[],"src":"3268:2:28"},"src":"3249:22:28"},{"canonicalName":"DiceV4.FullDiceBet","id":6265,"members":[{"constant":false,"id":6261,"mutability":"mutable","name":"bet","nameLocation":"3527:3:28","nodeType":"VariableDeclaration","scope":6265,"src":"3523:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6260,"nodeType":"UserDefinedTypeName","pathNode":{"id":6259,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"3523:3:28"},"referencedDeclaration":6224,"src":"3523:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"},{"constant":false,"id":6264,"mutability":"mutable","name":"diceBet","nameLocation":"3548:7:28","nodeType":"VariableDeclaration","scope":6265,"src":"3540:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet"},"typeName":{"id":6263,"nodeType":"UserDefinedTypeName","pathNode":{"id":6262,"name":"DiceBet","nodeType":"IdentifierPath","referencedDeclaration":6270,"src":"3540:7:28"},"referencedDeclaration":6270,"src":"3540:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet"}},"visibility":"internal"}],"name":"FullDiceBet","nameLocation":"3501:11:28","nodeType":"StructDefinition","scope":7237,"src":"3494:68:28","visibility":"public"},{"canonicalName":"DiceV4.DiceBet","id":6270,"members":[{"constant":false,"id":6267,"mutability":"mutable","name":"cap","nameLocation":"3733:3:28","nodeType":"VariableDeclaration","scope":6270,"src":"3727:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6266,"name":"uint8","nodeType":"ElementaryTypeName","src":"3727:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6269,"mutability":"mutable","name":"rolled","nameLocation":"3752:6:28","nodeType":"VariableDeclaration","scope":6270,"src":"3746:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6268,"name":"uint8","nodeType":"ElementaryTypeName","src":"3746:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"DiceBet","nameLocation":"3709:7:28","nodeType":"StructDefinition","scope":7237,"src":"3702:63:28","visibility":"public"},{"constant":false,"documentation":{"id":6271,"nodeType":"StructuredDocumentation","src":"3771:60:28","text":"@notice Maps bets IDs to chosen and rolled dice numbers."},"functionSelector":"42258eca","id":6276,"mutability":"mutable","name":"diceBets","nameLocation":"3871:8:28","nodeType":"VariableDeclaration","scope":7237,"src":"3836:43:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DiceBet_$6270_storage_$","typeString":"mapping(uint256 => struct DiceV4.DiceBet)"},"typeName":{"id":6275,"keyType":{"id":6272,"name":"uint256","nodeType":"ElementaryTypeName","src":"3844:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3836:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DiceBet_$6270_storage_$","typeString":"mapping(uint256 => struct DiceV4.DiceBet)"},"valueType":{"id":6274,"nodeType":"UserDefinedTypeName","pathNode":{"id":6273,"name":"DiceBet","nodeType":"IdentifierPath","referencedDeclaration":6270,"src":"3855:7:28"},"referencedDeclaration":6270,"src":"3855:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet"}}},"visibility":"public"},{"canonicalName":"DiceV4.betAudit","id":6281,"members":[{"constant":false,"id":6278,"mutability":"mutable","name":"paid","nameLocation":"3917:4:28","nodeType":"VariableDeclaration","scope":6281,"src":"3912:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6277,"name":"bool","nodeType":"ElementaryTypeName","src":"3912:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6280,"mutability":"mutable","name":"betId","nameLocation":"3939:5:28","nodeType":"VariableDeclaration","scope":6281,"src":"3931:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6279,"name":"uint256","nodeType":"ElementaryTypeName","src":"3931:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"betAudit","nameLocation":"3893:8:28","nodeType":"StructDefinition","scope":7237,"src":"3886:65:28","visibility":"public"},{"constant":false,"id":6286,"mutability":"mutable","name":"betAuditCheck","nameLocation":"3986:13:28","nodeType":"VariableDeclaration","scope":7237,"src":"3957:42:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_betAudit_$6281_storage_$","typeString":"mapping(uint256 => struct DiceV4.betAudit)"},"typeName":{"id":6285,"keyType":{"id":6282,"name":"uint256","nodeType":"ElementaryTypeName","src":"3965:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3957:28:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_betAudit_$6281_storage_$","typeString":"mapping(uint256 => struct DiceV4.betAudit)"},"valueType":{"id":6284,"nodeType":"UserDefinedTypeName","pathNode":{"id":6283,"name":"betAudit","nodeType":"IdentifierPath","referencedDeclaration":6281,"src":"3976:8:28"},"referencedDeclaration":6281,"src":"3976:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_betAudit_$6281_storage_ptr","typeString":"struct DiceV4.betAudit"}}},"visibility":"internal"},{"anonymous":false,"documentation":{"id":6287,"nodeType":"StructuredDocumentation","src":"4006:236:28","text":"@notice Emitted after a bet is placed.\n @param id The bet ID.\n @param user Address of the gamer.\n @param token Address of the token.\n @param amount The bet amount.\n @param cap The chosen coin face."},"id":6299,"name":"PlaceBet","nameLocation":"4253:8:28","nodeType":"EventDefinition","parameters":{"id":6298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6289,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"4279:2:28","nodeType":"VariableDeclaration","scope":6299,"src":"4271:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6288,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6291,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"4307:4:28","nodeType":"VariableDeclaration","scope":6299,"src":"4291:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6290,"name":"address","nodeType":"ElementaryTypeName","src":"4291:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6293,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4337:5:28","nodeType":"VariableDeclaration","scope":6299,"src":"4321:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6292,"name":"address","nodeType":"ElementaryTypeName","src":"4321:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6295,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4360:6:28","nodeType":"VariableDeclaration","scope":6299,"src":"4352:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6294,"name":"uint256","nodeType":"ElementaryTypeName","src":"4352:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6297,"indexed":false,"mutability":"mutable","name":"cap","nameLocation":"4382:3:28","nodeType":"VariableDeclaration","scope":6299,"src":"4376:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6296,"name":"uint8","nodeType":"ElementaryTypeName","src":"4376:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4261:130:28"},"src":"4247:145:28"},{"anonymous":false,"documentation":{"id":6300,"nodeType":"StructuredDocumentation","src":"4398:284:28","text":"@notice Emitted after a bet is rolled.\n @param id The bet ID.\n @param user Address of the gamer.\n @param token Address of the token.\n @param amount The bet amount.\n @param cap The chosen dice number.\n @param rolled The rolled dice number."},"id":6314,"name":"Roll","nameLocation":"4735:4:28","nodeType":"EventDefinition","parameters":{"id":6313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6302,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"4757:2:28","nodeType":"VariableDeclaration","scope":6314,"src":"4749:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6301,"name":"uint256","nodeType":"ElementaryTypeName","src":"4749:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6304,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"4785:4:28","nodeType":"VariableDeclaration","scope":6314,"src":"4769:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6303,"name":"address","nodeType":"ElementaryTypeName","src":"4769:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6306,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4815:5:28","nodeType":"VariableDeclaration","scope":6314,"src":"4799:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6305,"name":"address","nodeType":"ElementaryTypeName","src":"4799:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6308,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4838:6:28","nodeType":"VariableDeclaration","scope":6314,"src":"4830:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6307,"name":"uint256","nodeType":"ElementaryTypeName","src":"4830:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6310,"indexed":false,"mutability":"mutable","name":"cap","nameLocation":"4860:3:28","nodeType":"VariableDeclaration","scope":6314,"src":"4854:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6309,"name":"uint8","nodeType":"ElementaryTypeName","src":"4854:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6312,"indexed":false,"mutability":"mutable","name":"rolled","nameLocation":"4879:6:28","nodeType":"VariableDeclaration","scope":6314,"src":"4873:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6311,"name":"uint8","nodeType":"ElementaryTypeName","src":"4873:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4739:178:28"},"src":"4729:189:28"},{"documentation":{"id":6315,"nodeType":"StructuredDocumentation","src":"4924:135:28","text":"@notice Provided cap is not within 1 and 99 included.\n @param minCap The minimum cap.\n @param maxCap The maximum cap."},"id":6321,"name":"CapNotInRange","nameLocation":"5070:13:28","nodeType":"ErrorDefinition","parameters":{"id":6320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6317,"mutability":"mutable","name":"minCap","nameLocation":"5090:6:28","nodeType":"VariableDeclaration","scope":6321,"src":"5084:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6316,"name":"uint8","nodeType":"ElementaryTypeName","src":"5084:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6319,"mutability":"mutable","name":"maxCap","nameLocation":"5104:6:28","nodeType":"VariableDeclaration","scope":6321,"src":"5098:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6318,"name":"uint8","nodeType":"ElementaryTypeName","src":"5098:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5083:28:28"},"src":"5064:48:28"},{"canonicalName":"DiceV4.Token","id":6326,"members":[{"constant":false,"id":6323,"mutability":"mutable","name":"houseEdge","nameLocation":"5148:9:28","nodeType":"VariableDeclaration","scope":6326,"src":"5141:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6322,"name":"uint16","nodeType":"ElementaryTypeName","src":"5141:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6325,"mutability":"mutable","name":"pendingCount","nameLocation":"5174:12:28","nodeType":"VariableDeclaration","scope":6326,"src":"5167:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6324,"name":"uint64","nodeType":"ElementaryTypeName","src":"5167:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"Token","nameLocation":"5125:5:28","nodeType":"StructDefinition","scope":7237,"src":"5118:75:28","visibility":"public"},{"constant":false,"documentation":{"id":6327,"nodeType":"StructuredDocumentation","src":"5198:57:28","text":"@notice Maps tokens addresses to token configuration."},"functionSelector":"e4860339","id":6332,"mutability":"mutable","name":"tokens","nameLocation":"5293:6:28","nodeType":"VariableDeclaration","scope":7237,"src":"5260:39:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token)"},"typeName":{"id":6331,"keyType":{"id":6328,"name":"address","nodeType":"ElementaryTypeName","src":"5268:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5260:25:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token)"},"valueType":{"id":6330,"nodeType":"UserDefinedTypeName","pathNode":{"id":6329,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":6326,"src":"5279:5:28"},"referencedDeclaration":6326,"src":"5279:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token"}}},"visibility":"public"},{"body":{"id":6363,"nodeType":"Block","src":"5426:184:28","statements":[{"expression":{"id":6346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6342,"name":"COORDINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"5436:11:28","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6344,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"5476:14:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6343,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"5450:25:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$219_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":6345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5450:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"src":"5436:55:28","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"id":6347,"nodeType":"ExpressionStatement","src":"5436:55:28"},{"expression":{"id":6351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6348,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"5501:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6349,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5511:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5511:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5501:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6352,"nodeType":"ExpressionStatement","src":"5501:20:28"},{"expression":{"id":6355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6353,"name":"s_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"5531:16:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6354,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6334,"src":"5550:14:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5531:33:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":6356,"nodeType":"ExpressionStatement","src":"5531:33:28"},{"expression":{"arguments":[{"arguments":[{"id":6359,"name":"bankAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6336,"src":"5590:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6358,"name":"IBankV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"5582:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBankV2_$7313_$","typeString":"type(contract IBankV2)"}},"id":6360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5582:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":6357,"name":"setBank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6412,"src":"5574:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IBankV2_$7313_$returns$__$","typeString":"function (contract IBankV2)"}},"id":6361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5574:29:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6362,"nodeType":"ExpressionStatement","src":"5574:29:28"}]},"id":6364,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6339,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"5406:14:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6340,"kind":"baseConstructorSpecifier","modifierName":{"id":6338,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":104,"src":"5388:17:28"},"nodeType":"ModifierInvocation","src":"5388:33:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6334,"mutability":"mutable","name":"subscriptionId","nameLocation":"5343:14:28","nodeType":"VariableDeclaration","scope":6364,"src":"5336:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6333,"name":"uint64","nodeType":"ElementaryTypeName","src":"5336:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6336,"mutability":"mutable","name":"bankAddress","nameLocation":"5367:11:28","nodeType":"VariableDeclaration","scope":6364,"src":"5359:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6335,"name":"address","nodeType":"ElementaryTypeName","src":"5359:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5335:44:28"},"returnParameters":{"id":6341,"nodeType":"ParameterList","parameters":[],"src":"5426:0:28"},"scope":7237,"src":"5324:286:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6379,"nodeType":"Block","src":"5794:55:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":6377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6372,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6332,"src":"5811:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token storage ref)"}},"id":6374,"indexExpression":{"id":6373,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"5818:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5811:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage","typeString":"struct DiceV4.Token storage ref"}},"id":6375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pendingCount","nodeType":"MemberAccess","referencedDeclaration":6325,"src":"5811:26:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5841:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5811:31:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6371,"id":6378,"nodeType":"Return","src":"5804:38:28"}]},"documentation":{"id":6365,"nodeType":"StructuredDocumentation","src":"5616:107:28","text":"@notice Returns whether the token has pending bets.\n @return Whether the token has pending bets."},"functionSelector":"594043fd","id":6380,"implemented":true,"kind":"function","modifiers":[],"name":"hasPendingBets","nameLocation":"5737:14:28","nodeType":"FunctionDefinition","parameters":{"id":6368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6367,"mutability":"mutable","name":"token","nameLocation":"5760:5:28","nodeType":"VariableDeclaration","scope":6380,"src":"5752:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6366,"name":"address","nodeType":"ElementaryTypeName","src":"5752:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5751:15:28"},"returnParameters":{"id":6371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6380,"src":"5788:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6369,"name":"bool","nodeType":"ElementaryTypeName","src":"5788:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5787:6:28"},"scope":7237,"src":"5728:121:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6411,"nodeType":"Block","src":"5995:190:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6391,"name":"_bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"6017:5:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":6390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6009:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6389,"name":"address","nodeType":"ElementaryTypeName","src":"6009:7:28","typeDescriptions":{}}},"id":6392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6009:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6035:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6027:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6393,"name":"address","nodeType":"ElementaryTypeName","src":"6027:7:28","typeDescriptions":{}}},"id":6396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6027:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6009:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6399,"nodeType":"IfStatement","src":"6005:114:28","trueBody":{"id":6398,"nodeType":"Block","src":"6039:80:28","statements":[]}},{"expression":{"id":6402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6400,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"6128:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6401,"name":"_bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"6135:5:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"src":"6128:12:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":6403,"nodeType":"ExpressionStatement","src":"6128:12:28"},{"eventCall":{"arguments":[{"arguments":[{"id":6407,"name":"_bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"6171:5:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":6406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6163:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6405,"name":"address","nodeType":"ElementaryTypeName","src":"6163:7:28","typeDescriptions":{}}},"id":6408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6163:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6404,"name":"SetBank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6190,"src":"6155:7:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6155:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6410,"nodeType":"EmitStatement","src":"6150:28:28"}]},"documentation":{"id":6381,"nodeType":"StructuredDocumentation","src":"5855:86:28","text":"@notice Sets the Bank contract.\n @param _bank Address of the Bank contract."},"functionSelector":"090d23b9","id":6412,"implemented":true,"kind":"function","modifiers":[{"id":6387,"kind":"modifierInvocation","modifierName":{"id":6386,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"5985:9:28"},"nodeType":"ModifierInvocation","src":"5985:9:28"}],"name":"setBank","nameLocation":"5955:7:28","nodeType":"FunctionDefinition","parameters":{"id":6385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6384,"mutability":"mutable","name":"_bank","nameLocation":"5971:5:28","nodeType":"VariableDeclaration","scope":6412,"src":"5963:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"},"typeName":{"id":6383,"nodeType":"UserDefinedTypeName","pathNode":{"id":6382,"name":"IBankV2","nodeType":"IdentifierPath","referencedDeclaration":7313,"src":"5963:7:28"},"referencedDeclaration":7313,"src":"5963:7:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"visibility":"internal"}],"src":"5962:15:28"},"returnParameters":{"id":6388,"nodeType":"ParameterList","parameters":[],"src":"5995:0:28"},"scope":7237,"src":"5946:239:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6450,"nodeType":"Block","src":"6471:268:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":6424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6422,"name":"houseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6417,"src":"6485:9:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"343030","id":6423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6497:3:28","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"},"src":"6485:15:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6429,"nodeType":"IfStatement","src":"6481:73:28","trueBody":{"id":6428,"nodeType":"Block","src":"6502:52:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6425,"name":"ExcessiveHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"6523:18:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6523:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6427,"nodeType":"RevertStatement","src":"6516:27:28"}]}},{"condition":{"arguments":[{"id":6431,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"6582:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6430,"name":"hasPendingBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"6567:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6567:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6437,"nodeType":"IfStatement","src":"6563:80:28","trueBody":{"id":6436,"nodeType":"Block","src":"6590:53:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6433,"name":"TokenHasPendingBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6209,"src":"6611:19:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6611:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6435,"nodeType":"RevertStatement","src":"6604:28:28"}]}},{"expression":{"id":6443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6438,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6332,"src":"6652:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token storage ref)"}},"id":6440,"indexExpression":{"id":6439,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"6659:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6652:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage","typeString":"struct DiceV4.Token storage ref"}},"id":6441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"houseEdge","nodeType":"MemberAccess","referencedDeclaration":6323,"src":"6652:23:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6442,"name":"houseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6417,"src":"6678:9:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6652:35:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":6444,"nodeType":"ExpressionStatement","src":"6652:35:28"},{"eventCall":{"arguments":[{"id":6446,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"6715:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6447,"name":"houseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6417,"src":"6722:9:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":6445,"name":"SetHouseEdge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6197,"src":"6702:12:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint16_$returns$__$","typeString":"function (address,uint16)"}},"id":6448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6702:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6449,"nodeType":"EmitStatement","src":"6697:35:28"}]},"documentation":{"id":6413,"nodeType":"StructuredDocumentation","src":"6191:201:28","text":"@notice Sets the game house edge rate for a specific token.\n @param token Address of the token.\n @param houseEdge House edge rate.\n @dev The house edge rate couldn't exceed 4%."},"functionSelector":"78bcde22","id":6451,"implemented":true,"kind":"function","modifiers":[{"id":6420,"kind":"modifierInvocation","modifierName":{"id":6419,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"6461:9:28"},"nodeType":"ModifierInvocation","src":"6461:9:28"}],"name":"setHouseEdge","nameLocation":"6406:12:28","nodeType":"FunctionDefinition","parameters":{"id":6418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6415,"mutability":"mutable","name":"token","nameLocation":"6427:5:28","nodeType":"VariableDeclaration","scope":6451,"src":"6419:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6414,"name":"address","nodeType":"ElementaryTypeName","src":"6419:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6417,"mutability":"mutable","name":"houseEdge","nameLocation":"6441:9:28","nodeType":"VariableDeclaration","scope":6451,"src":"6434:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6416,"name":"uint16","nodeType":"ElementaryTypeName","src":"6434:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6418:33:28"},"returnParameters":{"id":6421,"nodeType":"ParameterList","parameters":[],"src":"6471:0:28"},"scope":7237,"src":"6397:342:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6466,"nodeType":"Block","src":"6970:43:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6459,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6454,"src":"6987:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7004:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6996:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6460,"name":"address","nodeType":"ElementaryTypeName","src":"6996:7:28","typeDescriptions":{}}},"id":6463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6996:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6987:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6458,"id":6465,"nodeType":"Return","src":"6980:26:28"}]},"documentation":{"id":6452,"nodeType":"StructuredDocumentation","src":"6745:156:28","text":"@notice Check if the token has the 0x address.\n @param token Address of the token.\n @return Whether the token's address is the 0x address."},"id":6467,"implemented":true,"kind":"function","modifiers":[],"name":"_isGasToken","nameLocation":"6915:11:28","nodeType":"FunctionDefinition","parameters":{"id":6455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6454,"mutability":"mutable","name":"token","nameLocation":"6935:5:28","nodeType":"VariableDeclaration","scope":6467,"src":"6927:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6453,"name":"address","nodeType":"ElementaryTypeName","src":"6927:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6926:15:28"},"returnParameters":{"id":6458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6467,"src":"6964:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6456,"name":"bool","nodeType":"ElementaryTypeName","src":"6964:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6963:6:28"},"scope":7237,"src":"6906:107:28","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6486,"nodeType":"Block","src":"7127:66:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6476,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6332,"src":"7145:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token storage ref)"}},"id":6478,"indexExpression":{"id":6477,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6469,"src":"7152:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7145:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage","typeString":"struct DiceV4.Token storage ref"}},"id":6479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdge","nodeType":"MemberAccess","referencedDeclaration":6323,"src":"7145:23:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6480,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6471,"src":"7171:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7145:32:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7144:34:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":6483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:5:28","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"7144:42:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6475,"id":6485,"nodeType":"Return","src":"7137:49:28"}]},"id":6487,"implemented":true,"kind":"function","modifiers":[],"name":"_getFees","nameLocation":"7028:8:28","nodeType":"FunctionDefinition","parameters":{"id":6472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6469,"mutability":"mutable","name":"token","nameLocation":"7045:5:28","nodeType":"VariableDeclaration","scope":6487,"src":"7037:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6468,"name":"address","nodeType":"ElementaryTypeName","src":"7037:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6471,"mutability":"mutable","name":"amount","nameLocation":"7060:6:28","nodeType":"VariableDeclaration","scope":6487,"src":"7052:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6470,"name":"uint256","nodeType":"ElementaryTypeName","src":"7052:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7036:31:28"},"returnParameters":{"id":6475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6487,"src":"7114:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6473,"name":"uint256","nodeType":"ElementaryTypeName","src":"7114:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7113:9:28"},"scope":7237,"src":"7019:174:28","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":6650,"nodeType":"Block","src":"7361:1707:28","statements":[{"assignments":[6505],"declarations":[{"constant":false,"id":6505,"mutability":"mutable","name":"token","nameLocation":"7385:5:28","nodeType":"VariableDeclaration","scope":6650,"src":"7371:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token"},"typeName":{"id":6504,"nodeType":"UserDefinedTypeName","pathNode":{"id":6503,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":6326,"src":"7371:5:28"},"referencedDeclaration":6326,"src":"7371:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token"}},"visibility":"internal"}],"id":6509,"initialValue":{"baseExpression":{"id":6506,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6332,"src":"7393:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token storage ref)"}},"id":6508,"indexExpression":{"id":6507,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"7400:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7393:20:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage","typeString":"struct DiceV4.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7371:42:28"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6512,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"7460:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6510,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"7440:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":6511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isAllowedToken","nodeType":"MemberAccess","referencedDeclaration":7248,"src":"7440:19:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":6513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7440:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":6514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7477:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7440:42:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":6519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6516,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6505,"src":"7486:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token storage pointer"}},"id":6517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"houseEdge","nodeType":"MemberAccess","referencedDeclaration":6323,"src":"7486:15:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7505:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7486:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7440:66:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6525,"nodeType":"IfStatement","src":"7423:142:28","trueBody":{"id":6524,"nodeType":"Block","src":"7517:48:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6521,"name":"ForbiddenToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"7538:14:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7538:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6523,"nodeType":"RevertStatement","src":"7531:23:28"}]}},{"assignments":[6527],"declarations":[{"constant":false,"id":6527,"mutability":"mutable","name":"user","nameLocation":"7583:4:28","nodeType":"VariableDeclaration","scope":6650,"src":"7575:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6526,"name":"address","nodeType":"ElementaryTypeName","src":"7575:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6530,"initialValue":{"expression":{"id":6528,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7590:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7590:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7575:25:28"},{"assignments":[6532],"declarations":[{"constant":false,"id":6532,"mutability":"mutable","name":"isGasToken","nameLocation":"7615:10:28","nodeType":"VariableDeclaration","scope":6650,"src":"7610:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6531,"name":"bool","nodeType":"ElementaryTypeName","src":"7610:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6539,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6533,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"7628:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7652:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7644:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6534,"name":"address","nodeType":"ElementaryTypeName","src":"7644:7:28","typeDescriptions":{}}},"id":6537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7644:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7628:26:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"7610:44:28"},{"assignments":[6541],"declarations":[{"constant":false,"id":6541,"mutability":"mutable","name":"betAmount","nameLocation":"7672:9:28","nodeType":"VariableDeclaration","scope":6650,"src":"7664:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6540,"name":"uint256","nodeType":"ElementaryTypeName","src":"7664:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6543,"initialValue":{"id":6542,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6491,"src":"7684:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7664:31:28"},{"id":6590,"nodeType":"Block","src":"7706:497:28","statements":[{"assignments":[6545],"declarations":[{"constant":false,"id":6545,"mutability":"mutable","name":"minBetAmount","nameLocation":"7728:12:28","nodeType":"VariableDeclaration","scope":6590,"src":"7720:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6544,"name":"uint256","nodeType":"ElementaryTypeName","src":"7720:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6550,"initialValue":{"arguments":[{"id":6548,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"7764:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6546,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"7743:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":6547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getMinBetAmount","nodeType":"MemberAccess","referencedDeclaration":7312,"src":"7743:20:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7743:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7720:57:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6551,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6541,"src":"7795:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6552,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6545,"src":"7807:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7795:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6559,"nodeType":"IfStatement","src":"7791:101:28","trueBody":{"id":6558,"nodeType":"Block","src":"7821:71:28","statements":[{"errorCall":{"arguments":[{"id":6555,"name":"minBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6545,"src":"7864:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6554,"name":"UnderMinBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6252,"src":"7846:17:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":6556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7846:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6557,"nodeType":"RevertStatement","src":"7839:38:28"}]}},{"assignments":[6561],"declarations":[{"constant":false,"id":6561,"mutability":"mutable","name":"maxBetAmount","nameLocation":"7914:12:28","nodeType":"VariableDeclaration","scope":6590,"src":"7906:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6560,"name":"uint256","nodeType":"ElementaryTypeName","src":"7906:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6567,"initialValue":{"arguments":[{"id":6564,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"7950:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6565,"name":"multi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6493,"src":"7964:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6562,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"7929:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":6563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getMaxBetAmount","nodeType":"MemberAccess","referencedDeclaration":7278,"src":"7929:20:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":6566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7929:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7906:64:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6568,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6541,"src":"7988:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6569,"name":"maxBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"8000:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6589,"nodeType":"IfStatement","src":"7984:209:28","trueBody":{"id":6588,"nodeType":"Block","src":"8014:179:28","statements":[{"condition":{"id":6571,"name":"isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6532,"src":"8036:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6583,"nodeType":"IfStatement","src":"8032:105:28","trueBody":{"id":6582,"nodeType":"Block","src":"8048:89:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6577,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6541,"src":"8093:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6578,"name":"maxBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"8105:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8093:24:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6574,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6527,"src":"8078:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8070:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6572,"name":"address","nodeType":"ElementaryTypeName","src":"8070:8:28","stateMutability":"payable","typeDescriptions":{}}},"id":6575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8070:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"8070:22:28","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8070:48:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6581,"nodeType":"ExpressionStatement","src":"8070:48:28"}]}},{"expression":{"id":6586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6584,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6541,"src":"8154:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6585,"name":"maxBetAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"8166:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8154:24:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6587,"nodeType":"ExpressionStatement","src":"8154:24:28"}]}}]},{"expression":{"id":6600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6591,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"8213:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6594,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"8271:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6595,"name":"s_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"8292:16:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6596,"name":"requestConfirmations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6173,"src":"8322:20:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6597,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6170,"src":"8356:16:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":6598,"name":"numWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6176,"src":"8386:8:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":6592,"name":"COORDINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"8227:11:28","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$219","typeString":"contract VRFCoordinatorV2Interface"}},"id":6593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":152,"src":"8227:30:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":6599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8227:177:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8213:191:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6601,"nodeType":"ExpressionStatement","src":"8213:191:28"},{"assignments":[6604],"declarations":[{"constant":false,"id":6604,"mutability":"mutable","name":"newBet","nameLocation":"8426:6:28","nodeType":"VariableDeclaration","scope":6650,"src":"8415:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6603,"nodeType":"UserDefinedTypeName","pathNode":{"id":6602,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"8415:3:28"},"referencedDeclaration":6224,"src":"8415:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"id":6618,"initialValue":{"arguments":[{"hexValue":"66616c7365","id":6606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8452:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"id":6609,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6527,"src":"8479:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8471:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6607,"name":"address","nodeType":"ElementaryTypeName","src":"8471:8:28","stateMutability":"payable","typeDescriptions":{}}},"id":6610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8471:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":6611,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"8498:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6612,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"8524:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6613,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6541,"src":"8549:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6614,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8572:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","src":"8572:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8598:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6605,"name":"Bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6224,"src":"8435:3:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Bet_$6224_storage_ptr_$","typeString":"type(struct DiceV4.Bet storage pointer)"}},"id":6617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8435:195:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"nodeType":"VariableDeclarationStatement","src":"8415:215:28"},{"expression":{"arguments":[{"id":6623,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"8661:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":6619,"name":"_userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6236,"src":"8640:9:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":6621,"indexExpression":{"id":6620,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6527,"src":"8650:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8640:15:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":6622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"8640:20:28","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":6624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8640:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6625,"nodeType":"ExpressionStatement","src":"8640:33:28"},{"expression":{"id":6630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6626,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6230,"src":"8683:4:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet storage ref)"}},"id":6628,"indexExpression":{"id":6627,"name":"s_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"8688:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8683:17:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6629,"name":"newBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6604,"src":"8703:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"src":"8683:26:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"id":6631,"nodeType":"ExpressionStatement","src":"8683:26:28"},{"condition":{"id":6633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8765:11:28","subExpression":{"id":6632,"name":"isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6532,"src":"8766:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6647,"nodeType":"IfStatement","src":"8761:277:28","trueBody":{"id":6646,"nodeType":"Block","src":"8778:260:28","statements":[{"expression":{"arguments":[{"id":6638,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6527,"src":"8847:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6641,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"8877:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}],"id":6640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8869:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6639,"name":"address","nodeType":"ElementaryTypeName","src":"8869:7:28","typeDescriptions":{}}},"id":6642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8869:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6643,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6541,"src":"8900:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6635,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6489,"src":"8799:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6634,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8792:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":6636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8792:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":6637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"8792:37:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1122_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8792:131:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6645,"nodeType":"ExpressionStatement","src":"8792:131:28"}]}},{"expression":{"id":6648,"name":"newBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6604,"src":"9055:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"functionReturnParameters":6502,"id":6649,"nodeType":"Return","src":"9048:13:28"}]},"id":6651,"implemented":true,"kind":"function","modifiers":[{"id":6496,"kind":"modifierInvocation","modifierName":{"id":6495,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":906,"src":"7313:13:28"},"nodeType":"ModifierInvocation","src":"7313:13:28"},{"id":6498,"kind":"modifierInvocation","modifierName":{"id":6497,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1009,"src":"7327:12:28"},"nodeType":"ModifierInvocation","src":"7327:12:28"}],"name":"_newBet","nameLocation":"7208:7:28","nodeType":"FunctionDefinition","parameters":{"id":6494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6489,"mutability":"mutable","name":"tokenAddress","nameLocation":"7233:12:28","nodeType":"VariableDeclaration","scope":6651,"src":"7225:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6488,"name":"address","nodeType":"ElementaryTypeName","src":"7225:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6491,"mutability":"mutable","name":"tokenAmount","nameLocation":"7263:11:28","nodeType":"VariableDeclaration","scope":6651,"src":"7255:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6490,"name":"uint256","nodeType":"ElementaryTypeName","src":"7255:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6493,"mutability":"mutable","name":"multi","nameLocation":"7292:5:28","nodeType":"VariableDeclaration","scope":6651,"src":"7284:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6492,"name":"uint256","nodeType":"ElementaryTypeName","src":"7284:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7215:88:28"},"returnParameters":{"id":6502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6651,"src":"7349:10:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6500,"nodeType":"UserDefinedTypeName","pathNode":{"id":6499,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"7349:3:28"},"referencedDeclaration":6224,"src":"7349:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"src":"7348:12:28"},"scope":7237,"src":"7199:1869:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"functionSelector":"1b3ed722","id":6654,"mutability":"mutable","name":"multiplier","nameLocation":"9104:10:28","nodeType":"VariableDeclaration","scope":7237,"src":"9089:29:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6652,"name":"uint256","nodeType":"ElementaryTypeName","src":"9089:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":6653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9117:1:28","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"body":{"id":6665,"nodeType":"Block","src":"9186:36:28","statements":[{"expression":{"id":6663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6661,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"9196:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6662,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6656,"src":"9209:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9196:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6664,"nodeType":"ExpressionStatement","src":"9196:19:28"}]},"functionSelector":"5ffe6146","id":6666,"implemented":true,"kind":"function","modifiers":[{"id":6659,"kind":"modifierInvocation","modifierName":{"id":6658,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"9176:9:28"},"nodeType":"ModifierInvocation","src":"9176:9:28"}],"name":"updateMultiplier","nameLocation":"9134:16:28","nodeType":"FunctionDefinition","parameters":{"id":6657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6656,"mutability":"mutable","name":"amount","nameLocation":"9159:6:28","nodeType":"VariableDeclaration","scope":6666,"src":"9151:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6655,"name":"uint256","nodeType":"ElementaryTypeName","src":"9151:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9150:16:28"},"returnParameters":{"id":6660,"nodeType":"ParameterList","parameters":[],"src":"9186:0:28"},"scope":7237,"src":"9125:97:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6673,"nodeType":"Block","src":"9284:34:28","statements":[{"expression":{"id":6671,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"9301:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6670,"id":6672,"nodeType":"Return","src":"9294:17:28"}]},"id":6674,"implemented":true,"kind":"function","modifiers":[],"name":"getMultiplier","nameLocation":"9237:13:28","nodeType":"FunctionDefinition","parameters":{"id":6667,"nodeType":"ParameterList","parameters":[],"src":"9250:2:28"},"returnParameters":{"id":6670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6674,"src":"9275:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6668,"name":"uint256","nodeType":"ElementaryTypeName","src":"9275:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9274:9:28"},"scope":7237,"src":"9228:90:28","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":6760,"nodeType":"Block","src":"9631:549:28","statements":[{"assignments":[6690],"declarations":[{"constant":false,"id":6690,"mutability":"mutable","name":"userBetsIds","nameLocation":"9658:11:28","nodeType":"VariableDeclaration","scope":6760,"src":"9641:28:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6688,"name":"uint256","nodeType":"ElementaryTypeName","src":"9641:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6689,"nodeType":"ArrayTypeName","src":"9641:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":6694,"initialValue":{"baseExpression":{"id":6691,"name":"_userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6236,"src":"9672:9:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":6693,"indexExpression":{"id":6692,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6677,"src":"9682:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9672:15:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9641:46:28"},{"assignments":[6696],"declarations":[{"constant":false,"id":6696,"mutability":"mutable","name":"betsLength","nameLocation":"9705:10:28","nodeType":"VariableDeclaration","scope":6760,"src":"9697:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6695,"name":"uint256","nodeType":"ElementaryTypeName","src":"9697:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6699,"initialValue":{"expression":{"id":6697,"name":"userBetsIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6690,"src":"9718:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":6698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9718:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9697:39:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6700,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6696,"src":"9751:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6701,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6679,"src":"9764:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9751:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6708,"nodeType":"IfStatement","src":"9747:77:28","trueBody":{"id":6707,"nodeType":"Block","src":"9776:48:28","statements":[{"expression":{"id":6705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6703,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6679,"src":"9790:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6704,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6696,"src":"9803:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9790:23:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6706,"nodeType":"ExpressionStatement","src":"9790:23:28"}]}},{"assignments":[6713],"declarations":[{"constant":false,"id":6713,"mutability":"mutable","name":"userBets","nameLocation":"9847:8:28","nodeType":"VariableDeclaration","scope":6760,"src":"9834:21:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet[]"},"typeName":{"baseType":{"id":6711,"nodeType":"UserDefinedTypeName","pathNode":{"id":6710,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"9834:3:28"},"referencedDeclaration":6224,"src":"9834:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"id":6712,"nodeType":"ArrayTypeName","src":"9834:5:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_storage_$dyn_storage_ptr","typeString":"struct DiceV4.Bet[]"}},"visibility":"internal"}],"id":6720,"initialValue":{"arguments":[{"id":6718,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6679,"src":"9868:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9858:9:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DiceV4.Bet memory[] memory)"},"typeName":{"baseType":{"id":6715,"nodeType":"UserDefinedTypeName","pathNode":{"id":6714,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"9862:3:28"},"referencedDeclaration":6224,"src":"9862:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"id":6716,"nodeType":"ArrayTypeName","src":"9862:5:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_storage_$dyn_storage_ptr","typeString":"struct DiceV4.Bet[]"}}},"id":6719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9858:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9834:45:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6721,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6679,"src":"9893:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9907:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9893:15:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6757,"nodeType":"IfStatement","src":"9889:259:28","trueBody":{"id":6756,"nodeType":"Block","src":"9910:238:28","statements":[{"assignments":[6725],"declarations":[{"constant":false,"id":6725,"mutability":"mutable","name":"userBetsIndex","nameLocation":"9932:13:28","nodeType":"VariableDeclaration","scope":6756,"src":"9924:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6724,"name":"uint256","nodeType":"ElementaryTypeName","src":"9924:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6726,"nodeType":"VariableDeclarationStatement","src":"9924:21:28"},{"body":{"id":6754,"nodeType":"Block","src":"10022:116:28","statements":[{"expression":{"id":6749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6739,"name":"userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6713,"src":"10040:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"id":6741,"indexExpression":{"id":6740,"name":"userBetsIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6725,"src":"10049:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10040:23:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":6742,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6230,"src":"10066:4:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet storage ref)"}},"id":6748,"indexExpression":{"baseExpression":{"id":6743,"name":"userBetsIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6690,"src":"10071:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":6747,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6744,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"10083:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10087:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10083:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10071:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10066:24:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"src":"10040:50:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":6750,"nodeType":"ExpressionStatement","src":"10040:50:28"},{"expression":{"id":6752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10108:15:28","subExpression":{"id":6751,"name":"userBetsIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6725,"src":"10108:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6753,"nodeType":"ExpressionStatement","src":"10108:15:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6731,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"9988:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6732,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6696,"src":"9992:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6733,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6679,"src":"10005:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9992:23:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9988:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6755,"initializationExpression":{"assignments":[6728],"declarations":[{"constant":false,"id":6728,"mutability":"mutable","name":"i","nameLocation":"9972:1:28","nodeType":"VariableDeclaration","scope":6755,"src":"9964:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6727,"name":"uint256","nodeType":"ElementaryTypeName","src":"9964:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6730,"initialValue":{"id":6729,"name":"betsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6696,"src":"9976:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9964:22:28"},"loopExpression":{"expression":{"id":6737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"10017:3:28","subExpression":{"id":6736,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"10017:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6738,"nodeType":"ExpressionStatement","src":"10017:3:28"},"nodeType":"ForStatement","src":"9959:179:28"}]}},{"expression":{"id":6758,"name":"userBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6713,"src":"10165:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"functionReturnParameters":6685,"id":6759,"nodeType":"Return","src":"10158:15:28"}]},"documentation":{"id":6675,"nodeType":"StructuredDocumentation","src":"9324:177:28","text":"@notice Gets the list of the last user bets.\n @param user Address of the gamer.\n @param dataLength The amount of bets to return.\n @return A list of Bet."},"id":6761,"implemented":true,"kind":"function","modifiers":[],"name":"_getLastUserBets","nameLocation":"9515:16:28","nodeType":"FunctionDefinition","parameters":{"id":6680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6677,"mutability":"mutable","name":"user","nameLocation":"9540:4:28","nodeType":"VariableDeclaration","scope":6761,"src":"9532:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6676,"name":"address","nodeType":"ElementaryTypeName","src":"9532:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6679,"mutability":"mutable","name":"dataLength","nameLocation":"9554:10:28","nodeType":"VariableDeclaration","scope":6761,"src":"9546:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6678,"name":"uint256","nodeType":"ElementaryTypeName","src":"9546:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9531:34:28"},"returnParameters":{"id":6685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6761,"src":"9613:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet[]"},"typeName":{"baseType":{"id":6682,"nodeType":"UserDefinedTypeName","pathNode":{"id":6681,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"9613:3:28"},"referencedDeclaration":6224,"src":"9613:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"id":6683,"nodeType":"ArrayTypeName","src":"9613:5:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_storage_$dyn_storage_ptr","typeString":"struct DiceV4.Bet[]"}},"visibility":"internal"}],"src":"9612:14:28"},"scope":7237,"src":"9506:674:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6778,"nodeType":"Block","src":"10259:65:28","statements":[{"assignments":[6771],"declarations":[{"constant":false,"id":6771,"mutability":"mutable","name":"data","nameLocation":"10281:4:28","nodeType":"VariableDeclaration","scope":6778,"src":"10269:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6770,"nodeType":"UserDefinedTypeName","pathNode":{"id":6769,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"10269:3:28"},"referencedDeclaration":6224,"src":"10269:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"id":6775,"initialValue":{"baseExpression":{"id":6772,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6230,"src":"10288:4:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet storage ref)"}},"id":6774,"indexExpression":{"id":6773,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6763,"src":"10293:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10288:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10269:27:28"},{"expression":{"id":6776,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6771,"src":"10313:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"functionReturnParameters":6768,"id":6777,"nodeType":"Return","src":"10306:11:28"}]},"functionSelector":"5bfe1630","id":6779,"implemented":true,"kind":"function","modifiers":[],"name":"getBetData","nameLocation":"10195:10:28","nodeType":"FunctionDefinition","parameters":{"id":6764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6763,"mutability":"mutable","name":"id","nameLocation":"10214:2:28","nodeType":"VariableDeclaration","scope":6779,"src":"10206:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6762,"name":"uint256","nodeType":"ElementaryTypeName","src":"10206:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10205:12:28"},"returnParameters":{"id":6768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6767,"mutability":"mutable","name":"betData","nameLocation":"10250:7:28","nodeType":"VariableDeclaration","scope":6779,"src":"10239:18:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6766,"nodeType":"UserDefinedTypeName","pathNode":{"id":6765,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"10239:3:28"},"referencedDeclaration":6224,"src":"10239:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"src":"10238:20:28"},"scope":7237,"src":"10186:138:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6796,"nodeType":"Block","src":"10398:75:28","statements":[{"assignments":[6788],"declarations":[{"constant":false,"id":6788,"mutability":"mutable","name":"data","nameLocation":"10420:4:28","nodeType":"VariableDeclaration","scope":6796,"src":"10408:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6787,"nodeType":"UserDefinedTypeName","pathNode":{"id":6786,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"10408:3:28"},"referencedDeclaration":6224,"src":"10408:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"id":6792,"initialValue":{"baseExpression":{"id":6789,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6230,"src":"10427:4:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet storage ref)"}},"id":6791,"indexExpression":{"id":6790,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6781,"src":"10432:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10427:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10408:27:28"},{"expression":{"expression":{"id":6793,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6788,"src":"10452:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"betStatus","nodeType":"MemberAccess","referencedDeclaration":6223,"src":"10452:14:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6785,"id":6795,"nodeType":"Return","src":"10445:21:28"}]},"functionSelector":"61f14f11","id":6797,"implemented":true,"kind":"function","modifiers":[],"name":"getBetStatus","nameLocation":"10339:12:28","nodeType":"FunctionDefinition","parameters":{"id":6782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6781,"mutability":"mutable","name":"id","nameLocation":"10360:2:28","nodeType":"VariableDeclaration","scope":6797,"src":"10352:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6780,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:12:28"},"returnParameters":{"id":6785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6784,"mutability":"mutable","name":"status","nameLocation":"10390:6:28","nodeType":"VariableDeclaration","scope":6797,"src":"10385:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6783,"name":"bool","nodeType":"ElementaryTypeName","src":"10385:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10384:13:28"},"scope":7237,"src":"10330:143:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6883,"nodeType":"Block","src":"10644:550:28","statements":[{"assignments":[6807],"declarations":[{"constant":false,"id":6807,"mutability":"mutable","name":"bet","nameLocation":"10666:3:28","nodeType":"VariableDeclaration","scope":6883,"src":"10654:15:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6806,"nodeType":"UserDefinedTypeName","pathNode":{"id":6805,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"10654:3:28"},"referencedDeclaration":6224,"src":"10654:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"id":6811,"initialValue":{"baseExpression":{"id":6808,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6230,"src":"10672:4:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet storage ref)"}},"id":6810,"indexExpression":{"id":6809,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6800,"src":"10677:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10672:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10654:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6812,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"10694:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6813,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":6211,"src":"10694:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10710:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10694:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6820,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10773:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"10773:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6822,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"10791:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6823,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockTime","nodeType":"MemberAccess","referencedDeclaration":6221,"src":"10791:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3330","id":6824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10807:2:28","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"src":"10791:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10773:36:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6831,"nodeType":"IfStatement","src":"10769:88:28","trueBody":{"id":6830,"nodeType":"Block","src":"10811:46:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6827,"name":"NotFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6255,"src":"10832:12:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10832:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6829,"nodeType":"RevertStatement","src":"10825:21:28"}]}},"id":6832,"nodeType":"IfStatement","src":"10690:167:28","trueBody":{"id":6819,"nodeType":"Block","src":"10716:47:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6816,"name":"NotPendingBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6258,"src":"10737:13:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10737:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6818,"nodeType":"RevertStatement","src":"10730:22:28"}]}},{"assignments":[6835],"declarations":[{"constant":false,"id":6835,"mutability":"mutable","name":"token","nameLocation":"10881:5:28","nodeType":"VariableDeclaration","scope":6883,"src":"10867:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token"},"typeName":{"id":6834,"nodeType":"UserDefinedTypeName","pathNode":{"id":6833,"name":"Token","nodeType":"IdentifierPath","referencedDeclaration":6326,"src":"10867:5:28"},"referencedDeclaration":6326,"src":"10867:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token"}},"visibility":"internal"}],"id":6840,"initialValue":{"baseExpression":{"id":6836,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6332,"src":"10889:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Token_$6326_storage_$","typeString":"mapping(address => struct DiceV4.Token storage ref)"}},"id":6839,"indexExpression":{"expression":{"id":6837,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"10896:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":6215,"src":"10896:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10889:17:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage","typeString":"struct DiceV4.Token storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10867:39:28"},{"expression":{"id":6844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"10916:20:28","subExpression":{"expression":{"id":6841,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6835,"src":"10916:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_Token_$6326_storage_ptr","typeString":"struct DiceV4.Token storage pointer"}},"id":6843,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"pendingCount","nodeType":"MemberAccess","referencedDeclaration":6325,"src":"10916:18:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":6845,"nodeType":"ExpressionStatement","src":"10916:20:28"},{"expression":{"id":6850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6846,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"10947:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6848,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":6211,"src":"10947:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10962:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10947:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6851,"nodeType":"ExpressionStatement","src":"10947:19:28"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6852,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"11017:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6853,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":6215,"src":"11017:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11038:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11030:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6854,"name":"address","nodeType":"ElementaryTypeName","src":"11030:7:28","typeDescriptions":{}}},"id":6857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11030:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11017:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6881,"nodeType":"Block","src":"11111:77:28","statements":[{"expression":{"arguments":[{"expression":{"id":6875,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"11156:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6876,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":6213,"src":"11156:8:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":6877,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"11166:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"11166:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":6871,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"11132:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6872,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":6215,"src":"11132:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6870,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"11125:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":6873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11125:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":6874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1216,"src":"11125:30:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1122_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1122_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11125:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6880,"nodeType":"ExpressionStatement","src":"11125:52:28"}]},"id":6882,"nodeType":"IfStatement","src":"11013:175:28","trueBody":{"id":6869,"nodeType":"Block","src":"11042:63:28","statements":[{"expression":{"arguments":[{"expression":{"id":6865,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"11083:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6866,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"11083:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":6861,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"11064:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":6862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":6213,"src":"11064:8:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":6860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11056:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6859,"name":"address","nodeType":"ElementaryTypeName","src":"11056:8:28","stateMutability":"payable","typeDescriptions":{}}},"id":6863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11056:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"11056:26:28","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11056:38:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6868,"nodeType":"ExpressionStatement","src":"11056:38:28"}]}}]},"documentation":{"id":6798,"nodeType":"StructuredDocumentation","src":"10479:107:28","text":"@notice Refunds the bet to the user if the Chainlink VRF callback failed.\n @param id The Bet ID."},"functionSelector":"e1fdb4b4","id":6884,"implemented":true,"kind":"function","modifiers":[{"id":6803,"kind":"modifierInvocation","modifierName":{"id":6802,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1009,"src":"10631:12:28"},"nodeType":"ModifierInvocation","src":"10631:12:28"}],"name":"refundBet","nameLocation":"10600:9:28","nodeType":"FunctionDefinition","parameters":{"id":6801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6800,"mutability":"mutable","name":"id","nameLocation":"10618:2:28","nodeType":"VariableDeclaration","scope":6884,"src":"10610:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6799,"name":"uint256","nodeType":"ElementaryTypeName","src":"10610:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10609:12:28"},"returnParameters":{"id":6804,"nodeType":"ParameterList","parameters":[],"src":"10644:0:28"},"scope":7237,"src":"10591:603:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6904,"nodeType":"Block","src":"11484:55:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6894,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6887,"src":"11502:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":6895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11514:3:28","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"11502:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11501:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313030","id":6898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11522:3:28","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6899,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6889,"src":"11528:3:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11522:9:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11521:11:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11501:31:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6893,"id":6903,"nodeType":"Return","src":"11494:38:28"}]},"documentation":{"id":6885,"nodeType":"StructuredDocumentation","src":"11200:170:28","text":"@notice Calculates the target payout amount.\n @param betAmount Bet amount.\n @param cap The chosen dice number.\n @return The target payout amount."},"id":6905,"implemented":true,"kind":"function","modifiers":[],"name":"_getPayout","nameLocation":"11384:10:28","nodeType":"FunctionDefinition","parameters":{"id":6890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6887,"mutability":"mutable","name":"betAmount","nameLocation":"11403:9:28","nodeType":"VariableDeclaration","scope":6905,"src":"11395:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6886,"name":"uint256","nodeType":"ElementaryTypeName","src":"11395:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6889,"mutability":"mutable","name":"cap","nameLocation":"11420:3:28","nodeType":"VariableDeclaration","scope":6905,"src":"11414:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6888,"name":"uint8","nodeType":"ElementaryTypeName","src":"11414:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"11394:30:28"},"returnParameters":{"id":6893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6905,"src":"11471:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6891,"name":"uint256","nodeType":"ElementaryTypeName","src":"11471:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11470:9:28"},"scope":7237,"src":"11375:164:28","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6963,"nodeType":"Block","src":"11870:361:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6917,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6908,"src":"11966:3:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11966:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6920,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6908,"src":"11978:3:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3939","id":6921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11984:2:28","typeDescriptions":{"typeIdentifier":"t_rational_99_by_1","typeString":"int_const 99"},"value":"99"},"src":"11978:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11966:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"Dice cap 1 gives 99% chance.\n Dice cap 99 gives 1% chance.","id":6930,"nodeType":"IfStatement","src":"11962:78:28","trueBody":{"id":6929,"nodeType":"Block","src":"11988:52:28","statements":[{"errorCall":{"arguments":[{"hexValue":"31","id":6925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"3939","id":6926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12026:2:28","typeDescriptions":{"typeIdentifier":"t_rational_99_by_1","typeString":"int_const 99"},"value":"99"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_99_by_1","typeString":"int_const 99"}],"id":6924,"name":"CapNotInRange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6321,"src":"12009:13:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint8_$returns$__$","typeString":"function (uint8,uint8) pure"}},"id":6927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12009:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6928,"nodeType":"RevertStatement","src":"12002:27:28"}]}},{"assignments":[6933],"declarations":[{"constant":false,"id":6933,"mutability":"mutable","name":"bet","nameLocation":"12061:3:28","nodeType":"VariableDeclaration","scope":6963,"src":"12050:14:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":6932,"nodeType":"UserDefinedTypeName","pathNode":{"id":6931,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"12050:3:28"},"referencedDeclaration":6224,"src":"12050:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"id":6942,"initialValue":{"arguments":[{"id":6935,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"12075:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6936,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6912,"src":"12082:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"3130303030","id":6938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12106:5:28","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},{"id":6939,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6908,"src":"12113:3:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6937,"name":"_getPayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6905,"src":"12095:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint8) pure returns (uint256)"}},"id":6940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12095:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6934,"name":"_newBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6651,"src":"12067:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$_t_struct$_Bet_$6224_memory_ptr_$","typeString":"function (address,uint256,uint256) returns (struct DiceV4.Bet memory)"}},"id":6941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12067:51:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"nodeType":"VariableDeclarationStatement","src":"12050:68:28"},{"expression":{"id":6949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6943,"name":"diceBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6276,"src":"12128:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DiceBet_$6270_storage_$","typeString":"mapping(uint256 => struct DiceV4.DiceBet storage ref)"}},"id":6946,"indexExpression":{"expression":{"id":6944,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12137:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":6945,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":6217,"src":"12137:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12128:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage","typeString":"struct DiceV4.DiceBet storage ref"}},"id":6947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"cap","nodeType":"MemberAccess","referencedDeclaration":6267,"src":"12128:20:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6948,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6908,"src":"12151:3:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12128:26:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6950,"nodeType":"ExpressionStatement","src":"12128:26:28"},{"eventCall":{"arguments":[{"expression":{"id":6952,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12179:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":6953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":6217,"src":"12179:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6954,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12187:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":6955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":6213,"src":"12187:8:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":6956,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12197:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":6957,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":6215,"src":"12197:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6958,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12208:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":6959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"12208:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6960,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6908,"src":"12220:3:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6951,"name":"PlaceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6299,"src":"12170:8:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint8_$returns$__$","typeString":"function (uint256,address,address,uint256,uint8)"}},"id":6961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12170:54:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6962,"nodeType":"EmitStatement","src":"12165:59:28"}]},"documentation":{"id":6906,"nodeType":"StructuredDocumentation","src":"11545:197:28","text":"@notice Creates a new bet and stores the chosen coin face.\n @param cap The chosen number .\n @param token Address of the token.\n @param tokenAmount The number of tokens bet."},"functionSelector":"4031e85b","id":6964,"implemented":true,"kind":"function","modifiers":[{"id":6915,"kind":"modifierInvocation","modifierName":{"id":6914,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":906,"src":"11856:13:28"},"nodeType":"ModifierInvocation","src":"11856:13:28"}],"name":"wager","nameLocation":"11756:5:28","nodeType":"FunctionDefinition","parameters":{"id":6913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6908,"mutability":"mutable","name":"cap","nameLocation":"11777:3:28","nodeType":"VariableDeclaration","scope":6964,"src":"11771:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6907,"name":"uint8","nodeType":"ElementaryTypeName","src":"11771:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6910,"mutability":"mutable","name":"token","nameLocation":"11798:5:28","nodeType":"VariableDeclaration","scope":6964,"src":"11790:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6909,"name":"address","nodeType":"ElementaryTypeName","src":"11790:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6912,"mutability":"mutable","name":"tokenAmount","nameLocation":"11821:11:28","nodeType":"VariableDeclaration","scope":6964,"src":"11813:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6911,"name":"uint256","nodeType":"ElementaryTypeName","src":"11813:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:77:28"},"returnParameters":{"id":6916,"nodeType":"ParameterList","parameters":[],"src":"11870:0:28"},"scope":7237,"src":"11747:484:28","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":6975,"nodeType":"Block","src":"12289:45:28","statements":[{"expression":{"expression":{"arguments":[{"id":6971,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12314:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_DiceV4_$7237","typeString":"contract DiceV4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_DiceV4_$7237","typeString":"contract DiceV4"}],"id":6970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12306:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6969,"name":"address","nodeType":"ElementaryTypeName","src":"12306:7:28","typeDescriptions":{}}},"id":6972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12306:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"12306:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6968,"id":6974,"nodeType":"Return","src":"12299:28:28"}]},"functionSelector":"12065fe0","id":6976,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"12246:10:28","nodeType":"FunctionDefinition","parameters":{"id":6965,"nodeType":"ParameterList","parameters":[],"src":"12256:2:28"},"returnParameters":{"id":6968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6976,"src":"12280:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6966,"name":"uint256","nodeType":"ElementaryTypeName","src":"12280:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12279:9:28"},"scope":7237,"src":"12237:97:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":7013,"nodeType":"Block","src":"12637:217:28","statements":[{"assignments":[6985],"declarations":[{"constant":false,"id":6985,"mutability":"mutable","name":"tokenBal","nameLocation":"12655:8:28","nodeType":"VariableDeclaration","scope":7013,"src":"12647:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6984,"name":"uint256","nodeType":"ElementaryTypeName","src":"12647:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6986,"nodeType":"VariableDeclarationStatement","src":"12647:16:28"},{"condition":{"arguments":[{"id":6988,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6979,"src":"12689:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6987,"name":"_isGasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6467,"src":"12677:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bool_$","typeString":"function (address) pure returns (bool)"}},"id":6989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12677:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7011,"nodeType":"Block","src":"12767:81:28","statements":[{"expression":{"id":7009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6999,"name":"tokenBal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6985,"src":"12788:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":7006,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12831:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_DiceV4_$7237","typeString":"contract DiceV4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_DiceV4_$7237","typeString":"contract DiceV4"}],"id":7005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12823:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7004,"name":"address","nodeType":"ElementaryTypeName","src":"12823:7:28","typeDescriptions":{}}},"id":7007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12823:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":7001,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6979,"src":"12806:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7000,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"12799:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1122_$","typeString":"type(contract IERC20)"}},"id":7002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12799:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1122","typeString":"contract IERC20"}},"id":7003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1079,"src":"12799:23:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":7008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12799:38:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12788:49:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6983,"id":7010,"nodeType":"Return","src":"12781:56:28"}]},"id":7012,"nodeType":"IfStatement","src":"12673:175:28","trueBody":{"id":6998,"nodeType":"Block","src":"12697:64:28","statements":[{"expression":{"id":6996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6990,"name":"tokenBal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6985,"src":"12718:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":6993,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12737:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_DiceV4_$7237","typeString":"contract DiceV4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_DiceV4_$7237","typeString":"contract DiceV4"}],"id":6992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12729:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6991,"name":"address","nodeType":"ElementaryTypeName","src":"12729:7:28","typeDescriptions":{}}},"id":6994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12729:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"12729:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12718:32:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6983,"id":6997,"nodeType":"Return","src":"12711:39:28"}]}}]},"documentation":{"id":6977,"nodeType":"StructuredDocumentation","src":"12340:222:28","text":"@notice Gets the token's balance.\n The token's house edge allocation amounts are subtracted from the balance.\n @param token Address of the token.\n @return The amount of token available for profits."},"functionSelector":"3aecd0e3","id":7014,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenBalance","nameLocation":"12576:15:28","nodeType":"FunctionDefinition","parameters":{"id":6980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6979,"mutability":"mutable","name":"token","nameLocation":"12600:5:28","nodeType":"VariableDeclaration","scope":7014,"src":"12592:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6978,"name":"address","nodeType":"ElementaryTypeName","src":"12592:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12591:15:28"},"returnParameters":{"id":6983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7014,"src":"12628:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6981,"name":"uint256","nodeType":"ElementaryTypeName","src":"12628:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12627:9:28"},"scope":7237,"src":"12567:287:28","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[77],"body":{"id":7151,"nodeType":"Block","src":"12986:1136:28","statements":[{"assignments":[7025],"declarations":[{"constant":false,"id":7025,"mutability":"mutable","name":"diceBet","nameLocation":"13012:7:28","nodeType":"VariableDeclaration","scope":7151,"src":"12996:23:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet"},"typeName":{"id":7024,"nodeType":"UserDefinedTypeName","pathNode":{"id":7023,"name":"DiceBet","nodeType":"IdentifierPath","referencedDeclaration":6270,"src":"12996:7:28"},"referencedDeclaration":6270,"src":"12996:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet"}},"visibility":"internal"}],"id":7029,"initialValue":{"baseExpression":{"id":7026,"name":"diceBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6276,"src":"13022:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DiceBet_$6270_storage_$","typeString":"mapping(uint256 => struct DiceV4.DiceBet storage ref)"}},"id":7028,"indexExpression":{"id":7027,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7016,"src":"13031:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13022:12:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage","typeString":"struct DiceV4.DiceBet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12996:38:28"},{"assignments":[7032],"declarations":[{"constant":false,"id":7032,"mutability":"mutable","name":"bet","nameLocation":"13056:3:28","nodeType":"VariableDeclaration","scope":7151,"src":"13044:15:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"},"typeName":{"id":7031,"nodeType":"UserDefinedTypeName","pathNode":{"id":7030,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"13044:3:28"},"referencedDeclaration":6224,"src":"13044:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"visibility":"internal"}],"id":7036,"initialValue":{"baseExpression":{"id":7033,"name":"bets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6230,"src":"13062:4:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Bet_$6224_storage_$","typeString":"mapping(uint256 => struct DiceV4.Bet storage ref)"}},"id":7035,"indexExpression":{"id":7034,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7016,"src":"13067:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13062:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage","typeString":"struct DiceV4.Bet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13044:26:28"},{"assignments":[7038],"declarations":[{"constant":false,"id":7038,"mutability":"mutable","name":"rolled","nameLocation":"13086:6:28","nodeType":"VariableDeclaration","scope":7151,"src":"13080:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7037,"name":"uint8","nodeType":"ElementaryTypeName","src":"13080:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":7050,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":7041,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7019,"src":"13102:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7043,"indexExpression":{"hexValue":"30","id":7042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13114:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13102:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"313030","id":7044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13119:3:28","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"13102:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13101:22:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":7047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13126:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13101:26:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13095:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":7039,"name":"uint8","nodeType":"ElementaryTypeName","src":"13095:5:28","typeDescriptions":{}}},"id":7049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13095:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"13080:48:28"},{"expression":{"id":7055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7051,"name":"diceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7025,"src":"13138:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet storage pointer"}},"id":7053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"rolled","nodeType":"MemberAccess","referencedDeclaration":6269,"src":"13138:14:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7054,"name":"rolled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7038,"src":"13155:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13138:23:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":7056,"nodeType":"ExpressionStatement","src":"13138:23:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":7060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7057,"name":"rolled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7038,"src":"13176:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":7058,"name":"diceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7025,"src":"13185:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet storage pointer"}},"id":7059,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"cap","nodeType":"MemberAccess","referencedDeclaration":6267,"src":"13185:11:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13176:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7135,"nodeType":"Block","src":"13851:79:28","statements":[{"expression":{"id":7127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7123,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13865:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7125,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":6211,"src":"13865:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13880:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13865:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7128,"nodeType":"ExpressionStatement","src":"13865:19:28"},{"expression":{"id":7133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7129,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13898:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"betStatus","nodeType":"MemberAccess","referencedDeclaration":6223,"src":"13898:13:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":7132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13914:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"13898:21:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7134,"nodeType":"ExpressionStatement","src":"13898:21:28"}]},"id":7136,"nodeType":"IfStatement","src":"13172:758:28","trueBody":{"id":7122,"nodeType":"Block","src":"13198:647:28","statements":[{"expression":{"id":7065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7061,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13212:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"resolved","nodeType":"MemberAccess","referencedDeclaration":6211,"src":"13212:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13227:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13212:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7066,"nodeType":"ExpressionStatement","src":"13212:19:28"},{"expression":{"id":7071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7067,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13245:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"betStatus","nodeType":"MemberAccess","referencedDeclaration":6223,"src":"13245:13:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13261:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13245:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7072,"nodeType":"ExpressionStatement","src":"13245:20:28"},{"assignments":[7074],"declarations":[{"constant":false,"id":7074,"mutability":"mutable","name":"token","nameLocation":"13346:5:28","nodeType":"VariableDeclaration","scope":7122,"src":"13338:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7073,"name":"address","nodeType":"ElementaryTypeName","src":"13338:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7077,"initialValue":{"expression":{"id":7075,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13354:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7076,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":6215,"src":"13354:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13338:25:28"},{"assignments":[7079],"declarations":[{"constant":false,"id":7079,"mutability":"mutable","name":"user","nameLocation":"13393:4:28","nodeType":"VariableDeclaration","scope":7122,"src":"13377:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":7078,"name":"address","nodeType":"ElementaryTypeName","src":"13377:15:28","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":7082,"initialValue":{"expression":{"id":7080,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13400:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7081,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":6213,"src":"13400:8:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"13377:31:28"},{"assignments":[7084],"declarations":[{"constant":false,"id":7084,"mutability":"mutable","name":"betAmount","nameLocation":"13430:9:28","nodeType":"VariableDeclaration","scope":7122,"src":"13422:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7083,"name":"uint256","nodeType":"ElementaryTypeName","src":"13422:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7087,"initialValue":{"expression":{"id":7085,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13442:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7086,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"13442:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13422:30:28"},{"assignments":[7089],"declarations":[{"constant":false,"id":7089,"mutability":"mutable","name":"payout","nameLocation":"13475:6:28","nodeType":"VariableDeclaration","scope":7122,"src":"13467:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7088,"name":"uint256","nodeType":"ElementaryTypeName","src":"13467:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7095,"initialValue":{"arguments":[{"id":7091,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7084,"src":"13495:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7092,"name":"diceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7025,"src":"13506:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet storage pointer"}},"id":7093,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"cap","nodeType":"MemberAccess","referencedDeclaration":6267,"src":"13506:11:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":7090,"name":"_getPayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6905,"src":"13484:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint8) pure returns (uint256)"}},"id":7094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13484:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13467:51:28"},{"assignments":[7097],"declarations":[{"constant":false,"id":7097,"mutability":"mutable","name":"profit","nameLocation":"13540:6:28","nodeType":"VariableDeclaration","scope":7122,"src":"13532:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7096,"name":"uint256","nodeType":"ElementaryTypeName","src":"13532:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7099,"initialValue":{"id":7098,"name":"payout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7089,"src":"13549:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13532:23:28"},{"assignments":[7101],"declarations":[{"constant":false,"id":7101,"mutability":"mutable","name":"profitFee","nameLocation":"13577:9:28","nodeType":"VariableDeclaration","scope":7122,"src":"13569:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7100,"name":"uint256","nodeType":"ElementaryTypeName","src":"13569:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7106,"initialValue":{"arguments":[{"id":7103,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7074,"src":"13598:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7104,"name":"betAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7084,"src":"13605:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7102,"name":"_getFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6487,"src":"13589:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":7105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13589:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13569:46:28"},{"assignments":[7108],"declarations":[{"constant":false,"id":7108,"mutability":"mutable","name":"profitPayout","nameLocation":"13637:12:28","nodeType":"VariableDeclaration","scope":7122,"src":"13629:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7107,"name":"uint256","nodeType":"ElementaryTypeName","src":"13629:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7112,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7109,"name":"profit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7097,"src":"13652:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7110,"name":"profitFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7101,"src":"13661:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13652:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13629:41:28"},{"expression":{"arguments":[{"id":7116,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"13797:4:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":7117,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7074,"src":"13803:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7118,"name":"profitPayout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7108,"src":"13810:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7119,"name":"profitFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7101,"src":"13824:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7113,"name":"bank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"13785:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IBankV2_$7313","typeString":"contract IBankV2"}},"id":7115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"payout","nodeType":"MemberAccess","referencedDeclaration":7260,"src":"13785:11:28","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_payable_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address payable,address,uint256,uint256) payable external"}},"id":7120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13785:49:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7121,"nodeType":"ExpressionStatement","src":"13785:49:28"}]}},{"eventCall":{"arguments":[{"expression":{"id":7138,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13963:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7139,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":6217,"src":"13963:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7140,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"13983:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7141,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"user","nodeType":"MemberAccess","referencedDeclaration":6213,"src":"13983:8:28","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":7142,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"14005:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":6215,"src":"14005:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7144,"name":"bet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"14028:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet storage pointer"}},"id":7145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6219,"src":"14028:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7146,"name":"diceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7025,"src":"14052:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage_ptr","typeString":"struct DiceV4.DiceBet storage pointer"}},"id":7147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"cap","nodeType":"MemberAccess","referencedDeclaration":6267,"src":"14052:11:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":7148,"name":"rolled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7038,"src":"14077:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":7137,"name":"Roll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6314,"src":"13945:4:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint8_$_t_uint8_$returns$__$","typeString":"function (uint256,address,address,uint256,uint8,uint8)"}},"id":7149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13945:170:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7150,"nodeType":"EmitStatement","src":"13940:175:28"}]},"id":7152,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"12869:18:28","nodeType":"FunctionDefinition","overrides":{"id":7021,"nodeType":"OverrideSpecifier","overrides":[],"src":"12977:8:28"},"parameters":{"id":7020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7016,"mutability":"mutable","name":"id","nameLocation":"12905:2:28","nodeType":"VariableDeclaration","scope":7152,"src":"12897:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7015,"name":"uint256","nodeType":"ElementaryTypeName","src":"12897:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7019,"mutability":"mutable","name":"randomWords","nameLocation":"12950:11:28","nodeType":"VariableDeclaration","scope":7152,"src":"12933:28:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7017,"name":"uint256","nodeType":"ElementaryTypeName","src":"12933:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7018,"nodeType":"ArrayTypeName","src":"12933:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12887:80:28"},"returnParameters":{"id":7022,"nodeType":"ParameterList","parameters":[],"src":"12986:0:28"},"scope":7237,"src":"12860:1262:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7169,"nodeType":"Block","src":"14221:104:28","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":7158,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"14235:6:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":7159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14235:8:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7167,"nodeType":"Block","src":"14286:33:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7164,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"14300:6:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14300:8:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7166,"nodeType":"ExpressionStatement","src":"14300:8:28"}]},"id":7168,"nodeType":"IfStatement","src":"14231:88:28","trueBody":{"id":7163,"nodeType":"Block","src":"14245:35:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7160,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"14259:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14259:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7162,"nodeType":"ExpressionStatement","src":"14259:10:28"}]}}]},"documentation":{"id":7153,"nodeType":"StructuredDocumentation","src":"14128:52:28","text":"@notice Pauses the contract to disable new bets."},"functionSelector":"8456cb59","id":7170,"implemented":true,"kind":"function","modifiers":[{"id":7156,"kind":"modifierInvocation","modifierName":{"id":7155,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":790,"src":"14211:9:28"},"nodeType":"ModifierInvocation","src":"14211:9:28"}],"name":"pause","nameLocation":"14194:5:28","nodeType":"FunctionDefinition","parameters":{"id":7154,"nodeType":"ParameterList","parameters":[],"src":"14199:2:28"},"returnParameters":{"id":7157,"nodeType":"ParameterList","parameters":[],"src":"14221:0:28"},"scope":7237,"src":"14185:140:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7235,"nodeType":"Block","src":"14650:374:28","statements":[{"assignments":[7186],"declarations":[{"constant":false,"id":7186,"mutability":"mutable","name":"lastBets","nameLocation":"14673:8:28","nodeType":"VariableDeclaration","scope":7235,"src":"14660:21:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet[]"},"typeName":{"baseType":{"id":7184,"nodeType":"UserDefinedTypeName","pathNode":{"id":7183,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":6224,"src":"14660:3:28"},"referencedDeclaration":6224,"src":"14660:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_storage_ptr","typeString":"struct DiceV4.Bet"}},"id":7185,"nodeType":"ArrayTypeName","src":"14660:5:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_storage_$dyn_storage_ptr","typeString":"struct DiceV4.Bet[]"}},"visibility":"internal"}],"id":7191,"initialValue":{"arguments":[{"id":7188,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7173,"src":"14701:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7189,"name":"dataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7175,"src":"14707:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7187,"name":"_getLastUserBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"14684:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr_$","typeString":"function (address,uint256) view returns (struct DiceV4.Bet memory[] memory)"}},"id":7190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14684:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14660:58:28"},{"assignments":[7196],"declarations":[{"constant":false,"id":7196,"mutability":"mutable","name":"lastDiceBets","nameLocation":"14749:12:28","nodeType":"VariableDeclaration","scope":7235,"src":"14728:33:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.FullDiceBet[]"},"typeName":{"baseType":{"id":7194,"nodeType":"UserDefinedTypeName","pathNode":{"id":7193,"name":"FullDiceBet","nodeType":"IdentifierPath","referencedDeclaration":6265,"src":"14728:11:28"},"referencedDeclaration":6265,"src":"14728:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_FullDiceBet_$6265_storage_ptr","typeString":"struct DiceV4.FullDiceBet"}},"id":7195,"nodeType":"ArrayTypeName","src":"14728:13:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_storage_$dyn_storage_ptr","typeString":"struct DiceV4.FullDiceBet[]"}},"visibility":"internal"}],"id":7204,"initialValue":{"arguments":[{"expression":{"id":7201,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7186,"src":"14782:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"id":7202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14782:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14764:17:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DiceV4.FullDiceBet memory[] memory)"},"typeName":{"baseType":{"id":7198,"nodeType":"UserDefinedTypeName","pathNode":{"id":7197,"name":"FullDiceBet","nodeType":"IdentifierPath","referencedDeclaration":6265,"src":"14768:11:28"},"referencedDeclaration":6265,"src":"14768:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_FullDiceBet_$6265_storage_ptr","typeString":"struct DiceV4.FullDiceBet"}},"id":7199,"nodeType":"ArrayTypeName","src":"14768:13:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_storage_$dyn_storage_ptr","typeString":"struct DiceV4.FullDiceBet[]"}}},"id":7203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14764:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.FullDiceBet memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14728:70:28"},{"body":{"id":7231,"nodeType":"Block","src":"14850:139:28","statements":[{"expression":{"id":7229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7215,"name":"lastDiceBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7196,"src":"14864:12:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.FullDiceBet memory[] memory"}},"id":7217,"indexExpression":{"id":7216,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"14877:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14864:15:28","typeDescriptions":{"typeIdentifier":"t_struct$_FullDiceBet_$6265_memory_ptr","typeString":"struct DiceV4.FullDiceBet memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":7219,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7186,"src":"14911:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"id":7221,"indexExpression":{"id":7220,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"14920:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14911:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},{"baseExpression":{"id":7222,"name":"diceBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6276,"src":"14940:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DiceBet_$6270_storage_$","typeString":"mapping(uint256 => struct DiceV4.DiceBet storage ref)"}},"id":7227,"indexExpression":{"expression":{"baseExpression":{"id":7223,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7186,"src":"14949:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"id":7225,"indexExpression":{"id":7224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"14958:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14949:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"}},"id":7226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"id","nodeType":"MemberAccess","referencedDeclaration":6217,"src":"14949:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14940:24:28","typeDescriptions":{"typeIdentifier":"t_struct$_DiceBet_$6270_storage","typeString":"struct DiceV4.DiceBet storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bet_$6224_memory_ptr","typeString":"struct DiceV4.Bet memory"},{"typeIdentifier":"t_struct$_DiceBet_$6270_storage","typeString":"struct DiceV4.DiceBet storage ref"}],"id":7218,"name":"FullDiceBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6265,"src":"14882:11:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_FullDiceBet_$6265_storage_ptr_$","typeString":"type(struct DiceV4.FullDiceBet storage pointer)"}},"id":7228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14882:96:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_FullDiceBet_$6265_memory_ptr","typeString":"struct DiceV4.FullDiceBet memory"}},"src":"14864:114:28","typeDescriptions":{"typeIdentifier":"t_struct$_FullDiceBet_$6265_memory_ptr","typeString":"struct DiceV4.FullDiceBet memory"}},"id":7230,"nodeType":"ExpressionStatement","src":"14864:114:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7208,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"14824:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7209,"name":"lastBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7186,"src":"14828:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Bet_$6224_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.Bet memory[] memory"}},"id":7210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14828:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14824:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7232,"initializationExpression":{"assignments":[7206],"declarations":[{"constant":false,"id":7206,"mutability":"mutable","name":"i","nameLocation":"14821:1:28","nodeType":"VariableDeclaration","scope":7232,"src":"14813:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7205,"name":"uint256","nodeType":"ElementaryTypeName","src":"14813:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7207,"nodeType":"VariableDeclarationStatement","src":"14813:9:28"},"loopExpression":{"expression":{"id":7213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14845:3:28","subExpression":{"id":7212,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"14845:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7214,"nodeType":"ExpressionStatement","src":"14845:3:28"},"nodeType":"ForStatement","src":"14808:181:28"},{"expression":{"id":7233,"name":"lastDiceBets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7196,"src":"15005:12:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.FullDiceBet memory[] memory"}},"functionReturnParameters":7181,"id":7234,"nodeType":"Return","src":"14998:19:28"}]},"documentation":{"id":7171,"nodeType":"StructuredDocumentation","src":"14331:182:28","text":"@notice Gets the list of the last user bets.\n @param user Address of the gamer.\n @param dataLength The amount of bets to return.\n @return A list of Dice bet."},"functionSelector":"c2fb579f","id":7236,"implemented":true,"kind":"function","modifiers":[],"name":"getLastUserBets","nameLocation":"14527:15:28","nodeType":"FunctionDefinition","parameters":{"id":7176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7173,"mutability":"mutable","name":"user","nameLocation":"14551:4:28","nodeType":"VariableDeclaration","scope":7236,"src":"14543:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7172,"name":"address","nodeType":"ElementaryTypeName","src":"14543:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7175,"mutability":"mutable","name":"dataLength","nameLocation":"14565:10:28","nodeType":"VariableDeclaration","scope":7236,"src":"14557:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7174,"name":"uint256","nodeType":"ElementaryTypeName","src":"14557:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14542:34:28"},"returnParameters":{"id":7181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7236,"src":"14624:20:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr","typeString":"struct DiceV4.FullDiceBet[]"},"typeName":{"baseType":{"id":7178,"nodeType":"UserDefinedTypeName","pathNode":{"id":7177,"name":"FullDiceBet","nodeType":"IdentifierPath","referencedDeclaration":6265,"src":"14624:11:28"},"referencedDeclaration":6265,"src":"14624:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_FullDiceBet_$6265_storage_ptr","typeString":"struct DiceV4.FullDiceBet"}},"id":7179,"nodeType":"ArrayTypeName","src":"14624:13:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FullDiceBet_$6265_storage_$dyn_storage_ptr","typeString":"struct DiceV4.FullDiceBet[]"}},"visibility":"internal"}],"src":"14623:22:28"},"scope":7237,"src":"14518:506:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":7238,"src":"641:14385:28","usedErrors":[55,6199,6201,6203,6205,6207,6209,6252,6255,6258,6321]}],"src":"32:14995:28"},"id":28},"contracts/interface/IBankV2.sol":{"ast":{"absolutePath":"contracts/interface/IBankV2.sol","exportedSymbols":{"IBankV2":[7313]},"id":7314,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7239,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IBankV2","contractDependencies":[],"contractKind":"interface","documentation":{"id":7240,"nodeType":"StructuredDocumentation","src":"56:65:29","text":"@notice Minimal interface for Bank.\n @author Romuald Hog."},"fullyImplemented":false,"id":7313,"linearizedBaseContracts":[7313],"name":"IBankV2","nameLocation":"131:7:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7241,"nodeType":"StructuredDocumentation","src":"145:174:29","text":"@notice Gets the token's allow status used on the games smart contracts.\n @param token Address of the token.\n @return Whether the token is enabled for bets."},"functionSelector":"cbe230c3","id":7248,"implemented":false,"kind":"function","modifiers":[],"name":"isAllowedToken","nameLocation":"333:14:29","nodeType":"FunctionDefinition","parameters":{"id":7244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7243,"mutability":"mutable","name":"token","nameLocation":"356:5:29","nodeType":"VariableDeclaration","scope":7248,"src":"348:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7242,"name":"address","nodeType":"ElementaryTypeName","src":"348:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"347:15:29"},"returnParameters":{"id":7247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7248,"src":"386:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7245,"name":"bool","nodeType":"ElementaryTypeName","src":"386:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"385:6:29"},"scope":7313,"src":"324:68:29","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":7249,"nodeType":"StructuredDocumentation","src":"398:275:29","text":"@notice Payouts a winning bet, and allocate the house edge fee.\n @param user Address of the gamer.\n @param token Address of the token.\n @param profit Number of tokens to be sent to the gamer.\n @param fees Bet amount and bet profit fees amount."},"functionSelector":"1f615023","id":7260,"implemented":false,"kind":"function","modifiers":[],"name":"payout","nameLocation":"687:6:29","nodeType":"FunctionDefinition","parameters":{"id":7258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7251,"mutability":"mutable","name":"user","nameLocation":"719:4:29","nodeType":"VariableDeclaration","scope":7260,"src":"703:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":7250,"name":"address","nodeType":"ElementaryTypeName","src":"703:15:29","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":7253,"mutability":"mutable","name":"token","nameLocation":"741:5:29","nodeType":"VariableDeclaration","scope":7260,"src":"733:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7252,"name":"address","nodeType":"ElementaryTypeName","src":"733:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7255,"mutability":"mutable","name":"profit","nameLocation":"764:6:29","nodeType":"VariableDeclaration","scope":7260,"src":"756:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7254,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7257,"mutability":"mutable","name":"fees","nameLocation":"788:4:29","nodeType":"VariableDeclaration","scope":7260,"src":"780:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7256,"name":"uint256","nodeType":"ElementaryTypeName","src":"780:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"693:105:29"},"returnParameters":{"id":7259,"nodeType":"ParameterList","parameters":[],"src":"815:0:29"},"scope":7313,"src":"678:138:29","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":7261,"nodeType":"StructuredDocumentation","src":"822:291:29","text":"@notice Accounts a loss bet.\n @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\n @dev In case of the gas token, the bet amount is sent along with this tx.\n @param tokenAddress Address of the token.\n @param amount Loss bet amount."},"functionSelector":"3138809d","id":7268,"implemented":false,"kind":"function","modifiers":[],"name":"cashIn","nameLocation":"1127:6:29","nodeType":"FunctionDefinition","parameters":{"id":7266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7263,"mutability":"mutable","name":"tokenAddress","nameLocation":"1142:12:29","nodeType":"VariableDeclaration","scope":7268,"src":"1134:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7262,"name":"address","nodeType":"ElementaryTypeName","src":"1134:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7265,"mutability":"mutable","name":"amount","nameLocation":"1164:6:29","nodeType":"VariableDeclaration","scope":7268,"src":"1156:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1133:38:29"},"returnParameters":{"id":7267,"nodeType":"ParameterList","parameters":[],"src":"1188:0:29"},"scope":7313,"src":"1118:71:29","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":7269,"nodeType":"StructuredDocumentation","src":"1195:372:29","text":"@notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\n @param token Address of the token.\n @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\n @return Maximum bet amount for the token.\n @dev The multiplier should be at least 10000."},"functionSelector":"278b39de","id":7278,"implemented":false,"kind":"function","modifiers":[],"name":"getMaxBetAmount","nameLocation":"1581:15:29","nodeType":"FunctionDefinition","parameters":{"id":7274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7271,"mutability":"mutable","name":"token","nameLocation":"1605:5:29","nodeType":"VariableDeclaration","scope":7278,"src":"1597:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7270,"name":"address","nodeType":"ElementaryTypeName","src":"1597:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7273,"mutability":"mutable","name":"multiplier","nameLocation":"1620:10:29","nodeType":"VariableDeclaration","scope":7278,"src":"1612:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7272,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:35:29"},"returnParameters":{"id":7277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7278,"src":"1679:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7275,"name":"uint256","nodeType":"ElementaryTypeName","src":"1679:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1678:9:29"},"scope":7313,"src":"1572:116:29","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":7279,"nodeType":"StructuredDocumentation","src":"1694:154:29","text":"@notice Harvests tokens dividends.\n @return tokens The list of tokens addresses.\n @return amounts The list of tokens' amounts harvested."},"functionSelector":"802ad8fb","id":7288,"implemented":false,"kind":"function","modifiers":[],"name":"harvestDividends","nameLocation":"1862:16:29","nodeType":"FunctionDefinition","parameters":{"id":7280,"nodeType":"ParameterList","parameters":[],"src":"1878:2:29"},"returnParameters":{"id":7287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7283,"mutability":"mutable","name":"tokens","nameLocation":"1932:6:29","nodeType":"VariableDeclaration","scope":7288,"src":"1915:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7281,"name":"address","nodeType":"ElementaryTypeName","src":"1915:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7282,"nodeType":"ArrayTypeName","src":"1915:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":7286,"mutability":"mutable","name":"amounts","nameLocation":"1957:7:29","nodeType":"VariableDeclaration","scope":7288,"src":"1940:24:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7284,"name":"uint256","nodeType":"ElementaryTypeName","src":"1940:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7285,"nodeType":"ArrayTypeName","src":"1940:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1914:51:29"},"scope":7313,"src":"1853:113:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":7289,"nodeType":"StructuredDocumentation","src":"1972:171:29","text":"@notice Get the available tokens dividends amounts.\n @return tokens The list of tokens addresses.\n @return amounts The list of tokens' amounts harvested."},"functionSelector":"ed442e14","id":7298,"implemented":false,"kind":"function","modifiers":[],"name":"getDividends","nameLocation":"2157:12:29","nodeType":"FunctionDefinition","parameters":{"id":7290,"nodeType":"ParameterList","parameters":[],"src":"2169:2:29"},"returnParameters":{"id":7297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7293,"mutability":"mutable","name":"tokens","nameLocation":"2236:6:29","nodeType":"VariableDeclaration","scope":7298,"src":"2219:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7291,"name":"address","nodeType":"ElementaryTypeName","src":"2219:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7292,"nodeType":"ArrayTypeName","src":"2219:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":7296,"mutability":"mutable","name":"amounts","nameLocation":"2261:7:29","nodeType":"VariableDeclaration","scope":7298,"src":"2244:24:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7294,"name":"uint256","nodeType":"ElementaryTypeName","src":"2244:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7295,"nodeType":"ArrayTypeName","src":"2244:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2218:51:29"},"scope":7313,"src":"2148:122:29","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dc17c9ca","id":7305,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenOwner","nameLocation":"2286:13:29","nodeType":"FunctionDefinition","parameters":{"id":7301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7300,"mutability":"mutable","name":"token","nameLocation":"2308:5:29","nodeType":"VariableDeclaration","scope":7305,"src":"2300:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7299,"name":"address","nodeType":"ElementaryTypeName","src":"2300:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2299:15:29"},"returnParameters":{"id":7304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7305,"src":"2338:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7302,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2337:9:29"},"scope":7313,"src":"2277:70:29","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f6b2a2f1","id":7312,"implemented":false,"kind":"function","modifiers":[],"name":"getMinBetAmount","nameLocation":"2362:15:29","nodeType":"FunctionDefinition","parameters":{"id":7308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7307,"mutability":"mutable","name":"token","nameLocation":"2386:5:29","nodeType":"VariableDeclaration","scope":7312,"src":"2378:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7306,"name":"address","nodeType":"ElementaryTypeName","src":"2378:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2377:15:29"},"returnParameters":{"id":7311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7312,"src":"2416:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7309,"name":"uint256","nodeType":"ElementaryTypeName","src":"2416:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2415:9:29"},"scope":7313,"src":"2353:72:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":7314,"src":"121:2306:29","usedErrors":[]}],"src":"32:2395:29"},"id":29}},"contracts":{"@chainlink/contracts/src/v0.8/AutomationBase.sol":{"AutomationBase":{"abi":[{"inputs":[],"name":"OnlySimulatedBackend","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f93d9746761bfd9cc1b878ef8e14dd7f0eee84a75f45a39fdf19969222fc65c964736f6c634300080c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 RETURNDATASIZE SWAP8 CHAINID PUSH23 0x1BFD9CC1B878EF8E14DD7F0EEE84A75F45A39FDF199692 0x22 0xFC PUSH6 0xC964736F6C63 NUMBER STOP ADDMOD 0xC STOP CALLER ","sourceMap":"57:515:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220f93d9746761bfd9cc1b878ef8e14dd7f0eee84a75f45a39fdf19969222fc65c964736f6c634300080c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 RETURNDATASIZE SWAP8 CHAINID PUSH23 0x1BFD9CC1B878EF8E14DD7F0EEE84A75F45A39FDF199692 0x22 0xFC PUSH6 0xC964736F6C63 NUMBER STOP ADDMOD 0xC STOP CALLER ","sourceMap":"57:515:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"preventExecution()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":\"AutomationBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/AutomationCompatible.sol":{"AutomationCompatible":{"abi":[{"inputs":[],"name":"OnlySimulatedBackend","type":"error"},{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":\"AutomationCompatible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)239_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)239_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)239_storage"},"t_struct(RoleData)239_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":236,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":238,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/AccessControlEnumerable.sol":{"AccessControlEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)239_storage)"},{"astId":554,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)3528_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3528_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3528_storage"},"t_mapping(t_bytes32,t_struct(RoleData)239_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)239_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3528_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3527,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3213_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)239_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":236,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":238,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)3213_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3208,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3212,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"IAccessControlEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":766,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/Pausable.sol":{"Pausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":889,"contract":"@openzeppelin/contracts/security/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":990,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203c6a76d02de38e6ebb603a2c46ccacb34d8ec5787711ed577cdaf3c77243d09364736f6c634300080c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY PUSH11 0x76D02DE38E6EBB603A2C46 0xCC 0xAC 0xB3 0x4D DUP15 0xC5 PUSH25 0x7711ED577CDAF3C77243D09364736F6C634300080C00330000 ","sourceMap":"701:6211:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6211:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203c6a76d02de38e6ebb603a2c46ccacb34d8ec5787711ed577cdaf3c77243d09364736f6c634300080c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY PUSH11 0x76D02DE38E6EBB603A2C46 0xCC 0xAC 0xB3 0x4D DUP15 0xC5 PUSH25 0x7711ED577CDAF3C77243D09364736F6C634300080C00330000 ","sourceMap":"701:6211:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208171e45c20c6022891172a4cfaecf3807bd2c104bdbdeb4477a7d0013775943264736f6c634300080c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 PUSH18 0xE45C20C6022891172A4CFAECF3807BD2C104 0xBD 0xBD 0xEB DIFFICULTY PUSH24 0xA7D0013775943264736F6C634300080C0033000000000000 ","sourceMap":"194:9169:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208171e45c20c6022891172a4cfaecf3807bd2c104bdbdeb4477a7d0013775943264736f6c634300080c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 PUSH18 0xE45C20C6022891172A4CFAECF3807BD2C104 0xBD 0xBD 0xEB DIFFICULTY PUSH24 0xA7D0013775943264736F6C634300080C0033000000000000 ","sourceMap":"194:9169:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Multicall.sol":{"Multicall":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Provides a function to batch together multiple calls in a single external call. _Available since v4.1._","kind":"dev","methods":{"multicall(bytes[])":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Receives and executes a batch of function calls on this contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"multicall(bytes[])":"ac9650d8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a function to batch together multiple calls in a single external call. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beff3415fe67516604051888bea881451456380cb68c006f3279a9b441aa67d664736f6c634300080c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE SELFDESTRUCT CALLVALUE ISZERO INVALID PUSH8 0x516604051888BEA8 DUP2 GASLIMIT EQ JUMP CODESIZE 0xC 0xB6 DUP13 STOP PUSH16 0x3279A9B441AA67D664736F6C63430008 0xC STOP CALLER ","sourceMap":"220:2559:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beff3415fe67516604051888bea881451456380cb68c006f3279a9b441aa67d664736f6c634300080c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE SELFDESTRUCT CALLVALUE ISZERO INVALID PUSH8 0x516604051888BEA8 DUP2 GASLIMIT EQ JUMP CODESIZE 0xC 0xB6 DUP13 STOP PUSH16 0x3279A9B441AA67D664736F6C63430008 0xC STOP CALLER ","sourceMap":"220:2559:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2328362faa95475a0d692f7c10a7a77ec8010e60b74f2f859b24fdc82f3445a64736f6c634300080c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 ORIGIN DUP4 PUSH3 0xFAA954 PUSH22 0xA0D692F7C10A7A77EC8010E60B74F2F859B24FDC82F3 DIFFICULTY GAS PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ","sourceMap":"202:12582:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2328362faa95475a0d692f7c10a7a77ec8010e60b74f2f859b24fdc82f3445a64736f6c634300080c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 ORIGIN DUP4 PUSH3 0xFAA954 PUSH22 0xA0D692F7C10A7A77EC8010E60B74F2F859B24FDC82F3 DIFFICULTY GAS PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ","sourceMap":"202:12582:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7b16a9df994580e31b0986683fbc8a2677c8cb9d80060de590bff94e5fdde7064736f6c634300080c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 0xB1 PUSH11 0x9DF994580E31B0986683FB 0xC8 LOG2 PUSH8 0x7C8CB9D80060DE59 SIGNEXTEND SELFDESTRUCT SWAP5 0xE5 REVERT 0xDE PUSH17 0x64736F6C634300080C0033000000000000 ","sourceMap":"215:1047:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7b16a9df994580e31b0986683fbc8a2677c8cb9d80060de590bff94e5fdde7064736f6c634300080c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 0xB1 PUSH11 0x9DF994580E31B0986683FB 0xC8 LOG2 PUSH8 0x7C8CB9D80060DE59 SIGNEXTEND SELFDESTRUCT SWAP5 0xE5 REVERT 0xDE PUSH17 0x64736F6C634300080C0033000000000000 ","sourceMap":"215:1047:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b1925998b5682b1d30ccd2871ec6b827cab21decb38de86b8d9bbc4d8148002d64736f6c634300080c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 SWAP3 MSIZE SWAP9 0xB5 PUSH9 0x2B1D30CCD2871EC6B8 0x27 0xCA 0xB2 SAR 0xEC 0xB3 DUP14 0xE8 PUSH12 0x8D9BBC4D8148002D64736F6C PUSH4 0x4300080C STOP CALLER ","sourceMap":"1329:11630:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1329:11630:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b1925998b5682b1d30ccd2871ec6b827cab21decb38de86b8d9bbc4d8148002d64736f6c634300080c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 SWAP3 MSIZE SWAP9 0xB5 PUSH9 0x2B1D30CCD2871EC6B8 0x27 0xCA 0xB2 SAR 0xEC 0xB3 DUP14 0xE8 PUSH12 0x8D9BBC4D8148002D64736F6C PUSH4 0x4300080C STOP CALLER ","sourceMap":"1329:11630:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BankV2.sol":{"BankV2":{"abi":[{"inputs":[{"internalType":"address","name":"treasuryAddress","type":"address"},{"internalType":"address","name":"teamWalletAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"TokenExists","type":"error"},{"inputs":[],"name":"TokenHasPendingBets","type":"error"},{"inputs":[],"name":"TokenNotPaused","type":"error"},{"inputs":[],"name":"WrongAddress","type":"error"},{"inputs":[{"internalType":"uint16","name":"splitSum","type":"uint16"}],"name":"WrongHouseEdgeSplit","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fees","type":"uint256"}],"name":"AccountFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"AddToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"bank","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dividend","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasury","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"team","type":"uint256"}],"name":"AllocateHouseEdgeAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"CashIn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"HarvestDividend","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"treasuryAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"teamAmount","type":"uint256"}],"name":"HouseEdgeDistribution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"profit","type":"uint256"}],"name":"Payout","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"bool","name":"allowed","type":"bool"}],"name":"SetAllowedToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint16","name":"balanceRisk","type":"uint16"}],"name":"SetBalanceRisk","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"teamWallet","type":"address"}],"name":"SetTeamWallet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint16","name":"bank","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"dividend","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"treasury","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"team","type":"uint16"}],"name":"SetTokenHouseEdgeSplit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"name":"SetTokenMinBetAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"fees","type":"uint256"}],"name":"accountFees","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"addToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"cashIn","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDividends","outputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"getMaxBetAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getMinBetAmount","outputs":[{"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokens","outputs":[{"components":[{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"components":[{"internalType":"bool","name":"allowed","type":"bool"},{"internalType":"bool","name":"paused","type":"bool"},{"internalType":"uint16","name":"balanceRisk","type":"uint16"},{"internalType":"uint256","name":"minBetAmount","type":"uint256"},{"components":[{"internalType":"uint16","name":"bank","type":"uint16"},{"internalType":"uint16","name":"dividend","type":"uint16"},{"internalType":"uint16","name":"treasury","type":"uint16"},{"internalType":"uint16","name":"team","type":"uint16"},{"internalType":"uint256","name":"dividendAmount","type":"uint256"},{"internalType":"uint256","name":"treasuryAmount","type":"uint256"},{"internalType":"uint256","name":"teamAmount","type":"uint256"}],"internalType":"struct BankV2.HouseEdgeSplit","name":"houseEdgeSplit","type":"tuple"}],"internalType":"struct BankV2.Token","name":"token","type":"tuple"}],"internalType":"struct BankV2.TokenMetadata[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvestDividends","outputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"isAllowedToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"profit","type":"uint256"},{"internalType":"uint256","name":"fees","type":"uint256"}],"name":"payout","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bool","name":"allowed","type":"bool"}],"name":"setAllowedToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint16","name":"balanceRisk","type":"uint16"}],"name":"setBalanceRisk","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint16","name":"bank","type":"uint16"},{"internalType":"uint16","name":"dividend","type":"uint16"},{"internalType":"uint16","name":"_treasury","type":"uint16"},{"internalType":"uint16","name":"team","type":"uint16"}],"name":"setHouseEdgeSplit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_teamWallet","type":"address"}],"name":"setTeamWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenMinBetAmount","type":"uint256"}],"name":"setTokenMinBetAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"teamWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokens","outputs":[{"internalType":"bool","name":"allowed","type":"bool"},{"internalType":"bool","name":"paused","type":"bool"},{"internalType":"uint16","name":"balanceRisk","type":"uint16"},{"internalType":"uint256","name":"minBetAmount","type":"uint256"},{"components":[{"internalType":"uint16","name":"bank","type":"uint16"},{"internalType":"uint16","name":"dividend","type":"uint16"},{"internalType":"uint16","name":"treasury","type":"uint16"},{"internalType":"uint16","name":"team","type":"uint16"},{"internalType":"uint256","name":"dividendAmount","type":"uint256"},{"internalType":"uint256","name":"treasuryAmount","type":"uint256"},{"internalType":"uint256","name":"teamAmount","type":"uint256"}],"internalType":"struct BankV2.HouseEdgeSplit","name":"houseEdgeSplit","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"withdrawHouseEdgeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"WrongHouseEdgeSplit(uint16)":[{"params":{"splitSum":"Sum of the house edge allocations rates."}}]},"events":{"AccountFees(address,uint256,uint256)":{"params":{"fees":"Fees received from game.","newBalance":"New token balance.","token":"Address of the token."}},"AddToken(address)":{"params":{"token":"Address of the token."}},"AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256)":{"params":{"bank":"The number of tokens allocated to bank.","dividend":"The number of tokens allocated as staking rewards.","team":"The number of tokens allocated to the team.","token":"Address of the token.","treasury":"The number of tokens allocated to the treasury."}},"CashIn(address,uint256,uint256)":{"params":{"amount":"Bet amount collected.","newBalance":"New token balance.","token":"Address of the token."}},"Deposit(address,uint256)":{"params":{"amount":"The number of token deposited.","token":"Address of the token."}},"HarvestDividend(address,uint256)":{"params":{"amount":"The number of tokens sent to the SwirlMaster.","token":"Address of the token."}},"HouseEdgeDistribution(address,uint256,uint256)":{"params":{"teamAmount":"The number of tokens sent to the team.","token":"Address of the token.","treasuryAmount":"The number of tokens sent to the treasury."}},"Payout(address,uint256,uint256)":{"params":{"newBalance":"New token balance.","profit":"Bet profit amount sent.","token":"Address of the token."}},"SetAllowedToken(address,bool)":{"params":{"allowed":"Whether the token is allowed for betting.","token":"Address of the token."}},"SetBalanceRisk(address,uint16)":{"params":{"balanceRisk":"Rate defining the balance risk."}},"SetTeamWallet(address)":{"params":{"teamWallet":"The team wallet address."}},"SetTokenMinBetAmount(address,uint256)":{"params":{"minBetAmount":"Minimum bet amount.","token":"Address of the token."}},"Withdraw(address,uint256)":{"params":{"amount":"The number of token withdrawn.","token":"Address of the token."}}},"kind":"dev","methods":{"accountFees(address,uint256)":{"params":{"fees":"Bet amount and bet profit fees amount.","token":"Address of the token."}},"addToken(address)":{"params":{"token":"Address of the token."}},"cashIn(address,uint256)":{"details":"In case of an ERC20, the bet amount should be transfered prior to this tx.In case of the gas token, the bet amount is sent along with this tx.","params":{"amount":"Loss bet amount.","tokenAddress":"Address of the token."}},"constructor":{"params":{"teamWalletAddress":"Team wallet.","treasuryAddress":"Treasury multi-sig wallet."}},"deposit(address,uint256)":{"params":{"amount":"Number of tokens.","token":"Address of the token."}},"getBalance(address)":{"params":{"token":"Address of the token."},"returns":{"_0":"The amount of token available for profits."}},"getDividends()":{"returns":{"_0":"The list of tokens addresses.","_1":"The list of tokens' amounts harvested."}},"getMaxBetAmount(address,uint256)":{"details":"The multiplier should be at least 10000.","params":{"multiplier":"The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.","token":"Address of the token."},"returns":{"_0":"Maximum bet amount for the token."}},"getMinBetAmount(address)":{"details":"The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.","params":{"token":"Address of the token."},"returns":{"minBetAmount":"Min bet amount."}},"getTokens()":{"details":"For the front-end"},"harvestDividends()":{"returns":{"_0":"The list of tokens addresses.","_1":"The list of tokens' amounts harvested."}},"isAllowedToken(address)":{"params":{"tokenAddress":"Address of the token."},"returns":{"_0":"Whether the token is enabled for bets."}},"payout(address,address,uint256,uint256)":{"params":{"fees":"Bet amount and bet profit fees amount.","profit":"Number of tokens to be sent to the gamer.","token":"Address of the token.","user":"Address of the gamer."}},"setAllowedToken(address,bool)":{"params":{"allowed":"Whether the token is enabled for bets.","token":"Address of the token."}},"setBalanceRisk(address,uint16)":{"params":{"balanceRisk":"Risk rate.","token":"Address of the token."}},"setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)":{"details":"`bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.","params":{"_treasury":"Rate to be allocated to the treasury, on bet payout.","bank":"Rate to be allocated to the bank, on bet payout.","dividend":"Rate to be allocated as staking rewards, on bet payout.","team":"Rate to be allocated to the team, on bet payout.","token":"Address of the token."}},"setTeamWallet(address)":{"params":{"_teamWallet":"The team wallet address."}},"setTokenMinBetAmount(address,uint256)":{"params":{"token":"Address of the token.","tokenMinBetAmount":"Minimum bet amount."}},"withdraw(address,uint256)":{"params":{"amount":"Number of tokens.","token":"Address of the token."}},"withdrawHouseEdgeAmount(address)":{"params":{"tokenAddress":"Address of the token."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4052":{"entryPoint":null,"id":4052,"parameterSlots":2,"returnSlots":0},"@setTeamWallet_4912":{"entryPoint":124,"id":4912,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":259,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":288,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:699:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:30","statements":[{"nodeType":"YulAssignment","src":"84:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:30"},"nodeType":"YulFunctionCall","src":"93:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:30"}]},{"body":{"nodeType":"YulBlock","src":"169:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:30"},"nodeType":"YulFunctionCall","src":"171:12:30"},"nodeType":"YulExpressionStatement","src":"171:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:30"},"nodeType":"YulFunctionCall","src":"150:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:30"},"nodeType":"YulFunctionCall","src":"146:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:30"},"nodeType":"YulFunctionCall","src":"135:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:30"},"nodeType":"YulFunctionCall","src":"125:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:30"},"nodeType":"YulFunctionCall","src":"118:50:30"},"nodeType":"YulIf","src":"115:70:30"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:30","type":""}],"src":"14:177:30"},{"body":{"nodeType":"YulBlock","src":"294:195:30","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:30"},"nodeType":"YulFunctionCall","src":"342:12:30"},"nodeType":"YulExpressionStatement","src":"342:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:30"},"nodeType":"YulFunctionCall","src":"311:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:30"},"nodeType":"YulFunctionCall","src":"307:32:30"},"nodeType":"YulIf","src":"304:52:30"},{"nodeType":"YulAssignment","src":"365:50:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:30"},"nodeType":"YulFunctionCall","src":"375:40:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:30"}]},{"nodeType":"YulAssignment","src":"424:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:30"},"nodeType":"YulFunctionCall","src":"464:18:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:30"},"nodeType":"YulFunctionCall","src":"434:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:30","type":""}],"src":"196:293:30"},{"body":{"nodeType":"YulBlock","src":"595:102:30","statements":[{"nodeType":"YulAssignment","src":"605:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"617:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"628:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"613:3:30"},"nodeType":"YulFunctionCall","src":"613:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"605:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"647:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"662:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"678:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"683:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"674:3:30"},"nodeType":"YulFunctionCall","src":"674:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"687:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"670:3:30"},"nodeType":"YulFunctionCall","src":"670:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"658:3:30"},"nodeType":"YulFunctionCall","src":"658:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"640:6:30"},"nodeType":"YulFunctionCall","src":"640:51:30"},"nodeType":"YulExpressionStatement","src":"640:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"564:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"575:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"586:4:30","type":""}],"src":"494:203:30"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b506040516200213338038062002133833981016040819052620000349162000120565b6001600160a01b0382166200005c57604051630d23cf4160e11b815260040160405180910390fd5b6001600160a01b03821660805262000074816200007c565b505062000158565b6001600160a01b038116620000a457604051630d23cf4160e11b815260040160405180910390fd5b60008054610100600160a81b0319166101006001600160a01b038481168202929092179283905560405192041681527fc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da9060200160405180910390a150565b80516001600160a01b03811681146200011b57600080fd5b919050565b600080604083850312156200013457600080fd5b6200013f8362000103565b91506200014f6020840162000103565b90509250929050565b608051611fb86200017b6000396000818161027701526104f20152611fb86000f3fe6080604052600436106101355760003560e01c80638aaa2284116100ab578063d48bfca71161006f578063d48bfca714610361578063e486033914610381578063ed442e1414610443578063f3fef3a314610458578063f6b2a2f114610478578063f8b2cb4f1461049857600080fd5b80638aaa2284146102bc578063a7fd00f0146102dc578063aa6ca808146102fc578063ca7a87691461031e578063cbe230c31461033157600080fd5b80634297dcbe116100fd5780634297dcbe146101d557806347e7ef24146101f557806356f0406d14610208578063599270441461022857806361d027b314610265578063802ad8fb1461029957600080fd5b80630ae30cb01461013a5780631525ff7d1461015c5780631f6150231461017c578063278b39de1461018f5780633138809d146101c2575b600080fd5b34801561014657600080fd5b5061015a610155366004611964565b6104b8565b005b34801561016857600080fd5b5061015a610177366004611964565b61059f565b61015a61018a366004611981565b610626565b34801561019b57600080fd5b506101af6101aa3660046119c7565b610683565b6040519081526020015b60405180910390f35b61015a6101d03660046119c7565b6106cc565b3480156101e157600080fd5b5061015a6101f03660046119c7565b610734565b61015a6102033660046119c7565b610784565b34801561021457600080fd5b5061015a610223366004611a05565b6107e9565b34801561023457600080fd5b5060005461024d9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101b9565b34801561027157600080fd5b5061024d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a557600080fd5b506102ae61084e565b6040516101b9929190611a3a565b3480156102c857600080fd5b5061015a6102d7366004611acc565b610a02565b3480156102e857600080fd5b5061015a6102f7366004611b05565b610a5a565b34801561030857600080fd5b50610311610b75565b6040516101b99190611c14565b61015a61032c3660046119c7565b610ef0565b34801561033d57600080fd5b5061035161034c366004611964565b610f2e565b60405190151581526020016101b9565b34801561036d57600080fd5b5061015a61037c366004611964565b611002565b34801561038d57600080fd5b5061043261039c366004611964565b600160208181526000928352604092839020805492810154845160e081018652600283015461ffff8082168352620100008083048216968401969096526401000000008204811697830197909752600160301b90048616606082015260038301546080820152600483015460a082015260059092015460c083015260ff8085169561010086049091169493909304909216919085565b6040516101b9959493929190611d01565b34801561044f57600080fd5b506102ae61110b565b34801561046457600080fd5b5061015a6104733660046119c7565b611260565b34801561048457600080fd5b506101af610493366004611964565b611310565b3480156104a457600080fd5b506101af6104b3366004611964565b61133c565b6001600160a01b038116600090815260016020526040902060048101546005820154600290920191811561051857600060028401556105187f0000000000000000000000000000000000000000000000000000000000000000858461146d565b801561054157600060038401819055546105419061010090046001600160a01b0316858361146d565b8115158061054e57508015155b156105995760408051838152602081018390526001600160a01b038616917f0146f1701c23c89f761280798d36d6c4e3acb349438456f5da8f83a2f5dd8cdc91015b60405180910390a25b50505050565b6001600160a01b0381166105c657604051630d23cf4160e11b815260040160405180910390fd5b60008054610100600160a81b0319166101006001600160a01b038481168202929092179283905560405192041681527fc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da906020015b60405180910390a150565b61063083826114ca565b61063b84848461146d565b826001600160a01b03167f634235fcf5af0adbca1a405ec65f6f6c08f55e1f379c2c45cd10f23cb29e0e3161066f8561133c565b604080519182526020820186905201610590565b6001600160a01b038216600090815260016020526040812054829062010000900461ffff166106b18561133c565b6106bb9190611d51565b6106c59190611d70565b9392505050565b816001600160a01b03167f812b76b477469edc716929cbf7ed54e3d9c1a68d8b9f8290dbabcda54d96fcbe6107008461133c565b6001600160a01b038516156107155783610717565b345b604080519283526020830191909152015b60405180910390a25050565b6001600160a01b03821660008181526001602081905260409182902001839055517f8b4a07860448b613116df3f175c837980eceaca7d1dc5143c46a20ab31ec00f9906107289084815260200190565b6001600160a01b0382166107995750346107ae565b6107ae6001600160a01b038316333084611622565b816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161072891815260200190565b6001600160a01b038216600081815260016020908152604091829020805463ffff000019166201000061ffff87169081029190911790915591519182527f68288b0936dd994d19323ee940b2703e7bf46fae2552319d60dc1239ba52ec689101610728565b60008054606091829160ff1667ffffffffffffffff81111561087257610872611d92565b60405190808252806020026020018201604052801561089b578160200160208202803683370190505b50600080549192509060ff1667ffffffffffffffff8111156108bf576108bf611d92565b6040519080825280602002602001820160405280156108e8578160200160208202803683370190505b50905060005b60005460ff90811690821610156109f85760ff81166000908152600260209081526040808320546001600160a01b03168084526001909252909120600381015480156109e2576000600383015561094633848361146d565b826001600160a01b03167fca64dbcaf91abfb066e7a5163f1d135f8f48f2cbdb0395e3b35cc278ebbd340b8260405161098191815260200190565b60405180910390a282868560ff168151811061099f5761099f611da8565b60200260200101906001600160a01b031690816001600160a01b03168152505080858560ff16815181106109d5576109d5611da8565b6020026020010181815250505b50505080806109f090611dbe565b9150506108ee565b5090939092509050565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527fe589eb036e62c07e307aa4d441bd39c81e8bd86f349eaacb0caa06b1477f7f9a9101610728565b60008282610a688688611dde565b610a729190611dde565b610a7c9190611dde565b90508061ffff1661271014610aaf576040516318410e1160e21b815261ffff821660048201526024015b60405180910390fd5b6001600160a01b038616600081815260016020908152604091829020600201805461ffff8a811663ffffffff199092168217620100008b83169081029190911767ffffffff0000000019166401000000008b841690810267ffff000000000000191691909117600160301b938b169384021785558651938452948301529381019290925260608201929092529091907f01573e473e8842c25da06b37c286cdd7bf1c828e796ab47f7eec894ac9fbbee3906080015b60405180910390a250505050505050565b600080546060919060ff1667ffffffffffffffff811115610b9857610b98611d92565b604051908082528060200260200182016040528015610bd157816020015b610bbe6118b2565b815260200190600190039081610bb65790505b50905060005b60005460ff9081169082161015610eea5760ff8181166000908152600260208181526040808420546001600160a01b0316808552600180845294829020825160a080820185528254808a1615158352610100810490991615158287015261ffff62010000998a900481168387015297830154606080840191909152855160e08101875297840154808a168952998a048916968801969096526401000000008904881694870194909452600160301b90970490951692840192909252600384015460808085019190915260048501549184019190915260059093015460c0830152918301529081610d50576040518060a00160405280601260ff168152602001836001600160a01b031681526020016040518060400160405280600381526020016208aa8960eb1b81525081526020016040518060400160405280600381526020016208aa8960eb1b815250815260200182815250848460ff1681518110610d4057610d40611da8565b6020026020010181905250610ed5565b60008290506040518060a00160405280826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190611e04565b60ff168152602001846001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e17573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e3f9190810190611e27565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eaa9190810190611e27565b815260200183815250858560ff1681518110610ec857610ec8611da8565b6020026020010181905250505b50508080610ee290611dbe565b915050610bd7565b50919050565b610efa82826114ca565b816001600160a01b03167f71928ab56dd9fb6df8072adf5fefb4d17ed280fa21652433fe96d7d6729bd3286107008461133c565b6001600160a01b0381166000908152600160208181526040808420815160a08082018452825460ff8082161515845261010082041615158387015261ffff620100009182900481168487015296840154606080850191909152855160e0810187526002860154808a1682529283048916978101979097526401000000008204881695870195909552600160301b90049095169284019290925260038101546080848101919091526004820154948401949094526005015460c083015291820152805180156106c55750602001511592915050565b60005460ff16156110745760005b60005460ff90811690821610156110725760ff81166000908152600260205260409020546001600160a01b038381169116141561106057604051632ae3f45d60e11b815260040160405180910390fd5b8061106a81611dbe565b915050611010565b505b6000805460ff908116825260026020526040822080546001600160a01b0319166001600160a01b03851617905581546001929182916110b591859116611ec9565b92506101000a81548160ff021916908360ff1602179055507fe473c74f34be27c1464d6624f14a0d7fd4e301cbfa29c3eba425d378c8a7ebe08160405161061b91906001600160a01b0391909116815260200190565b60008054606091829160ff1667ffffffffffffffff81111561112f5761112f611d92565b604051908082528060200260200182016040528015611158578160200160208202803683370190505b50600080549192509060ff1667ffffffffffffffff81111561117c5761117c611d92565b6040519080825280602002602001820160405280156111a5578160200160208202803683370190505b50905060005b60005460ff90811690821610156109f85760ff81166000908152600260209081526040808320546001600160a01b031680845260019092529091206003810154801561124a5782868560ff168151811061120757611207611da8565b60200260200101906001600160a01b031690816001600160a01b03168152505080858560ff168151811061123d5761123d611da8565b6020026020010181815250505b505050808061125890611dbe565b9150506111ab565b600061126b8361133c565b905080156112b1576001600160a01b038316600090815260016020526040902054610100900460ff166112b1576040516393b3a85d60e01b815260040160405180910390fd5b808211156112bd578091505b6112c833848461146d565b826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161130391815260200190565b60405180910390a2505050565b6001600160a01b038116600090815260016020819052604090912001548061133757506127105b919050565b6000806001600160a01b0383166113545750476113bf565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015611398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bc9190611eee565b90505b6001600160a01b038316600090815260016020908152604091829020825160e081018452600282015461ffff80821683526201000082048116948301949094526401000000008104841694820194909452600160301b9093049091166060830152600381015460808301819052600482015460a0840181905260059092015460c0840181905291906114519085611f07565b61145b9190611f07565b6114659190611f07565b949350505050565b6001600160a01b0382166114b1576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610599573d6000803e3d6000fd5b6114c56001600160a01b038316848361168d565b505050565b6001600160a01b03821660009081526001602052604081206002018054909190612710906115029062010000900461ffff1685611d51565b61150c9190611d70565b9050808260010160008282546115229190611f1e565b909155505081546000906127109061153e9061ffff1686611d51565b6115489190611d70565b83549091506000906127109061156a90640100000000900461ffff1687611d51565b6115749190611d70565b90508084600201600082825461158a9190611f1e565b90915550508354600090612710906115ad90600160301b900461ffff1688611d51565b6115b79190611d70565b9050808560030160008282546115cd9190611f1e565b90915550506040805184815260208101869052908101839052606081018290526001600160a01b038816907f0b5a4c9121a83120fc7b30f195ddd2c279ec4510cfc8f051380851e8f0686f4990608001610b64565b6040516001600160a01b03808516602483015283166044820152606481018290526105999085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116bd565b6040516001600160a01b0383166024820152604481018290526114c590849063a9059cbb60e01b90606401611656565b6000611712826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117929092919063ffffffff16565b90508051600014806117335750808060200190518101906117339190611f36565b6114c55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aa6565b6060611465848460008585600080866001600160a01b031685876040516117b99190611f53565b60006040518083038185875af1925050503d80600081146117f6576040519150601f19603f3d011682016040523d82523d6000602084013e6117fb565b606091505b509150915061180c87838387611817565b979650505050505050565b6060831561188357825161187c576001600160a01b0385163b61187c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa6565b5081611465565b61146583838151156118985781518083602001fd5b8060405162461bcd60e51b8152600401610aa69190611f6f565b6040518060a00160405280600060ff16815260200160006001600160a01b0316815260200160608152602001606081526020016119476040805160a08082018352600080835260208084018290528385018290526060808501839052855160e081018752838152918201839052948101829052938401819052608084810182905291840181905260c084015290919082015290565b905290565b6001600160a01b038116811461196157600080fd5b50565b60006020828403121561197657600080fd5b81356106c58161194c565b6000806000806080858703121561199757600080fd5b84356119a28161194c565b935060208501356119b28161194c565b93969395505050506040820135916060013590565b600080604083850312156119da57600080fd5b82356119e58161194c565b946020939093013593505050565b803561ffff8116811461133757600080fd5b60008060408385031215611a1857600080fd5b8235611a238161194c565b9150611a31602084016119f3565b90509250929050565b604080825283519082018190526000906020906060840190828701845b82811015611a7c5781516001600160a01b031684529284019290840190600101611a57565b5050508381038285015284518082528583019183019060005b81811015611ab157835183529284019291840191600101611a95565b5090979650505050505050565b801515811461196157600080fd5b60008060408385031215611adf57600080fd5b8235611aea8161194c565b91506020830135611afa81611abe565b809150509250929050565b600080600080600060a08688031215611b1d57600080fd5b8535611b288161194c565b9450611b36602087016119f3565b9350611b44604087016119f3565b9250611b52606087016119f3565b9150611b60608087016119f3565b90509295509295909350565b60005b83811015611b87578181015183820152602001611b6f565b838111156105995750506000910152565b60008151808452611bb0816020860160208601611b6c565b601f01601f19169290920160200192915050565b61ffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611cf357888303603f190185528151805160ff168452878101516001600160a01b031688850152868101516101e088860181905290611c8082870182611b98565b91505060608083015186830382880152611c9a8382611b98565b60809485015180511515898701528c810151151560a08a01528b81015161ffff1660c08a01529283015160e0890152919093015192509050611ce0610100860183611bc4565b9588019593505090860190600101611c3b565b509098975050505050505050565b8515158152841515602082015261ffff84166040820152606081018390526101608101611d316080830184611bc4565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d6b57611d6b611d3b565b500290565b600082611d8d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415611dd557611dd5611d3b565b60010192915050565b600061ffff808316818516808303821115611dfb57611dfb611d3b565b01949350505050565b600060208284031215611e1657600080fd5b815160ff811681146106c557600080fd5b600060208284031215611e3957600080fd5b815167ffffffffffffffff80821115611e5157600080fd5b818401915084601f830112611e6557600080fd5b815181811115611e7757611e77611d92565b604051601f8201601f19908116603f01168101908382118183101715611e9f57611e9f611d92565b81604052828152876020848701011115611eb857600080fd5b61180c836020830160208801611b6c565b600060ff821660ff84168060ff03821115611ee657611ee6611d3b565b019392505050565b600060208284031215611f0057600080fd5b5051919050565b600082821015611f1957611f19611d3b565b500390565b60008219821115611f3157611f31611d3b565b500190565b600060208284031215611f4857600080fd5b81516106c581611abe565b60008251611f65818460208701611b6c565b9190910192915050565b6020815260006106c56020830184611b9856fea2646970667358221220b7cc471adb090fd8025c528729e4e7d168f0962cbcc83bb66910dfd66ec8fca264736f6c634300080c0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2133 CODESIZE SUB DUP1 PUSH3 0x2133 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x120 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0xD23CF41 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x80 MSTORE PUSH3 0x74 DUP2 PUSH3 0x7C JUMP JUMPDEST POP POP PUSH3 0x158 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xA4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD23CF41 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MUL SWAP3 SWAP1 SWAP3 OR SWAP3 DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP3 DIV AND DUP2 MSTORE PUSH32 0xC6A5DD316FE9D0339F2769DEAB7E31F64C8F5B101FFD85DFC9A83DBEAF2E69DA SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x13F DUP4 PUSH3 0x103 JUMP JUMPDEST SWAP2 POP PUSH3 0x14F PUSH1 0x20 DUP5 ADD PUSH3 0x103 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1FB8 PUSH3 0x17B PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x277 ADD MSTORE PUSH2 0x4F2 ADD MSTORE PUSH2 0x1FB8 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x135 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8AAA2284 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xD48BFCA7 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xD48BFCA7 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0xED442E14 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0xF6B2A2F1 EQ PUSH2 0x478 JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8AAA2284 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xA7FD00F0 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0xAA6CA808 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xCA7A8769 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xCBE230C3 EQ PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4297DCBE GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x4297DCBE EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x56F0406D EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x59927044 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x802AD8FB EQ PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAE30CB0 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x1525FF7D EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x1F615023 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x278B39DE EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x3138809D EQ PUSH2 0x1C2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x4B8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x177 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST PUSH2 0x15A PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x1981 JUMP JUMPDEST PUSH2 0x626 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AF PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x683 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH2 0x1D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x6CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x1F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x734 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x784 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A05 JUMP JUMPDEST PUSH2 0x7E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x24D SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24D PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x84E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP3 SWAP2 SWAP1 PUSH2 0x1A3A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ACC JUMP JUMPDEST PUSH2 0xA02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B05 JUMP JUMPDEST PUSH2 0xA5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x1C14 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0xEF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0x34C CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0xF2E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x37C CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x1002 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 DUP2 ADD SLOAD DUP5 MLOAD PUSH1 0xE0 DUP2 ADD DUP7 MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP1 DUP4 DIV DUP3 AND SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP8 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV DUP7 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xFF DUP1 DUP6 AND SWAP6 PUSH2 0x100 DUP7 DIV SWAP1 SWAP2 AND SWAP5 SWAP4 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x110B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x473 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x1260 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AF PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x1310 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AF PUSH2 0x4B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 DUP2 ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 PUSH1 0x2 DUP5 ADD SSTORE PUSH2 0x518 PUSH32 0x0 DUP6 DUP5 PUSH2 0x146D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 PUSH1 0x3 DUP5 ADD DUP2 SWAP1 SSTORE SLOAD PUSH2 0x541 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP4 PUSH2 0x146D JUMP JUMPDEST DUP2 ISZERO ISZERO DUP1 PUSH2 0x54E JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x599 JUMPI PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x146F1701C23C89F761280798D36D6C4E3ACB349438456F5DA8F83A2F5DD8CDC SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD23CF41 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MUL SWAP3 SWAP1 SWAP3 OR SWAP3 DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP3 DIV AND DUP2 MSTORE PUSH32 0xC6A5DD316FE9D0339F2769DEAB7E31F64C8F5B101FFD85DFC9A83DBEAF2E69DA SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x630 DUP4 DUP3 PUSH2 0x14CA JUMP JUMPDEST PUSH2 0x63B DUP5 DUP5 DUP5 PUSH2 0x146D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x634235FCF5AF0ADBCA1A405EC65F6F6C08F55E1F379C2C45CD10F23CB29E0E31 PUSH2 0x66F DUP6 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE ADD PUSH2 0x590 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x6B1 DUP6 PUSH2 0x133C JUMP JUMPDEST PUSH2 0x6BB SWAP2 SWAP1 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x812B76B477469EDC716929CBF7ED54E3D9C1A68D8B9F8290DBABCDA54D96FCBE PUSH2 0x700 DUP5 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x715 JUMPI DUP4 PUSH2 0x717 JUMP JUMPDEST CALLVALUE JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 ADD DUP4 SWAP1 SSTORE MLOAD PUSH32 0x8B4A07860448B613116DF3F175C837980ECEACA7D1DC5143C46A20AB31EC00F9 SWAP1 PUSH2 0x728 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x799 JUMPI POP CALLVALUE PUSH2 0x7AE JUMP JUMPDEST PUSH2 0x7AE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER ADDRESS DUP5 PUSH2 0x1622 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C DUP3 PUSH1 0x40 MLOAD PUSH2 0x728 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF DUP8 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x68288B0936DD994D19323EE940B2703E7BF46FAE2552319D60DC1239BA52EC68 SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x872 JUMPI PUSH2 0x872 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x89B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8BF JUMPI PUSH2 0x8BF PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8E8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x9F8 JUMPI PUSH1 0xFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP1 ISZERO PUSH2 0x9E2 JUMPI PUSH1 0x0 PUSH1 0x3 DUP4 ADD SSTORE PUSH2 0x946 CALLER DUP5 DUP4 PUSH2 0x146D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xCA64DBCAF91ABFB066E7A5163F1D135F8F48F2CBDB0395E3B35CC278EBBD340B DUP3 PUSH1 0x40 MLOAD PUSH2 0x981 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 DUP7 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x99F JUMPI PUSH2 0x99F PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x9D5 JUMPI PUSH2 0x9D5 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x9F0 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8EE JUMP JUMPDEST POP SWAP1 SWAP4 SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE589EB036E62C07E307AA4D441BD39C81E8BD86F349EAACB0CAA06B1477F7F9A SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH2 0xA68 DUP7 DUP9 PUSH2 0x1DDE JUMP JUMPDEST PUSH2 0xA72 SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND PUSH2 0x2710 EQ PUSH2 0xAAF JUMPI PUSH1 0x40 MLOAD PUSH4 0x18410E11 PUSH1 0xE2 SHL DUP2 MSTORE PUSH2 0xFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP11 DUP2 AND PUSH4 0xFFFFFFFF NOT SWAP1 SWAP3 AND DUP3 OR PUSH3 0x10000 DUP12 DUP4 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR PUSH8 0xFFFFFFFF00000000 NOT AND PUSH5 0x100000000 DUP12 DUP5 AND SWAP1 DUP2 MUL PUSH8 0xFFFF000000000000 NOT AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x30 SHL SWAP4 DUP12 AND SWAP4 DUP5 MUL OR DUP6 SSTORE DUP7 MLOAD SWAP4 DUP5 MSTORE SWAP5 DUP4 ADD MSTORE SWAP4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x1573E473E8842C25DA06B37C286CDD7BF1C828E796AB47F7EEC894AC9FBBEE3 SWAP1 PUSH1 0x80 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB98 JUMPI PUSH2 0xB98 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBD1 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xBBE PUSH2 0x18B2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xBB6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0xEEA JUMPI PUSH1 0xFF DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP6 MSTORE DUP3 SLOAD DUP1 DUP11 AND ISZERO ISZERO DUP4 MSTORE PUSH2 0x100 DUP2 DIV SWAP1 SWAP10 AND ISZERO ISZERO DUP3 DUP8 ADD MSTORE PUSH2 0xFFFF PUSH3 0x10000 SWAP10 DUP11 SWAP1 DIV DUP2 AND DUP4 DUP8 ADD MSTORE SWAP8 DUP4 ADD SLOAD PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP2 ADD DUP8 MSTORE SWAP8 DUP5 ADD SLOAD DUP1 DUP11 AND DUP10 MSTORE SWAP10 DUP11 DIV DUP10 AND SWAP7 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH5 0x100000000 DUP10 DIV DUP9 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP8 DIV SWAP1 SWAP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x80 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP6 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP4 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 DUP2 PUSH2 0xD50 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x12 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x8AA89 PUSH1 0xEB SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x8AA89 PUSH1 0xEB SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP5 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xD40 JUMPI PUSH2 0xD40 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDC2 SWAP2 SWAP1 PUSH2 0x1E04 JUMP JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6FDDE03 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE3F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E27 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95D89B41 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xEAA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E27 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP6 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xEC8 JUMPI PUSH2 0xEC8 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0xEE2 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBD7 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEFA DUP3 DUP3 PUSH2 0x14CA JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x71928AB56DD9FB6DF8072ADF5FEFB4D17ED280FA21652433FE96D7D6729BD328 PUSH2 0x700 DUP5 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP5 MSTORE DUP3 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP5 MSTORE PUSH2 0x100 DUP3 DIV AND ISZERO ISZERO DUP4 DUP8 ADD MSTORE PUSH2 0xFFFF PUSH3 0x10000 SWAP2 DUP3 SWAP1 DIV DUP2 AND DUP5 DUP8 ADD MSTORE SWAP7 DUP5 ADD SLOAD PUSH1 0x60 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP2 ADD DUP8 MSTORE PUSH1 0x2 DUP7 ADD SLOAD DUP1 DUP11 AND DUP3 MSTORE SWAP3 DUP4 DIV DUP10 AND SWAP8 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH5 0x100000000 DUP3 DIV DUP9 AND SWAP6 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV SWAP1 SWAP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP3 ADD SLOAD SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE SWAP2 DUP3 ADD MSTORE DUP1 MLOAD DUP1 ISZERO PUSH2 0x6C5 JUMPI POP PUSH1 0x20 ADD MLOAD ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1074 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x1072 JUMPI PUSH1 0xFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1060 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2AE3F45D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x106A DUP2 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1010 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE DUP2 SLOAD PUSH1 0x1 SWAP3 SWAP2 DUP3 SWAP2 PUSH2 0x10B5 SWAP2 DUP6 SWAP2 AND PUSH2 0x1EC9 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xE473C74F34BE27C1464D6624F14A0D7FD4E301CBFA29C3EBA425D378C8A7EBE0 DUP2 PUSH1 0x40 MLOAD PUSH2 0x61B SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x112F JUMPI PUSH2 0x112F PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1158 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x117C JUMPI PUSH2 0x117C PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11A5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x9F8 JUMPI PUSH1 0xFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP1 ISZERO PUSH2 0x124A JUMPI DUP3 DUP7 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1207 JUMPI PUSH2 0x1207 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x123D JUMPI PUSH2 0x123D PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x1258 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP4 PUSH2 0x133C JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x12B1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x12B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x93B3A85D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12BD JUMPI DUP1 SWAP2 POP JUMPDEST PUSH2 0x12C8 CALLER DUP5 DUP5 PUSH2 0x146D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1303 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP1 PUSH2 0x1337 JUMPI POP PUSH2 0x2710 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1354 JUMPI POP SELFBALANCE PUSH2 0x13BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1398 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13BC SWAP2 SWAP1 PUSH2 0x1EEE JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH5 0x100000000 DUP2 DIV DUP5 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP4 DIV SWAP1 SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 SWAP1 PUSH2 0x1451 SWAP1 DUP6 PUSH2 0x1F07 JUMP JUMPDEST PUSH2 0x145B SWAP2 SWAP1 PUSH2 0x1F07 JUMP JUMPDEST PUSH2 0x1465 SWAP2 SWAP1 PUSH2 0x1F07 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x14B1 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x599 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x14C5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 DUP4 PUSH2 0x168D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x1502 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND DUP6 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x150C SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1522 SWAP2 SWAP1 PUSH2 0x1F1E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x153E SWAP1 PUSH2 0xFFFF AND DUP7 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x1548 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x156A SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH2 0xFFFF AND DUP8 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x1574 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x158A SWAP2 SWAP1 PUSH2 0x1F1E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x15AD SWAP1 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP9 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x15B7 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x15CD SWAP2 SWAP1 PUSH2 0x1F1E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH32 0xB5A4C9121A83120FC7B30F195DDD2C279EC4510CFC8F051380851E8F0686F49 SWAP1 PUSH1 0x80 ADD PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x599 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x14C5 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1712 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1792 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1733 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1733 SWAP2 SWAP1 PUSH2 0x1F36 JUMP JUMPDEST PUSH2 0x14C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1465 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x17B9 SWAP2 SWAP1 PUSH2 0x1F53 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x180C DUP8 DUP4 DUP4 DUP8 PUSH2 0x1817 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1883 JUMPI DUP3 MLOAD PUSH2 0x187C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x187C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAA6 JUMP JUMPDEST POP DUP2 PUSH2 0x1465 JUMP JUMPDEST PUSH2 0x1465 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1898 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAA6 SWAP2 SWAP1 PUSH2 0x1F6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1947 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP4 DUP6 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP6 ADD DUP4 SWAP1 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP2 ADD DUP8 MSTORE DUP4 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE SWAP5 DUP2 ADD DUP3 SWAP1 MSTORE SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP5 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6C5 DUP2 PUSH2 0x194C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x19A2 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x19B2 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x19E5 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A23 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP2 POP PUSH2 0x1A31 PUSH1 0x20 DUP5 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1A7C JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A57 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE DUP6 DUP4 ADD SWAP2 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AB1 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1A95 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1AEA DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1AFA DUP2 PUSH2 0x1ABE JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1B28 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP5 POP PUSH2 0x1B36 PUSH1 0x20 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B44 PUSH1 0x40 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP3 POP PUSH2 0x1B52 PUSH1 0x60 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B60 PUSH1 0x80 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B87 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B6F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x599 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1BB0 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B6C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP1 DUP3 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CF3 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0xFF AND DUP5 MSTORE DUP8 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP6 ADD MSTORE DUP7 DUP2 ADD MLOAD PUSH2 0x1E0 DUP9 DUP7 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH2 0x1C80 DUP3 DUP8 ADD DUP3 PUSH2 0x1B98 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP1 DUP4 ADD MLOAD DUP7 DUP4 SUB DUP3 DUP9 ADD MSTORE PUSH2 0x1C9A DUP4 DUP3 PUSH2 0x1B98 JUMP JUMPDEST PUSH1 0x80 SWAP5 DUP6 ADD MLOAD DUP1 MLOAD ISZERO ISZERO DUP10 DUP8 ADD MSTORE DUP13 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP11 ADD MSTORE DUP12 DUP2 ADD MLOAD PUSH2 0xFFFF AND PUSH1 0xC0 DUP11 ADD MSTORE SWAP3 DUP4 ADD MLOAD PUSH1 0xE0 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 ADD MLOAD SWAP3 POP SWAP1 POP PUSH2 0x1CE0 PUSH2 0x100 DUP7 ADD DUP4 PUSH2 0x1BC4 JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1C3B JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP6 ISZERO ISZERO DUP2 MSTORE DUP5 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFFFF DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD PUSH2 0x1D31 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1BC4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1D6B JUMPI PUSH2 0x1D6B PUSH2 0x1D3B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D8D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x1DD5 JUMPI PUSH2 0x1DD5 PUSH2 0x1D3B JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x1DFB JUMPI PUSH2 0x1DFB PUSH2 0x1D3B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1E77 JUMPI PUSH2 0x1E77 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1E9F JUMPI PUSH2 0x1E9F PUSH2 0x1D92 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1EB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x180C DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1B6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x1EE6 JUMPI PUSH2 0x1EE6 PUSH2 0x1D3B JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1F19 JUMPI PUSH2 0x1F19 PUSH2 0x1D3B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1F31 JUMPI PUSH2 0x1F31 PUSH2 0x1D3B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6C5 DUP2 PUSH2 0x1ABE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F65 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B6C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x6C5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B98 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xCC SELFBALANCE BYTE 0xDB MULMOD 0xF 0xD8 MUL 0x5C MSTORE DUP8 0x29 0xE4 0xE7 0xD1 PUSH9 0xF0962CBCC83BB66910 0xDF 0xD6 PUSH15 0xC8FCA264736F6C634300080C003300 ","sourceMap":"514:21606:26:-:0;;;6771:364;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;6849:29:26;;6845:81;;6901:14;;-1:-1:-1;;;6901:14:26;;;;;;;;;;;6845:81;-1:-1:-1;;;;;6936:26:26;;;;7096:32;7110:17;7096:13;:32::i;:::-;6771:364;;514:21606;;20136:266;-1:-1:-1;;;;;20249:25:26;;20245:77;;20297:14;;-1:-1:-1;;;20297:14:26;;;;;;;;;;;20245:77;20331:10;:24;;-1:-1:-1;;;;;;20331:24:26;;-1:-1:-1;;;;;20331:24:26;;;;;;;;;;;;;20370:25;;20384:10;;;640:51:30;;20370:25:26;;628:2:30;613:18;20370:25:26;;;;;;;20136:266;:::o;14:177:30:-;93:13;;-1:-1:-1;;;;;135:31:30;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;494:203::-;514:21606:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_allocateHouseEdge_4642":{"entryPoint":5322,"id":4642,"parameterSlots":2,"returnSlots":0},"@_callOptionalReturn_1510":{"entryPoint":5821,"id":1510,"parameterSlots":2,"returnSlots":0},"@_isGasToken_4101":{"entryPoint":null,"id":4101,"parameterSlots":1,"returnSlots":1},"@_revert_1888":{"entryPoint":null,"id":1888,"parameterSlots":2,"returnSlots":0},"@_safeTransfer_4085":{"entryPoint":5229,"id":4085,"parameterSlots":3,"returnSlots":0},"@accountFees_4670":{"entryPoint":3824,"id":4670,"parameterSlots":2,"returnSlots":0},"@addToken_4258":{"entryPoint":4098,"id":4258,"parameterSlots":1,"returnSlots":0},"@cashIn_4725":{"entryPoint":1740,"id":4725,"parameterSlots":2,"returnSlots":0},"@deposit_4139":{"entryPoint":1924,"id":4139,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_1713":{"entryPoint":null,"id":1713,"parameterSlots":4,"returnSlots":1},"@functionCall_1649":{"entryPoint":6034,"id":1649,"parameterSlots":3,"returnSlots":1},"@getBalance_5039":{"entryPoint":4924,"id":5039,"parameterSlots":1,"returnSlots":1},"@getDividends_4559":{"entryPoint":4363,"id":4559,"parameterSlots":0,"returnSlots":2},"@getMaxBetAmount_4863":{"entryPoint":1667,"id":4863,"parameterSlots":2,"returnSlots":1},"@getMinBetAmount_4840":{"entryPoint":4880,"id":4840,"parameterSlots":1,"returnSlots":1},"@getTokens_4815":{"entryPoint":2933,"id":4815,"parameterSlots":0,"returnSlots":1},"@harvestDividends_4475":{"entryPoint":2126,"id":4475,"parameterSlots":0,"returnSlots":2},"@isAllowedToken_4886":{"entryPoint":3886,"id":4886,"parameterSlots":1,"returnSlots":1},"@isContract_1577":{"entryPoint":null,"id":1577,"parameterSlots":1,"returnSlots":1},"@payout_4702":{"entryPoint":1574,"id":4702,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_1243":{"entryPoint":5666,"id":1243,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1216":{"entryPoint":5773,"id":1216,"parameterSlots":3,"returnSlots":0},"@setAllowedToken_4279":{"entryPoint":2562,"id":4279,"parameterSlots":2,"returnSlots":0},"@setBalanceRisk_4211":{"entryPoint":2025,"id":4211,"parameterSlots":2,"returnSlots":0},"@setHouseEdgeSplit_4353":{"entryPoint":2650,"id":4353,"parameterSlots":5,"returnSlots":0},"@setTeamWallet_4912":{"entryPoint":1439,"id":4912,"parameterSlots":1,"returnSlots":0},"@setTokenMinBetAmount_4374":{"entryPoint":1844,"id":4374,"parameterSlots":2,"returnSlots":0},"@teamWallet_3880":{"entryPoint":null,"id":3880,"parameterSlots":0,"returnSlots":0},"@tokens_3886":{"entryPoint":null,"id":3886,"parameterSlots":0,"returnSlots":0},"@treasury_3877":{"entryPoint":null,"id":3877,"parameterSlots":0,"returnSlots":0},"@verifyCallResultFromTarget_1844":{"entryPoint":6167,"id":1844,"parameterSlots":4,"returnSlots":1},"@withdrawHouseEdgeAmount_4982":{"entryPoint":1208,"id":4982,"parameterSlots":1,"returnSlots":0},"@withdraw_4190":{"entryPoint":4704,"id":4190,"parameterSlots":2,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":6500,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payablet_addresst_uint256t_uint256":{"entryPoint":6529,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6860,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint16":{"entryPoint":6661,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint16t_uint16t_uint16t_uint16":{"entryPoint":6917,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6599,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7990,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":7719,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":7918,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint8_fromMemory":{"entryPoint":7684,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint16":{"entryPoint":6643,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":7064,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_HouseEdgeSplit":{"entryPoint":7108,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8019,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6714,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7188,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_uint16_t_uint256_t_struct$_HouseEdgeSplit_$3847_memory_ptr__to_t_bool_t_bool_t_uint16_t_uint256_t_struct$_HouseEdgeSplit_$3847_memory_ptr__fromStack_reversed":{"entryPoint":7425,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint16_t_uint16__to_t_uint16_t_uint16_t_uint16_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_add_t_uint16":{"entryPoint":7646,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7966,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint8":{"entryPoint":7881,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":7536,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7505,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7943,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":7020,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint8":{"entryPoint":7614,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7483,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7592,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7570,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":6476,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":6846,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15025:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:30","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:30"},"nodeType":"YulFunctionCall","src":"125:12:30"},"nodeType":"YulExpressionStatement","src":"125:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:30"},"nodeType":"YulFunctionCall","src":"104:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:30"},"nodeType":"YulFunctionCall","src":"100:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:30"},"nodeType":"YulFunctionCall","src":"89:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:30"},"nodeType":"YulFunctionCall","src":"79:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:30"},"nodeType":"YulFunctionCall","src":"72:50:30"},"nodeType":"YulIf","src":"69:70:30"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:30","type":""}],"src":"14:131:30"},{"body":{"nodeType":"YulBlock","src":"220:177:30","statements":[{"body":{"nodeType":"YulBlock","src":"266:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"275:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"268:6:30"},"nodeType":"YulFunctionCall","src":"268:12:30"},"nodeType":"YulExpressionStatement","src":"268:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"241:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"250:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"237:3:30"},"nodeType":"YulFunctionCall","src":"237:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"262:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"233:3:30"},"nodeType":"YulFunctionCall","src":"233:32:30"},"nodeType":"YulIf","src":"230:52:30"},{"nodeType":"YulVariableDeclaration","src":"291:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"317:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"304:12:30"},"nodeType":"YulFunctionCall","src":"304:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"295:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"361:5:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"336:24:30"},"nodeType":"YulFunctionCall","src":"336:31:30"},"nodeType":"YulExpressionStatement","src":"336:31:30"},{"nodeType":"YulAssignment","src":"376:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"386:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"376:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"186:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"197:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"209:6:30","type":""}],"src":"150:247:30"},{"body":{"nodeType":"YulBlock","src":"531:404:30","statements":[{"body":{"nodeType":"YulBlock","src":"578:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"587:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"590:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"580:6:30"},"nodeType":"YulFunctionCall","src":"580:12:30"},"nodeType":"YulExpressionStatement","src":"580:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"552:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"561:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"548:3:30"},"nodeType":"YulFunctionCall","src":"548:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"573:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"544:3:30"},"nodeType":"YulFunctionCall","src":"544:33:30"},"nodeType":"YulIf","src":"541:53:30"},{"nodeType":"YulVariableDeclaration","src":"603:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"629:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:30"},"nodeType":"YulFunctionCall","src":"616:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"607:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"648:24:30"},"nodeType":"YulFunctionCall","src":"648:31:30"},"nodeType":"YulExpressionStatement","src":"648:31:30"},{"nodeType":"YulAssignment","src":"688:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"698:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"688:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"712:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"744:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"755:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"740:3:30"},"nodeType":"YulFunctionCall","src":"740:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"727:12:30"},"nodeType":"YulFunctionCall","src":"727:32:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"716:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"793:7:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"768:24:30"},"nodeType":"YulFunctionCall","src":"768:33:30"},"nodeType":"YulExpressionStatement","src":"768:33:30"},{"nodeType":"YulAssignment","src":"810:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"820:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"810:6:30"}]},{"nodeType":"YulAssignment","src":"836:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"863:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"874:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"859:3:30"},"nodeType":"YulFunctionCall","src":"859:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"846:12:30"},"nodeType":"YulFunctionCall","src":"846:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"836:6:30"}]},{"nodeType":"YulAssignment","src":"887:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"914:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"925:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"910:3:30"},"nodeType":"YulFunctionCall","src":"910:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"897:12:30"},"nodeType":"YulFunctionCall","src":"897:32:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"887:6:30"}]}]},"name":"abi_decode_tuple_t_address_payablet_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"473:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"484:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"496:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"504:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"512:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"520:6:30","type":""}],"src":"402:533:30"},{"body":{"nodeType":"YulBlock","src":"1027:228:30","statements":[{"body":{"nodeType":"YulBlock","src":"1073:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1082:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1085:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1075:6:30"},"nodeType":"YulFunctionCall","src":"1075:12:30"},"nodeType":"YulExpressionStatement","src":"1075:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1048:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1057:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1044:3:30"},"nodeType":"YulFunctionCall","src":"1044:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1069:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1040:3:30"},"nodeType":"YulFunctionCall","src":"1040:32:30"},"nodeType":"YulIf","src":"1037:52:30"},{"nodeType":"YulVariableDeclaration","src":"1098:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1124:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1111:12:30"},"nodeType":"YulFunctionCall","src":"1111:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1102:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1143:24:30"},"nodeType":"YulFunctionCall","src":"1143:31:30"},"nodeType":"YulExpressionStatement","src":"1143:31:30"},{"nodeType":"YulAssignment","src":"1183:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1193:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1183:6:30"}]},{"nodeType":"YulAssignment","src":"1207:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1234:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1245:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1230:3:30"},"nodeType":"YulFunctionCall","src":"1230:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1217:12:30"},"nodeType":"YulFunctionCall","src":"1217:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1207:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"985:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"996:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1008:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1016:6:30","type":""}],"src":"940:315:30"},{"body":{"nodeType":"YulBlock","src":"1361:76:30","statements":[{"nodeType":"YulAssignment","src":"1371:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1383:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1394:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1379:3:30"},"nodeType":"YulFunctionCall","src":"1379:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1371:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1413:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"1424:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1406:6:30"},"nodeType":"YulFunctionCall","src":"1406:25:30"},"nodeType":"YulExpressionStatement","src":"1406:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1330:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1341:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1352:4:30","type":""}],"src":"1260:177:30"},{"body":{"nodeType":"YulBlock","src":"1490:111:30","statements":[{"nodeType":"YulAssignment","src":"1500:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1522:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1509:12:30"},"nodeType":"YulFunctionCall","src":"1509:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1500:5:30"}]},{"body":{"nodeType":"YulBlock","src":"1579:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1588:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1591:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1581:6:30"},"nodeType":"YulFunctionCall","src":"1581:12:30"},"nodeType":"YulExpressionStatement","src":"1581:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1551:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1562:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"1569:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1558:3:30"},"nodeType":"YulFunctionCall","src":"1558:18:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1548:2:30"},"nodeType":"YulFunctionCall","src":"1548:29:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1541:6:30"},"nodeType":"YulFunctionCall","src":"1541:37:30"},"nodeType":"YulIf","src":"1538:57:30"}]},"name":"abi_decode_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1469:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1480:5:30","type":""}],"src":"1442:159:30"},{"body":{"nodeType":"YulBlock","src":"1692:233:30","statements":[{"body":{"nodeType":"YulBlock","src":"1738:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1747:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1750:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1740:6:30"},"nodeType":"YulFunctionCall","src":"1740:12:30"},"nodeType":"YulExpressionStatement","src":"1740:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1713:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1722:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:30"},"nodeType":"YulFunctionCall","src":"1709:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1734:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1705:3:30"},"nodeType":"YulFunctionCall","src":"1705:32:30"},"nodeType":"YulIf","src":"1702:52:30"},{"nodeType":"YulVariableDeclaration","src":"1763:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1789:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1776:12:30"},"nodeType":"YulFunctionCall","src":"1776:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1767:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1833:5:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1808:24:30"},"nodeType":"YulFunctionCall","src":"1808:31:30"},"nodeType":"YulExpressionStatement","src":"1808:31:30"},{"nodeType":"YulAssignment","src":"1848:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1858:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1848:6:30"}]},{"nodeType":"YulAssignment","src":"1872:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1904:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1915:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1900:3:30"},"nodeType":"YulFunctionCall","src":"1900:18:30"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"1882:17:30"},"nodeType":"YulFunctionCall","src":"1882:37:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1872:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1650:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1661:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1673:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1681:6:30","type":""}],"src":"1606:319:30"},{"body":{"nodeType":"YulBlock","src":"2031:102:30","statements":[{"nodeType":"YulAssignment","src":"2041:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2053:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2064:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2049:3:30"},"nodeType":"YulFunctionCall","src":"2049:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2041:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2083:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2098:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2114:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2119:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2110:3:30"},"nodeType":"YulFunctionCall","src":"2110:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"2123:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2106:3:30"},"nodeType":"YulFunctionCall","src":"2106:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2094:3:30"},"nodeType":"YulFunctionCall","src":"2094:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2076:6:30"},"nodeType":"YulFunctionCall","src":"2076:51:30"},"nodeType":"YulExpressionStatement","src":"2076:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2000:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2011:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2022:4:30","type":""}],"src":"1930:203:30"},{"body":{"nodeType":"YulBlock","src":"2367:949:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2377:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2395:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2406:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2391:3:30"},"nodeType":"YulFunctionCall","src":"2391:18:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2381:6:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2425:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2436:2:30","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2418:6:30"},"nodeType":"YulFunctionCall","src":"2418:21:30"},"nodeType":"YulExpressionStatement","src":"2418:21:30"},{"nodeType":"YulVariableDeclaration","src":"2448:17:30","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2459:6:30"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2452:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2474:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2494:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2488:5:30"},"nodeType":"YulFunctionCall","src":"2488:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2478:6:30","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2517:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"2525:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2510:6:30"},"nodeType":"YulFunctionCall","src":"2510:22:30"},"nodeType":"YulExpressionStatement","src":"2510:22:30"},{"nodeType":"YulAssignment","src":"2541:25:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2552:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2563:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2548:3:30"},"nodeType":"YulFunctionCall","src":"2548:18:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2541:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"2575:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2585:4:30","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2579:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2598:29:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2616:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2624:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2612:3:30"},"nodeType":"YulFunctionCall","src":"2612:15:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2602:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2636:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2645:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2640:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2704:146:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2725:3:30"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2740:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2734:5:30"},"nodeType":"YulFunctionCall","src":"2734:13:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2757:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2762:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2753:3:30"},"nodeType":"YulFunctionCall","src":"2753:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"2766:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2749:3:30"},"nodeType":"YulFunctionCall","src":"2749:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2730:3:30"},"nodeType":"YulFunctionCall","src":"2730:39:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2718:6:30"},"nodeType":"YulFunctionCall","src":"2718:52:30"},"nodeType":"YulExpressionStatement","src":"2718:52:30"},{"nodeType":"YulAssignment","src":"2783:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2794:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2799:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2790:3:30"},"nodeType":"YulFunctionCall","src":"2790:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2783:3:30"}]},{"nodeType":"YulAssignment","src":"2815:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2829:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2837:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2825:3:30"},"nodeType":"YulFunctionCall","src":"2825:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2815:6:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2666:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"2669:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2663:2:30"},"nodeType":"YulFunctionCall","src":"2663:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2677:18:30","statements":[{"nodeType":"YulAssignment","src":"2679:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2688:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"2691:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2684:3:30"},"nodeType":"YulFunctionCall","src":"2684:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2679:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"2659:3:30","statements":[]},"src":"2655:195:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2870:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2881:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2866:3:30"},"nodeType":"YulFunctionCall","src":"2866:18:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2890:3:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2895:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2886:3:30"},"nodeType":"YulFunctionCall","src":"2886:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2859:6:30"},"nodeType":"YulFunctionCall","src":"2859:47:30"},"nodeType":"YulExpressionStatement","src":"2859:47:30"},{"nodeType":"YulVariableDeclaration","src":"2915:16:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"2928:3:30"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"2919:5:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2940:29:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2962:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2956:5:30"},"nodeType":"YulFunctionCall","src":"2956:13:30"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"2944:8:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2985:3:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"2990:8:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2978:6:30"},"nodeType":"YulFunctionCall","src":"2978:21:30"},"nodeType":"YulExpressionStatement","src":"2978:21:30"},{"nodeType":"YulAssignment","src":"3008:21:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3021:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3026:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3017:3:30"},"nodeType":"YulFunctionCall","src":"3017:12:30"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"3008:5:30"}]},{"nodeType":"YulVariableDeclaration","src":"3038:31:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3058:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3066:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3054:3:30"},"nodeType":"YulFunctionCall","src":"3054:15:30"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"3042:8:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3078:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3089:1:30","type":"","value":"0"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"3082:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3156:132:30","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"3177:5:30"},{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"3190:8:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3184:5:30"},"nodeType":"YulFunctionCall","src":"3184:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3170:6:30"},"nodeType":"YulFunctionCall","src":"3170:30:30"},"nodeType":"YulExpressionStatement","src":"3170:30:30"},{"nodeType":"YulAssignment","src":"3213:23:30","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"3226:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3233:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3222:3:30"},"nodeType":"YulFunctionCall","src":"3222:14:30"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"3213:5:30"}]},{"nodeType":"YulAssignment","src":"3249:29:30","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"3265:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3275:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3261:3:30"},"nodeType":"YulFunctionCall","src":"3261:17:30"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"3249:8:30"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"3110:3:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"3115:8:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3107:2:30"},"nodeType":"YulFunctionCall","src":"3107:17:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3125:22:30","statements":[{"nodeType":"YulAssignment","src":"3127:18:30","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"3138:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"3143:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3134:3:30"},"nodeType":"YulFunctionCall","src":"3134:11:30"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"3127:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"3103:3:30","statements":[]},"src":"3099:189:30"},{"nodeType":"YulAssignment","src":"3297:13:30","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"3305:5:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3297:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2328:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2339:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2347:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2358:4:30","type":""}],"src":"2138:1178:30"},{"body":{"nodeType":"YulBlock","src":"3363:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"3417:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3426:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3429:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3419:6:30"},"nodeType":"YulFunctionCall","src":"3419:12:30"},"nodeType":"YulExpressionStatement","src":"3419:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3386:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3407:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3400:6:30"},"nodeType":"YulFunctionCall","src":"3400:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3393:6:30"},"nodeType":"YulFunctionCall","src":"3393:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3383:2:30"},"nodeType":"YulFunctionCall","src":"3383:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3376:6:30"},"nodeType":"YulFunctionCall","src":"3376:40:30"},"nodeType":"YulIf","src":"3373:60:30"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3352:5:30","type":""}],"src":"3321:118:30"},{"body":{"nodeType":"YulBlock","src":"3528:298:30","statements":[{"body":{"nodeType":"YulBlock","src":"3574:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3583:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3586:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3576:6:30"},"nodeType":"YulFunctionCall","src":"3576:12:30"},"nodeType":"YulExpressionStatement","src":"3576:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3549:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3558:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3545:3:30"},"nodeType":"YulFunctionCall","src":"3545:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3570:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3541:3:30"},"nodeType":"YulFunctionCall","src":"3541:32:30"},"nodeType":"YulIf","src":"3538:52:30"},{"nodeType":"YulVariableDeclaration","src":"3599:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3625:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3612:12:30"},"nodeType":"YulFunctionCall","src":"3612:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3603:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3644:24:30"},"nodeType":"YulFunctionCall","src":"3644:31:30"},"nodeType":"YulExpressionStatement","src":"3644:31:30"},{"nodeType":"YulAssignment","src":"3684:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3694:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3684:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"3708:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3740:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3751:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3736:3:30"},"nodeType":"YulFunctionCall","src":"3736:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3723:12:30"},"nodeType":"YulFunctionCall","src":"3723:32:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3712:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3786:7:30"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"3764:21:30"},"nodeType":"YulFunctionCall","src":"3764:30:30"},"nodeType":"YulExpressionStatement","src":"3764:30:30"},{"nodeType":"YulAssignment","src":"3803:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3813:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3803:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3486:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3497:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3509:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3517:6:30","type":""}],"src":"3444:382:30"},{"body":{"nodeType":"YulBlock","src":"3965:403:30","statements":[{"body":{"nodeType":"YulBlock","src":"4012:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4024:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4014:6:30"},"nodeType":"YulFunctionCall","src":"4014:12:30"},"nodeType":"YulExpressionStatement","src":"4014:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3986:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3995:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3982:3:30"},"nodeType":"YulFunctionCall","src":"3982:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4007:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3978:3:30"},"nodeType":"YulFunctionCall","src":"3978:33:30"},"nodeType":"YulIf","src":"3975:53:30"},{"nodeType":"YulVariableDeclaration","src":"4037:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4063:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4050:12:30"},"nodeType":"YulFunctionCall","src":"4050:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4041:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4107:5:30"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4082:24:30"},"nodeType":"YulFunctionCall","src":"4082:31:30"},"nodeType":"YulExpressionStatement","src":"4082:31:30"},{"nodeType":"YulAssignment","src":"4122:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"4132:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4122:6:30"}]},{"nodeType":"YulAssignment","src":"4146:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4178:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4189:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4174:3:30"},"nodeType":"YulFunctionCall","src":"4174:18:30"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"4156:17:30"},"nodeType":"YulFunctionCall","src":"4156:37:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4146:6:30"}]},{"nodeType":"YulAssignment","src":"4202:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4234:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4245:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4230:3:30"},"nodeType":"YulFunctionCall","src":"4230:18:30"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"4212:17:30"},"nodeType":"YulFunctionCall","src":"4212:37:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4202:6:30"}]},{"nodeType":"YulAssignment","src":"4258:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4290:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4301:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:30"},"nodeType":"YulFunctionCall","src":"4286:18:30"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"4268:17:30"},"nodeType":"YulFunctionCall","src":"4268:37:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4258:6:30"}]},{"nodeType":"YulAssignment","src":"4314:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4346:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4357:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4342:3:30"},"nodeType":"YulFunctionCall","src":"4342:19:30"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"4324:17:30"},"nodeType":"YulFunctionCall","src":"4324:38:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4314:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint16t_uint16t_uint16t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3899:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3910:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3922:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3930:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3938:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3946:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3954:6:30","type":""}],"src":"3831:537:30"},{"body":{"nodeType":"YulBlock","src":"4426:205:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4436:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4445:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4440:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4505:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4530:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"4535:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4526:3:30"},"nodeType":"YulFunctionCall","src":"4526:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4549:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"4554:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4545:3:30"},"nodeType":"YulFunctionCall","src":"4545:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4539:5:30"},"nodeType":"YulFunctionCall","src":"4539:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4519:6:30"},"nodeType":"YulFunctionCall","src":"4519:39:30"},"nodeType":"YulExpressionStatement","src":"4519:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4466:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"4469:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4463:2:30"},"nodeType":"YulFunctionCall","src":"4463:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4477:19:30","statements":[{"nodeType":"YulAssignment","src":"4479:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4488:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"4491:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4484:3:30"},"nodeType":"YulFunctionCall","src":"4484:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4479:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"4459:3:30","statements":[]},"src":"4455:113:30"},{"body":{"nodeType":"YulBlock","src":"4594:31:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4607:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"4612:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4603:3:30"},"nodeType":"YulFunctionCall","src":"4603:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"4621:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4596:6:30"},"nodeType":"YulFunctionCall","src":"4596:27:30"},"nodeType":"YulExpressionStatement","src":"4596:27:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4583:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"4586:6:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4580:2:30"},"nodeType":"YulFunctionCall","src":"4580:13:30"},"nodeType":"YulIf","src":"4577:48:30"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4404:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4409:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"4414:6:30","type":""}],"src":"4373:258:30"},{"body":{"nodeType":"YulBlock","src":"4686:208:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4696:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4716:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4710:5:30"},"nodeType":"YulFunctionCall","src":"4710:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4700:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4738:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"4743:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4731:6:30"},"nodeType":"YulFunctionCall","src":"4731:19:30"},"nodeType":"YulExpressionStatement","src":"4731:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4785:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4792:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4781:3:30"},"nodeType":"YulFunctionCall","src":"4781:16:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4803:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4808:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4799:3:30"},"nodeType":"YulFunctionCall","src":"4799:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"4815:6:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4759:21:30"},"nodeType":"YulFunctionCall","src":"4759:63:30"},"nodeType":"YulExpressionStatement","src":"4759:63:30"},{"nodeType":"YulAssignment","src":"4831:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4846:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4859:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"4867:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4855:3:30"},"nodeType":"YulFunctionCall","src":"4855:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4876:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4872:3:30"},"nodeType":"YulFunctionCall","src":"4872:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4851:3:30"},"nodeType":"YulFunctionCall","src":"4851:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4842:3:30"},"nodeType":"YulFunctionCall","src":"4842:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"4883:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4838:3:30"},"nodeType":"YulFunctionCall","src":"4838:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4831:3:30"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4663:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4670:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4678:3:30","type":""}],"src":"4636:258:30"},{"body":{"nodeType":"YulBlock","src":"4957:438:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4967:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4977:6:30","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4971:2:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4999:3:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5014:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5008:5:30"},"nodeType":"YulFunctionCall","src":"5008:12:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5022:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5004:3:30"},"nodeType":"YulFunctionCall","src":"5004:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4992:6:30"},"nodeType":"YulFunctionCall","src":"4992:34:30"},"nodeType":"YulExpressionStatement","src":"4992:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5046:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5051:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5042:3:30"},"nodeType":"YulFunctionCall","src":"5042:14:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5072:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5079:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5068:3:30"},"nodeType":"YulFunctionCall","src":"5068:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5062:5:30"},"nodeType":"YulFunctionCall","src":"5062:23:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5087:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5058:3:30"},"nodeType":"YulFunctionCall","src":"5058:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5035:6:30"},"nodeType":"YulFunctionCall","src":"5035:56:30"},"nodeType":"YulExpressionStatement","src":"5035:56:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5111:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5116:4:30","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5107:3:30"},"nodeType":"YulFunctionCall","src":"5107:14:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5137:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5144:4:30","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:30"},"nodeType":"YulFunctionCall","src":"5133:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5127:5:30"},"nodeType":"YulFunctionCall","src":"5127:23:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5152:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5123:3:30"},"nodeType":"YulFunctionCall","src":"5123:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5100:6:30"},"nodeType":"YulFunctionCall","src":"5100:56:30"},"nodeType":"YulExpressionStatement","src":"5100:56:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5176:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5181:4:30","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:30"},"nodeType":"YulFunctionCall","src":"5172:14:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5202:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5209:4:30","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5198:3:30"},"nodeType":"YulFunctionCall","src":"5198:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5192:5:30"},"nodeType":"YulFunctionCall","src":"5192:23:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5217:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5188:3:30"},"nodeType":"YulFunctionCall","src":"5188:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5165:6:30"},"nodeType":"YulFunctionCall","src":"5165:56:30"},"nodeType":"YulExpressionStatement","src":"5165:56:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5241:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5246:4:30","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5237:3:30"},"nodeType":"YulFunctionCall","src":"5237:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5263:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5270:4:30","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5259:3:30"},"nodeType":"YulFunctionCall","src":"5259:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5253:5:30"},"nodeType":"YulFunctionCall","src":"5253:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5230:6:30"},"nodeType":"YulFunctionCall","src":"5230:47:30"},"nodeType":"YulExpressionStatement","src":"5230:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5297:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5302:4:30","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5293:3:30"},"nodeType":"YulFunctionCall","src":"5293:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5319:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5326:4:30","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5315:3:30"},"nodeType":"YulFunctionCall","src":"5315:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5309:5:30"},"nodeType":"YulFunctionCall","src":"5309:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5286:6:30"},"nodeType":"YulFunctionCall","src":"5286:47:30"},"nodeType":"YulExpressionStatement","src":"5286:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5353:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5358:4:30","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5349:3:30"},"nodeType":"YulFunctionCall","src":"5349:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5375:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5382:4:30","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5371:3:30"},"nodeType":"YulFunctionCall","src":"5371:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5365:5:30"},"nodeType":"YulFunctionCall","src":"5365:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5342:6:30"},"nodeType":"YulFunctionCall","src":"5342:47:30"},"nodeType":"YulExpressionStatement","src":"5342:47:30"}]},"name":"abi_encode_struct_HouseEdgeSplit","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4941:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4948:3:30","type":""}],"src":"4899:496:30"},{"body":{"nodeType":"YulBlock","src":"5613:1721:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5623:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5633:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5627:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5644:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5662:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5673:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5658:3:30"},"nodeType":"YulFunctionCall","src":"5658:18:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5648:6:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5692:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5703:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5685:6:30"},"nodeType":"YulFunctionCall","src":"5685:21:30"},"nodeType":"YulExpressionStatement","src":"5685:21:30"},{"nodeType":"YulVariableDeclaration","src":"5715:17:30","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"5726:6:30"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"5719:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5741:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5761:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5755:5:30"},"nodeType":"YulFunctionCall","src":"5755:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5745:6:30","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5784:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"5792:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5777:6:30"},"nodeType":"YulFunctionCall","src":"5777:22:30"},"nodeType":"YulExpressionStatement","src":"5777:22:30"},{"nodeType":"YulVariableDeclaration","src":"5808:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5818:2:30","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5812:2:30","type":""}]},{"nodeType":"YulAssignment","src":"5829:25:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5840:9:30"},{"name":"_2","nodeType":"YulIdentifier","src":"5851:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5836:3:30"},"nodeType":"YulFunctionCall","src":"5836:18:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5829:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"5863:53:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5885:9:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5900:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"5903:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5896:3:30"},"nodeType":"YulFunctionCall","src":"5896:14:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5881:3:30"},"nodeType":"YulFunctionCall","src":"5881:30:30"},{"name":"_2","nodeType":"YulIdentifier","src":"5913:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5877:3:30"},"nodeType":"YulFunctionCall","src":"5877:39:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"5867:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5925:29:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5943:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5951:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5939:3:30"},"nodeType":"YulFunctionCall","src":"5939:15:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5929:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5963:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5972:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5967:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6031:1274:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6052:3:30"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6065:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6073:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6061:3:30"},"nodeType":"YulFunctionCall","src":"6061:22:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6089:2:30","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6085:3:30"},"nodeType":"YulFunctionCall","src":"6085:7:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6057:3:30"},"nodeType":"YulFunctionCall","src":"6057:36:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6045:6:30"},"nodeType":"YulFunctionCall","src":"6045:49:30"},"nodeType":"YulExpressionStatement","src":"6045:49:30"},{"nodeType":"YulVariableDeclaration","src":"6107:23:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6123:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6117:5:30"},"nodeType":"YulFunctionCall","src":"6117:13:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6111:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6143:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6153:6:30","type":"","value":"0x01e0"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"6147:2:30","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6179:6:30"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6197:2:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6191:5:30"},"nodeType":"YulFunctionCall","src":"6191:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6202:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6187:3:30"},"nodeType":"YulFunctionCall","src":"6187:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6172:6:30"},"nodeType":"YulFunctionCall","src":"6172:36:30"},"nodeType":"YulExpressionStatement","src":"6172:36:30"},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6232:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6240:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6228:3:30"},"nodeType":"YulFunctionCall","src":"6228:15:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6259:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6263:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6255:3:30"},"nodeType":"YulFunctionCall","src":"6255:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6249:5:30"},"nodeType":"YulFunctionCall","src":"6249:18:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6277:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6282:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6273:3:30"},"nodeType":"YulFunctionCall","src":"6273:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"6286:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6269:3:30"},"nodeType":"YulFunctionCall","src":"6269:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6245:3:30"},"nodeType":"YulFunctionCall","src":"6245:44:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6221:6:30"},"nodeType":"YulFunctionCall","src":"6221:69:30"},"nodeType":"YulExpressionStatement","src":"6221:69:30"},{"nodeType":"YulVariableDeclaration","src":"6303:38:30","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6333:2:30"},{"name":"_2","nodeType":"YulIdentifier","src":"6337:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6329:3:30"},"nodeType":"YulFunctionCall","src":"6329:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6323:5:30"},"nodeType":"YulFunctionCall","src":"6323:18:30"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6307:12:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6365:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"6373:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6361:3:30"},"nodeType":"YulFunctionCall","src":"6361:15:30"},{"name":"_4","nodeType":"YulIdentifier","src":"6378:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6354:6:30"},"nodeType":"YulFunctionCall","src":"6354:27:30"},"nodeType":"YulExpressionStatement","src":"6354:27:30"},{"nodeType":"YulVariableDeclaration","src":"6394:62:30","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6426:12:30"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6444:6:30"},{"name":"_4","nodeType":"YulIdentifier","src":"6452:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6440:3:30"},"nodeType":"YulFunctionCall","src":"6440:15:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"6408:17:30"},"nodeType":"YulFunctionCall","src":"6408:48:30"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"6398:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6469:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6479:4:30","type":"","value":"0x60"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"6473:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6496:40:30","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6528:2:30"},{"name":"_5","nodeType":"YulIdentifier","src":"6532:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6524:3:30"},"nodeType":"YulFunctionCall","src":"6524:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6518:5:30"},"nodeType":"YulFunctionCall","src":"6518:18:30"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"6500:14:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6560:6:30"},{"name":"_5","nodeType":"YulIdentifier","src":"6568:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6556:3:30"},"nodeType":"YulFunctionCall","src":"6556:15:30"},{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"6577:6:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"6585:6:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6573:3:30"},"nodeType":"YulFunctionCall","src":"6573:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6549:6:30"},"nodeType":"YulFunctionCall","src":"6549:44:30"},"nodeType":"YulExpressionStatement","src":"6549:44:30"},{"nodeType":"YulVariableDeclaration","src":"6606:55:30","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"6638:14:30"},{"name":"tail_3","nodeType":"YulIdentifier","src":"6654:6:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"6620:17:30"},"nodeType":"YulFunctionCall","src":"6620:41:30"},"variables":[{"name":"tail_4","nodeType":"YulTypedName","src":"6610:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6674:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6684:4:30","type":"","value":"0x80"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"6678:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6701:40:30","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6733:2:30"},{"name":"_6","nodeType":"YulIdentifier","src":"6737:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6729:3:30"},"nodeType":"YulFunctionCall","src":"6729:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6723:5:30"},"nodeType":"YulFunctionCall","src":"6723:18:30"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"6705:14:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6765:6:30"},{"name":"_6","nodeType":"YulIdentifier","src":"6773:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6761:3:30"},"nodeType":"YulFunctionCall","src":"6761:15:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"6798:14:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6792:5:30"},"nodeType":"YulFunctionCall","src":"6792:21:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6785:6:30"},"nodeType":"YulFunctionCall","src":"6785:29:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6778:6:30"},"nodeType":"YulFunctionCall","src":"6778:37:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6754:6:30"},"nodeType":"YulFunctionCall","src":"6754:62:30"},"nodeType":"YulExpressionStatement","src":"6754:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6840:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6848:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6836:3:30"},"nodeType":"YulFunctionCall","src":"6836:16:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"6878:14:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6894:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6874:3:30"},"nodeType":"YulFunctionCall","src":"6874:23:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6868:5:30"},"nodeType":"YulFunctionCall","src":"6868:30:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6861:6:30"},"nodeType":"YulFunctionCall","src":"6861:38:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6854:6:30"},"nodeType":"YulFunctionCall","src":"6854:46:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6829:6:30"},"nodeType":"YulFunctionCall","src":"6829:72:30"},"nodeType":"YulExpressionStatement","src":"6829:72:30"},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6925:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6933:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6921:3:30"},"nodeType":"YulFunctionCall","src":"6921:16:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"6953:14:30"},{"name":"_2","nodeType":"YulIdentifier","src":"6969:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6949:3:30"},"nodeType":"YulFunctionCall","src":"6949:23:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6943:5:30"},"nodeType":"YulFunctionCall","src":"6943:30:30"},{"kind":"number","nodeType":"YulLiteral","src":"6975:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6939:3:30"},"nodeType":"YulFunctionCall","src":"6939:43:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6914:6:30"},"nodeType":"YulFunctionCall","src":"6914:69:30"},"nodeType":"YulExpressionStatement","src":"6914:69:30"},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7007:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7015:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7003:3:30"},"nodeType":"YulFunctionCall","src":"7003:16:30"},{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"7031:14:30"},{"name":"_5","nodeType":"YulIdentifier","src":"7047:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7027:3:30"},"nodeType":"YulFunctionCall","src":"7027:23:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7021:5:30"},"nodeType":"YulFunctionCall","src":"7021:30:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6996:6:30"},"nodeType":"YulFunctionCall","src":"6996:56:30"},"nodeType":"YulExpressionStatement","src":"6996:56:30"},{"nodeType":"YulVariableDeclaration","src":"7065:52:30","value":{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"7097:14:30"},{"name":"_6","nodeType":"YulIdentifier","src":"7113:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7093:3:30"},"nodeType":"YulFunctionCall","src":"7093:23:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7087:5:30"},"nodeType":"YulFunctionCall","src":"7087:30:30"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"7069:14:30","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"7163:14:30"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7183:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7191:3:30","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7179:3:30"},"nodeType":"YulFunctionCall","src":"7179:16:30"}],"functionName":{"name":"abi_encode_struct_HouseEdgeSplit","nodeType":"YulIdentifier","src":"7130:32:30"},"nodeType":"YulFunctionCall","src":"7130:66:30"},"nodeType":"YulExpressionStatement","src":"7130:66:30"},{"nodeType":"YulAssignment","src":"7209:16:30","value":{"name":"tail_4","nodeType":"YulIdentifier","src":"7219:6:30"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7209:6:30"}]},{"nodeType":"YulAssignment","src":"7238:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7252:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7260:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7248:3:30"},"nodeType":"YulFunctionCall","src":"7248:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7238:6:30"}]},{"nodeType":"YulAssignment","src":"7276:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7287:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7292:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7283:3:30"},"nodeType":"YulFunctionCall","src":"7283:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7276:3:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5993:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"5996:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5990:2:30"},"nodeType":"YulFunctionCall","src":"5990:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6004:18:30","statements":[{"nodeType":"YulAssignment","src":"6006:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6015:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"6018:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6011:3:30"},"nodeType":"YulFunctionCall","src":"6011:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6006:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"5986:3:30","statements":[]},"src":"5982:1323:30"},{"nodeType":"YulAssignment","src":"7314:14:30","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"7322:6:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7314:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5582:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5593:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5604:4:30","type":""}],"src":"5400:1934:30"},{"body":{"nodeType":"YulBlock","src":"7434:92:30","statements":[{"nodeType":"YulAssignment","src":"7444:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7456:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7467:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7452:3:30"},"nodeType":"YulFunctionCall","src":"7452:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7444:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7486:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7511:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7504:6:30"},"nodeType":"YulFunctionCall","src":"7504:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7497:6:30"},"nodeType":"YulFunctionCall","src":"7497:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7479:6:30"},"nodeType":"YulFunctionCall","src":"7479:41:30"},"nodeType":"YulExpressionStatement","src":"7479:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7403:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7414:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7425:4:30","type":""}],"src":"7339:187:30"},{"body":{"nodeType":"YulBlock","src":"7794:321:30","statements":[{"nodeType":"YulAssignment","src":"7804:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7816:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7827:3:30","type":"","value":"352"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7812:3:30"},"nodeType":"YulFunctionCall","src":"7812:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7804:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7847:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7872:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7865:6:30"},"nodeType":"YulFunctionCall","src":"7865:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7858:6:30"},"nodeType":"YulFunctionCall","src":"7858:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7840:6:30"},"nodeType":"YulFunctionCall","src":"7840:41:30"},"nodeType":"YulExpressionStatement","src":"7840:41:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7901:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7912:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:30"},"nodeType":"YulFunctionCall","src":"7897:18:30"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7931:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7924:6:30"},"nodeType":"YulFunctionCall","src":"7924:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7917:6:30"},"nodeType":"YulFunctionCall","src":"7917:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7890:6:30"},"nodeType":"YulFunctionCall","src":"7890:50:30"},"nodeType":"YulExpressionStatement","src":"7890:50:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7960:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7971:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7956:3:30"},"nodeType":"YulFunctionCall","src":"7956:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7980:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7988:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7976:3:30"},"nodeType":"YulFunctionCall","src":"7976:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7949:6:30"},"nodeType":"YulFunctionCall","src":"7949:47:30"},"nodeType":"YulExpressionStatement","src":"7949:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8016:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8027:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8012:3:30"},"nodeType":"YulFunctionCall","src":"8012:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"8032:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8005:6:30"},"nodeType":"YulFunctionCall","src":"8005:34:30"},"nodeType":"YulExpressionStatement","src":"8005:34:30"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8081:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8093:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8104:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8089:3:30"},"nodeType":"YulFunctionCall","src":"8089:19:30"}],"functionName":{"name":"abi_encode_struct_HouseEdgeSplit","nodeType":"YulIdentifier","src":"8048:32:30"},"nodeType":"YulFunctionCall","src":"8048:61:30"},"nodeType":"YulExpressionStatement","src":"8048:61:30"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_uint16_t_uint256_t_struct$_HouseEdgeSplit_$3847_memory_ptr__to_t_bool_t_bool_t_uint16_t_uint256_t_struct$_HouseEdgeSplit_$3847_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7731:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7742:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7750:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7758:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7766:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7774:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7785:4:30","type":""}],"src":"7531:584:30"},{"body":{"nodeType":"YulBlock","src":"8249:119:30","statements":[{"nodeType":"YulAssignment","src":"8259:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8271:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8282:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8267:3:30"},"nodeType":"YulFunctionCall","src":"8267:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8259:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8301:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"8312:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8294:6:30"},"nodeType":"YulFunctionCall","src":"8294:25:30"},"nodeType":"YulExpressionStatement","src":"8294:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8339:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8350:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8335:3:30"},"nodeType":"YulFunctionCall","src":"8335:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"8355:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8328:6:30"},"nodeType":"YulFunctionCall","src":"8328:34:30"},"nodeType":"YulExpressionStatement","src":"8328:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8210:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8221:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8229:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8240:4:30","type":""}],"src":"8120:248:30"},{"body":{"nodeType":"YulBlock","src":"8405:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8422:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8429:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8434:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8425:3:30"},"nodeType":"YulFunctionCall","src":"8425:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8415:6:30"},"nodeType":"YulFunctionCall","src":"8415:31:30"},"nodeType":"YulExpressionStatement","src":"8415:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8462:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8465:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8455:6:30"},"nodeType":"YulFunctionCall","src":"8455:15:30"},"nodeType":"YulExpressionStatement","src":"8455:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8486:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8489:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8479:6:30"},"nodeType":"YulFunctionCall","src":"8479:15:30"},"nodeType":"YulExpressionStatement","src":"8479:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8373:127:30"},{"body":{"nodeType":"YulBlock","src":"8557:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"8616:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8618:16:30"},"nodeType":"YulFunctionCall","src":"8618:18:30"},"nodeType":"YulExpressionStatement","src":"8618:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8588:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8581:6:30"},"nodeType":"YulFunctionCall","src":"8581:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8574:6:30"},"nodeType":"YulFunctionCall","src":"8574:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8596:1:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8607:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8603:3:30"},"nodeType":"YulFunctionCall","src":"8603:6:30"},{"name":"x","nodeType":"YulIdentifier","src":"8611:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8599:3:30"},"nodeType":"YulFunctionCall","src":"8599:14:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8593:2:30"},"nodeType":"YulFunctionCall","src":"8593:21:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8570:3:30"},"nodeType":"YulFunctionCall","src":"8570:45:30"},"nodeType":"YulIf","src":"8567:71:30"},{"nodeType":"YulAssignment","src":"8647:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8662:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"8665:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8658:3:30"},"nodeType":"YulFunctionCall","src":"8658:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"8647:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8536:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"8539:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"8545:7:30","type":""}],"src":"8505:168:30"},{"body":{"nodeType":"YulBlock","src":"8724:171:30","statements":[{"body":{"nodeType":"YulBlock","src":"8755:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8776:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8783:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8788:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8779:3:30"},"nodeType":"YulFunctionCall","src":"8779:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8769:6:30"},"nodeType":"YulFunctionCall","src":"8769:31:30"},"nodeType":"YulExpressionStatement","src":"8769:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8820:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8823:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8813:6:30"},"nodeType":"YulFunctionCall","src":"8813:15:30"},"nodeType":"YulExpressionStatement","src":"8813:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8848:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8851:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8841:6:30"},"nodeType":"YulFunctionCall","src":"8841:15:30"},"nodeType":"YulExpressionStatement","src":"8841:15:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8744:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8737:6:30"},"nodeType":"YulFunctionCall","src":"8737:9:30"},"nodeType":"YulIf","src":"8734:132:30"},{"nodeType":"YulAssignment","src":"8875:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8884:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"8887:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8880:3:30"},"nodeType":"YulFunctionCall","src":"8880:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8875:1:30"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8709:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"8712:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"8718:1:30","type":""}],"src":"8678:217:30"},{"body":{"nodeType":"YulBlock","src":"8999:89:30","statements":[{"nodeType":"YulAssignment","src":"9009:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9021:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9032:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9017:3:30"},"nodeType":"YulFunctionCall","src":"9017:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9009:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9051:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9066:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9074:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9062:3:30"},"nodeType":"YulFunctionCall","src":"9062:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9044:6:30"},"nodeType":"YulFunctionCall","src":"9044:38:30"},"nodeType":"YulExpressionStatement","src":"9044:38:30"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8968:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8979:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8990:4:30","type":""}],"src":"8900:188:30"},{"body":{"nodeType":"YulBlock","src":"9125:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9142:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9149:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9154:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9145:3:30"},"nodeType":"YulFunctionCall","src":"9145:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9135:6:30"},"nodeType":"YulFunctionCall","src":"9135:31:30"},"nodeType":"YulExpressionStatement","src":"9135:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9182:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9185:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9175:6:30"},"nodeType":"YulFunctionCall","src":"9175:15:30"},"nodeType":"YulExpressionStatement","src":"9175:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9206:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9209:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9199:6:30"},"nodeType":"YulFunctionCall","src":"9199:15:30"},"nodeType":"YulExpressionStatement","src":"9199:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"9093:127:30"},{"body":{"nodeType":"YulBlock","src":"9257:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9274:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9281:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9286:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9277:3:30"},"nodeType":"YulFunctionCall","src":"9277:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9267:6:30"},"nodeType":"YulFunctionCall","src":"9267:31:30"},"nodeType":"YulExpressionStatement","src":"9267:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9314:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9317:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9307:6:30"},"nodeType":"YulFunctionCall","src":"9307:15:30"},"nodeType":"YulExpressionStatement","src":"9307:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9338:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9341:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9331:6:30"},"nodeType":"YulFunctionCall","src":"9331:15:30"},"nodeType":"YulExpressionStatement","src":"9331:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9225:127:30"},{"body":{"nodeType":"YulBlock","src":"9402:130:30","statements":[{"nodeType":"YulVariableDeclaration","src":"9412:31:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9431:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"9438:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9427:3:30"},"nodeType":"YulFunctionCall","src":"9427:16:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"9416:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9473:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9475:16:30"},"nodeType":"YulFunctionCall","src":"9475:18:30"},"nodeType":"YulExpressionStatement","src":"9475:18:30"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9458:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"9467:4:30","type":"","value":"0xff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9455:2:30"},"nodeType":"YulFunctionCall","src":"9455:17:30"},"nodeType":"YulIf","src":"9452:43:30"},{"nodeType":"YulAssignment","src":"9504:22:30","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9515:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"9524:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:30"},"nodeType":"YulFunctionCall","src":"9511:15:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9504:3:30"}]}]},"name":"increment_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9384:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9394:3:30","type":""}],"src":"9357:175:30"},{"body":{"nodeType":"YulBlock","src":"9584:177:30","statements":[{"nodeType":"YulVariableDeclaration","src":"9594:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"9604:6:30","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9598:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9619:21:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9634:1:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9637:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9630:3:30"},"nodeType":"YulFunctionCall","src":"9630:10:30"},"variables":[{"name":"x_1","nodeType":"YulTypedName","src":"9623:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9649:21:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9664:1:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9667:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9660:3:30"},"nodeType":"YulFunctionCall","src":"9660:10:30"},"variables":[{"name":"y_1","nodeType":"YulTypedName","src":"9653:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9704:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9706:16:30"},"nodeType":"YulFunctionCall","src":"9706:18:30"},"nodeType":"YulExpressionStatement","src":"9706:18:30"}]},"condition":{"arguments":[{"name":"x_1","nodeType":"YulIdentifier","src":"9685:3:30"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9694:2:30"},{"name":"y_1","nodeType":"YulIdentifier","src":"9698:3:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9690:3:30"},"nodeType":"YulFunctionCall","src":"9690:12:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9682:2:30"},"nodeType":"YulFunctionCall","src":"9682:21:30"},"nodeType":"YulIf","src":"9679:47:30"},{"nodeType":"YulAssignment","src":"9735:20:30","value":{"arguments":[{"name":"x_1","nodeType":"YulIdentifier","src":"9746:3:30"},{"name":"y_1","nodeType":"YulIdentifier","src":"9751:3:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9742:3:30"},"nodeType":"YulFunctionCall","src":"9742:13:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9735:3:30"}]}]},"name":"checked_add_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9567:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"9570:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9576:3:30","type":""}],"src":"9537:224:30"},{"body":{"nodeType":"YulBlock","src":"9943:267:30","statements":[{"nodeType":"YulAssignment","src":"9953:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9965:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9976:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9961:3:30"},"nodeType":"YulFunctionCall","src":"9961:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9953:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"9989:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"9999:6:30","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9993:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10021:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10036:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10044:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10032:3:30"},"nodeType":"YulFunctionCall","src":"10032:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10014:6:30"},"nodeType":"YulFunctionCall","src":"10014:34:30"},"nodeType":"YulExpressionStatement","src":"10014:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10068:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10079:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10064:3:30"},"nodeType":"YulFunctionCall","src":"10064:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10088:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10096:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10084:3:30"},"nodeType":"YulFunctionCall","src":"10084:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10057:6:30"},"nodeType":"YulFunctionCall","src":"10057:43:30"},"nodeType":"YulExpressionStatement","src":"10057:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10120:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10131:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10116:3:30"},"nodeType":"YulFunctionCall","src":"10116:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10140:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10148:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10136:3:30"},"nodeType":"YulFunctionCall","src":"10136:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10109:6:30"},"nodeType":"YulFunctionCall","src":"10109:43:30"},"nodeType":"YulExpressionStatement","src":"10109:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10172:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10183:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10168:3:30"},"nodeType":"YulFunctionCall","src":"10168:18:30"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10192:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10200:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10188:3:30"},"nodeType":"YulFunctionCall","src":"10188:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10161:6:30"},"nodeType":"YulFunctionCall","src":"10161:43:30"},"nodeType":"YulExpressionStatement","src":"10161:43:30"}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint16_t_uint16__to_t_uint16_t_uint16_t_uint16_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9888:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9899:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9907:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9915:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9923:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9934:4:30","type":""}],"src":"9766:444:30"},{"body":{"nodeType":"YulBlock","src":"10294:194:30","statements":[{"body":{"nodeType":"YulBlock","src":"10340:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10349:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10352:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10342:6:30"},"nodeType":"YulFunctionCall","src":"10342:12:30"},"nodeType":"YulExpressionStatement","src":"10342:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10315:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10324:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10311:3:30"},"nodeType":"YulFunctionCall","src":"10311:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"10336:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10307:3:30"},"nodeType":"YulFunctionCall","src":"10307:32:30"},"nodeType":"YulIf","src":"10304:52:30"},{"nodeType":"YulVariableDeclaration","src":"10365:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10384:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10378:5:30"},"nodeType":"YulFunctionCall","src":"10378:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10369:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10442:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10451:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10454:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10444:6:30"},"nodeType":"YulFunctionCall","src":"10444:12:30"},"nodeType":"YulExpressionStatement","src":"10444:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10416:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10427:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"10434:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10423:3:30"},"nodeType":"YulFunctionCall","src":"10423:16:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10413:2:30"},"nodeType":"YulFunctionCall","src":"10413:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10406:6:30"},"nodeType":"YulFunctionCall","src":"10406:35:30"},"nodeType":"YulIf","src":"10403:55:30"},{"nodeType":"YulAssignment","src":"10467:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"10477:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10467:6:30"}]}]},"name":"abi_decode_tuple_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10260:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10271:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10283:6:30","type":""}],"src":"10215:273:30"},{"body":{"nodeType":"YulBlock","src":"10584:793:30","statements":[{"body":{"nodeType":"YulBlock","src":"10630:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10639:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10642:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10632:6:30"},"nodeType":"YulFunctionCall","src":"10632:12:30"},"nodeType":"YulExpressionStatement","src":"10632:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10605:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10614:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10601:3:30"},"nodeType":"YulFunctionCall","src":"10601:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"10626:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10597:3:30"},"nodeType":"YulFunctionCall","src":"10597:32:30"},"nodeType":"YulIf","src":"10594:52:30"},{"nodeType":"YulVariableDeclaration","src":"10655:30:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10675:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10669:5:30"},"nodeType":"YulFunctionCall","src":"10669:16:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10659:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10694:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10704:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10698:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10749:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10758:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10761:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10751:6:30"},"nodeType":"YulFunctionCall","src":"10751:12:30"},"nodeType":"YulExpressionStatement","src":"10751:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10737:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10745:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10734:2:30"},"nodeType":"YulFunctionCall","src":"10734:14:30"},"nodeType":"YulIf","src":"10731:34:30"},{"nodeType":"YulVariableDeclaration","src":"10774:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10788:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"10799:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10784:3:30"},"nodeType":"YulFunctionCall","src":"10784:22:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10778:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10854:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10863:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10866:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10856:6:30"},"nodeType":"YulFunctionCall","src":"10856:12:30"},"nodeType":"YulExpressionStatement","src":"10856:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10833:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"10837:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10829:3:30"},"nodeType":"YulFunctionCall","src":"10829:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10844:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10825:3:30"},"nodeType":"YulFunctionCall","src":"10825:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10818:6:30"},"nodeType":"YulFunctionCall","src":"10818:35:30"},"nodeType":"YulIf","src":"10815:55:30"},{"nodeType":"YulVariableDeclaration","src":"10879:19:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10895:2:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10889:5:30"},"nodeType":"YulFunctionCall","src":"10889:9:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"10883:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10921:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10923:16:30"},"nodeType":"YulFunctionCall","src":"10923:18:30"},"nodeType":"YulExpressionStatement","src":"10923:18:30"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"10913:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10917:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10910:2:30"},"nodeType":"YulFunctionCall","src":"10910:10:30"},"nodeType":"YulIf","src":"10907:36:30"},{"nodeType":"YulVariableDeclaration","src":"10952:17:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10966:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10962:3:30"},"nodeType":"YulFunctionCall","src":"10962:7:30"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"10956:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10978:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10998:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10992:5:30"},"nodeType":"YulFunctionCall","src":"10992:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"10982:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11010:71:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11032:6:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"11056:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"11060:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11052:3:30"},"nodeType":"YulFunctionCall","src":"11052:13:30"},{"name":"_4","nodeType":"YulIdentifier","src":"11067:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11048:3:30"},"nodeType":"YulFunctionCall","src":"11048:22:30"},{"kind":"number","nodeType":"YulLiteral","src":"11072:2:30","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11044:3:30"},"nodeType":"YulFunctionCall","src":"11044:31:30"},{"name":"_4","nodeType":"YulIdentifier","src":"11077:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11040:3:30"},"nodeType":"YulFunctionCall","src":"11040:40:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11028:3:30"},"nodeType":"YulFunctionCall","src":"11028:53:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"11014:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"11140:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11142:16:30"},"nodeType":"YulFunctionCall","src":"11142:18:30"},"nodeType":"YulExpressionStatement","src":"11142:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11099:10:30"},{"name":"_1","nodeType":"YulIdentifier","src":"11111:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11096:2:30"},"nodeType":"YulFunctionCall","src":"11096:18:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11119:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"11131:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11116:2:30"},"nodeType":"YulFunctionCall","src":"11116:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11093:2:30"},"nodeType":"YulFunctionCall","src":"11093:46:30"},"nodeType":"YulIf","src":"11090:72:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11178:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11182:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11171:6:30"},"nodeType":"YulFunctionCall","src":"11171:22:30"},"nodeType":"YulExpressionStatement","src":"11171:22:30"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11209:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"11217:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11202:6:30"},"nodeType":"YulFunctionCall","src":"11202:18:30"},"nodeType":"YulExpressionStatement","src":"11202:18:30"},{"body":{"nodeType":"YulBlock","src":"11266:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11275:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11278:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11268:6:30"},"nodeType":"YulFunctionCall","src":"11268:12:30"},"nodeType":"YulExpressionStatement","src":"11268:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"11243:2:30"},{"name":"_3","nodeType":"YulIdentifier","src":"11247:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11239:3:30"},"nodeType":"YulFunctionCall","src":"11239:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"11252:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11235:3:30"},"nodeType":"YulFunctionCall","src":"11235:20:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11257:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11232:2:30"},"nodeType":"YulFunctionCall","src":"11232:33:30"},"nodeType":"YulIf","src":"11229:53:30"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"11317:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"11321:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11313:3:30"},"nodeType":"YulFunctionCall","src":"11313:11:30"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11330:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11338:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11326:3:30"},"nodeType":"YulFunctionCall","src":"11326:15:30"},{"name":"_3","nodeType":"YulIdentifier","src":"11343:2:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"11291:21:30"},"nodeType":"YulFunctionCall","src":"11291:55:30"},"nodeType":"YulExpressionStatement","src":"11291:55:30"},{"nodeType":"YulAssignment","src":"11355:16:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"11365:6:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11355:6:30"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10550:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10561:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10573:6:30","type":""}],"src":"10493:884:30"},{"body":{"nodeType":"YulBlock","src":"11428:158:30","statements":[{"nodeType":"YulVariableDeclaration","src":"11438:23:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11453:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"11456:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11449:3:30"},"nodeType":"YulFunctionCall","src":"11449:12:30"},"variables":[{"name":"x_1","nodeType":"YulTypedName","src":"11442:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11470:23:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11485:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"11488:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11481:3:30"},"nodeType":"YulFunctionCall","src":"11481:12:30"},"variables":[{"name":"y_1","nodeType":"YulTypedName","src":"11474:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"11529:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11531:16:30"},"nodeType":"YulFunctionCall","src":"11531:18:30"},"nodeType":"YulExpressionStatement","src":"11531:18:30"}]},"condition":{"arguments":[{"name":"x_1","nodeType":"YulIdentifier","src":"11508:3:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11517:4:30","type":"","value":"0xff"},{"name":"y_1","nodeType":"YulIdentifier","src":"11523:3:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11513:3:30"},"nodeType":"YulFunctionCall","src":"11513:14:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11505:2:30"},"nodeType":"YulFunctionCall","src":"11505:23:30"},"nodeType":"YulIf","src":"11502:49:30"},{"nodeType":"YulAssignment","src":"11560:20:30","value":{"arguments":[{"name":"x_1","nodeType":"YulIdentifier","src":"11571:3:30"},{"name":"y_1","nodeType":"YulIdentifier","src":"11576:3:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11567:3:30"},"nodeType":"YulFunctionCall","src":"11567:13:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11560:3:30"}]}]},"name":"checked_add_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11411:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"11414:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11420:3:30","type":""}],"src":"11382:204:30"},{"body":{"nodeType":"YulBlock","src":"11672:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"11718:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11727:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11730:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11720:6:30"},"nodeType":"YulFunctionCall","src":"11720:12:30"},"nodeType":"YulExpressionStatement","src":"11720:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11693:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11702:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11689:3:30"},"nodeType":"YulFunctionCall","src":"11689:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"11714:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11685:3:30"},"nodeType":"YulFunctionCall","src":"11685:32:30"},"nodeType":"YulIf","src":"11682:52:30"},{"nodeType":"YulAssignment","src":"11743:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11759:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11753:5:30"},"nodeType":"YulFunctionCall","src":"11753:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11743:6:30"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11638:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11649:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11661:6:30","type":""}],"src":"11591:184:30"},{"body":{"nodeType":"YulBlock","src":"11829:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"11851:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11853:16:30"},"nodeType":"YulFunctionCall","src":"11853:18:30"},"nodeType":"YulExpressionStatement","src":"11853:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11845:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"11848:1:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11842:2:30"},"nodeType":"YulFunctionCall","src":"11842:8:30"},"nodeType":"YulIf","src":"11839:34:30"},{"nodeType":"YulAssignment","src":"11882:17:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11894:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"11897:1:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11890:3:30"},"nodeType":"YulFunctionCall","src":"11890:9:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"11882:4:30"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11811:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"11814:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"11820:4:30","type":""}],"src":"11780:125:30"},{"body":{"nodeType":"YulBlock","src":"11958:80:30","statements":[{"body":{"nodeType":"YulBlock","src":"11985:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11987:16:30"},"nodeType":"YulFunctionCall","src":"11987:18:30"},"nodeType":"YulExpressionStatement","src":"11987:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11974:1:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11981:1:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11977:3:30"},"nodeType":"YulFunctionCall","src":"11977:6:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11971:2:30"},"nodeType":"YulFunctionCall","src":"11971:13:30"},"nodeType":"YulIf","src":"11968:39:30"},{"nodeType":"YulAssignment","src":"12016:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12027:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12030:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12023:3:30"},"nodeType":"YulFunctionCall","src":"12023:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12016:3:30"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11941:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"11944:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11950:3:30","type":""}],"src":"11910:128:30"},{"body":{"nodeType":"YulBlock","src":"12228:206:30","statements":[{"nodeType":"YulAssignment","src":"12238:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12250:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12261:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12246:3:30"},"nodeType":"YulFunctionCall","src":"12246:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12238:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12281:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"12292:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12274:6:30"},"nodeType":"YulFunctionCall","src":"12274:25:30"},"nodeType":"YulExpressionStatement","src":"12274:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12319:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12330:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12315:3:30"},"nodeType":"YulFunctionCall","src":"12315:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"12335:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12308:6:30"},"nodeType":"YulFunctionCall","src":"12308:34:30"},"nodeType":"YulExpressionStatement","src":"12308:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12362:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12373:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12358:3:30"},"nodeType":"YulFunctionCall","src":"12358:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"12378:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12351:6:30"},"nodeType":"YulFunctionCall","src":"12351:34:30"},"nodeType":"YulExpressionStatement","src":"12351:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12405:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12416:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12401:3:30"},"nodeType":"YulFunctionCall","src":"12401:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"12421:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12394:6:30"},"nodeType":"YulFunctionCall","src":"12394:34:30"},"nodeType":"YulExpressionStatement","src":"12394:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12173:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12184:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12192:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12200:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12208:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12219:4:30","type":""}],"src":"12043:391:30"},{"body":{"nodeType":"YulBlock","src":"12596:218:30","statements":[{"nodeType":"YulAssignment","src":"12606:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12618:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12629:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12614:3:30"},"nodeType":"YulFunctionCall","src":"12614:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12606:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"12641:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12659:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12664:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12655:3:30"},"nodeType":"YulFunctionCall","src":"12655:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"12668:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12651:3:30"},"nodeType":"YulFunctionCall","src":"12651:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12645:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12686:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12701:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"12709:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12697:3:30"},"nodeType":"YulFunctionCall","src":"12697:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12679:6:30"},"nodeType":"YulFunctionCall","src":"12679:34:30"},"nodeType":"YulExpressionStatement","src":"12679:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12733:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12744:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12729:3:30"},"nodeType":"YulFunctionCall","src":"12729:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12753:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"12761:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12749:3:30"},"nodeType":"YulFunctionCall","src":"12749:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12722:6:30"},"nodeType":"YulFunctionCall","src":"12722:43:30"},"nodeType":"YulExpressionStatement","src":"12722:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12785:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12796:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12781:3:30"},"nodeType":"YulFunctionCall","src":"12781:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"12801:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12774:6:30"},"nodeType":"YulFunctionCall","src":"12774:34:30"},"nodeType":"YulExpressionStatement","src":"12774:34:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12549:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12560:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12568:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12576:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12587:4:30","type":""}],"src":"12439:375:30"},{"body":{"nodeType":"YulBlock","src":"12948:145:30","statements":[{"nodeType":"YulAssignment","src":"12958:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12970:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12981:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12966:3:30"},"nodeType":"YulFunctionCall","src":"12966:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12958:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13000:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13015:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13031:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13036:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13027:3:30"},"nodeType":"YulFunctionCall","src":"13027:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"13040:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13023:3:30"},"nodeType":"YulFunctionCall","src":"13023:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13011:3:30"},"nodeType":"YulFunctionCall","src":"13011:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12993:6:30"},"nodeType":"YulFunctionCall","src":"12993:51:30"},"nodeType":"YulExpressionStatement","src":"12993:51:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13064:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13075:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13060:3:30"},"nodeType":"YulFunctionCall","src":"13060:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"13080:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13053:6:30"},"nodeType":"YulFunctionCall","src":"13053:34:30"},"nodeType":"YulExpressionStatement","src":"13053:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12909:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12920:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12928:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12939:4:30","type":""}],"src":"12819:274:30"},{"body":{"nodeType":"YulBlock","src":"13176:167:30","statements":[{"body":{"nodeType":"YulBlock","src":"13222:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13231:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13234:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13224:6:30"},"nodeType":"YulFunctionCall","src":"13224:12:30"},"nodeType":"YulExpressionStatement","src":"13224:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13197:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13206:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13193:3:30"},"nodeType":"YulFunctionCall","src":"13193:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"13218:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13189:3:30"},"nodeType":"YulFunctionCall","src":"13189:32:30"},"nodeType":"YulIf","src":"13186:52:30"},{"nodeType":"YulVariableDeclaration","src":"13247:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13266:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13260:5:30"},"nodeType":"YulFunctionCall","src":"13260:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13251:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13307:5:30"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"13285:21:30"},"nodeType":"YulFunctionCall","src":"13285:28:30"},"nodeType":"YulExpressionStatement","src":"13285:28:30"},{"nodeType":"YulAssignment","src":"13322:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"13332:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13322:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13142:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13153:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13165:6:30","type":""}],"src":"13098:245:30"},{"body":{"nodeType":"YulBlock","src":"13522:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13539:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13550:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13532:6:30"},"nodeType":"YulFunctionCall","src":"13532:21:30"},"nodeType":"YulExpressionStatement","src":"13532:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13573:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13584:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13569:3:30"},"nodeType":"YulFunctionCall","src":"13569:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13589:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13562:6:30"},"nodeType":"YulFunctionCall","src":"13562:30:30"},"nodeType":"YulExpressionStatement","src":"13562:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13612:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13623:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13608:3:30"},"nodeType":"YulFunctionCall","src":"13608:18:30"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"13628:34:30","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13601:6:30"},"nodeType":"YulFunctionCall","src":"13601:62:30"},"nodeType":"YulExpressionStatement","src":"13601:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13683:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13694:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13679:3:30"},"nodeType":"YulFunctionCall","src":"13679:18:30"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"13699:12:30","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13672:6:30"},"nodeType":"YulFunctionCall","src":"13672:40:30"},"nodeType":"YulExpressionStatement","src":"13672:40:30"},{"nodeType":"YulAssignment","src":"13721:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13733:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13744:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13729:3:30"},"nodeType":"YulFunctionCall","src":"13729:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13721:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13499:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13513:4:30","type":""}],"src":"13348:406:30"},{"body":{"nodeType":"YulBlock","src":"13933:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13950:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13961:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13943:6:30"},"nodeType":"YulFunctionCall","src":"13943:21:30"},"nodeType":"YulExpressionStatement","src":"13943:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13984:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13995:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13980:3:30"},"nodeType":"YulFunctionCall","src":"13980:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14000:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13973:6:30"},"nodeType":"YulFunctionCall","src":"13973:30:30"},"nodeType":"YulExpressionStatement","src":"13973:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14023:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14034:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14019:3:30"},"nodeType":"YulFunctionCall","src":"14019:18:30"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"14039:34:30","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14012:6:30"},"nodeType":"YulFunctionCall","src":"14012:62:30"},"nodeType":"YulExpressionStatement","src":"14012:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14094:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14105:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14090:3:30"},"nodeType":"YulFunctionCall","src":"14090:18:30"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"14110:8:30","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14083:6:30"},"nodeType":"YulFunctionCall","src":"14083:36:30"},"nodeType":"YulExpressionStatement","src":"14083:36:30"},{"nodeType":"YulAssignment","src":"14128:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14140:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14151:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14136:3:30"},"nodeType":"YulFunctionCall","src":"14136:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14128:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13910:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13924:4:30","type":""}],"src":"13759:402:30"},{"body":{"nodeType":"YulBlock","src":"14303:137:30","statements":[{"nodeType":"YulVariableDeclaration","src":"14313:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14333:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14327:5:30"},"nodeType":"YulFunctionCall","src":"14327:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14317:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14375:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14383:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14371:3:30"},"nodeType":"YulFunctionCall","src":"14371:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"14390:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"14395:6:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"14349:21:30"},"nodeType":"YulFunctionCall","src":"14349:53:30"},"nodeType":"YulExpressionStatement","src":"14349:53:30"},{"nodeType":"YulAssignment","src":"14411:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14422:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"14427:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14418:3:30"},"nodeType":"YulFunctionCall","src":"14418:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14411:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14279:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14284:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14295:3:30","type":""}],"src":"14166:274:30"},{"body":{"nodeType":"YulBlock","src":"14619:179:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14636:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14647:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14629:6:30"},"nodeType":"YulFunctionCall","src":"14629:21:30"},"nodeType":"YulExpressionStatement","src":"14629:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14670:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14681:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14666:3:30"},"nodeType":"YulFunctionCall","src":"14666:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14686:2:30","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14659:6:30"},"nodeType":"YulFunctionCall","src":"14659:30:30"},"nodeType":"YulExpressionStatement","src":"14659:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14709:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14720:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14705:3:30"},"nodeType":"YulFunctionCall","src":"14705:18:30"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"14725:31:30","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14698:6:30"},"nodeType":"YulFunctionCall","src":"14698:59:30"},"nodeType":"YulExpressionStatement","src":"14698:59:30"},{"nodeType":"YulAssignment","src":"14766:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14778:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14789:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14774:3:30"},"nodeType":"YulFunctionCall","src":"14774:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14766:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14596:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14610:4:30","type":""}],"src":"14445:353:30"},{"body":{"nodeType":"YulBlock","src":"14924:99:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14941:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14952:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14934:6:30"},"nodeType":"YulFunctionCall","src":"14934:21:30"},"nodeType":"YulExpressionStatement","src":"14934:21:30"},{"nodeType":"YulAssignment","src":"14964:53:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14990:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15002:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15013:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14998:3:30"},"nodeType":"YulFunctionCall","src":"14998:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14972:17:30"},"nodeType":"YulFunctionCall","src":"14972:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14964:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14893:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14904:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14915:4:30","type":""}],"src":"14803:220:30"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payablet_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint16(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_uint16(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 64)\n        mstore(headStart, 64)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 96)\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        mstore(add(headStart, _1), sub(pos, headStart))\n        let pos_1 := pos\n        let length_1 := mload(value1)\n        mstore(pos, length_1)\n        pos_1 := add(pos, _1)\n        let srcPtr_1 := add(value1, _1)\n        let i_1 := 0\n        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, mload(srcPtr_1))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n        tail := pos_1\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_uint16t_uint16t_uint16t_uint16(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_uint16(add(headStart, 32))\n        value2 := abi_decode_uint16(add(headStart, 64))\n        value3 := abi_decode_uint16(add(headStart, 96))\n        value4 := abi_decode_uint16(add(headStart, 128))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_struct_HouseEdgeSplit(value, pos)\n    {\n        let _1 := 0xffff\n        mstore(pos, and(mload(value), _1))\n        mstore(add(pos, 0x20), and(mload(add(value, 0x20)), _1))\n        mstore(add(pos, 0x40), and(mload(add(value, 0x40)), _1))\n        mstore(add(pos, 0x60), and(mload(add(value, 0x60)), _1))\n        mstore(add(pos, 0x80), mload(add(value, 0x80)))\n        mstore(add(pos, 0xa0), mload(add(value, 0xa0)))\n        mstore(add(pos, 0xc0), mload(add(value, 0xc0)))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_TokenMetadata_$3871_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, length)), _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let _4 := 0x01e0\n            mstore(tail_2, and(mload(_3), 0xff))\n            mstore(add(tail_2, _1), and(mload(add(_3, _1)), sub(shl(160, 1), 1)))\n            let memberValue0 := mload(add(_3, _2))\n            mstore(add(tail_2, _2), _4)\n            let tail_3 := abi_encode_string(memberValue0, add(tail_2, _4))\n            let _5 := 0x60\n            let memberValue0_1 := mload(add(_3, _5))\n            mstore(add(tail_2, _5), sub(tail_3, tail_2))\n            let tail_4 := abi_encode_string(memberValue0_1, tail_3)\n            let _6 := 0x80\n            let memberValue0_2 := mload(add(_3, _6))\n            mstore(add(tail_2, _6), iszero(iszero(mload(memberValue0_2))))\n            mstore(add(tail_2, 160), iszero(iszero(mload(add(memberValue0_2, _1)))))\n            mstore(add(tail_2, 192), and(mload(add(memberValue0_2, _2)), 0xffff))\n            mstore(add(tail_2, 224), mload(add(memberValue0_2, _5)))\n            let memberValue0_3 := mload(add(memberValue0_2, _6))\n            abi_encode_struct_HouseEdgeSplit(memberValue0_3, add(tail_2, 256))\n            tail_2 := tail_4\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bool_t_bool_t_uint16_t_uint256_t_struct$_HouseEdgeSplit_$3847_memory_ptr__to_t_bool_t_bool_t_uint16_t_uint256_t_struct$_HouseEdgeSplit_$3847_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 352)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        mstore(add(headStart, 96), value3)\n        abi_encode_struct_HouseEdgeSplit(value4, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function checked_add_t_uint16(x, y) -> sum\n    {\n        let _1 := 0xffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint16_t_uint16__to_t_uint16_t_uint16_t_uint16_t_uint16__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if gt(x_1, sub(0xff, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3877":[{"length":32,"start":631},{"length":32,"start":1266}]},"linkReferences":{},"object":"6080604052600436106101355760003560e01c80638aaa2284116100ab578063d48bfca71161006f578063d48bfca714610361578063e486033914610381578063ed442e1414610443578063f3fef3a314610458578063f6b2a2f114610478578063f8b2cb4f1461049857600080fd5b80638aaa2284146102bc578063a7fd00f0146102dc578063aa6ca808146102fc578063ca7a87691461031e578063cbe230c31461033157600080fd5b80634297dcbe116100fd5780634297dcbe146101d557806347e7ef24146101f557806356f0406d14610208578063599270441461022857806361d027b314610265578063802ad8fb1461029957600080fd5b80630ae30cb01461013a5780631525ff7d1461015c5780631f6150231461017c578063278b39de1461018f5780633138809d146101c2575b600080fd5b34801561014657600080fd5b5061015a610155366004611964565b6104b8565b005b34801561016857600080fd5b5061015a610177366004611964565b61059f565b61015a61018a366004611981565b610626565b34801561019b57600080fd5b506101af6101aa3660046119c7565b610683565b6040519081526020015b60405180910390f35b61015a6101d03660046119c7565b6106cc565b3480156101e157600080fd5b5061015a6101f03660046119c7565b610734565b61015a6102033660046119c7565b610784565b34801561021457600080fd5b5061015a610223366004611a05565b6107e9565b34801561023457600080fd5b5060005461024d9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101b9565b34801561027157600080fd5b5061024d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a557600080fd5b506102ae61084e565b6040516101b9929190611a3a565b3480156102c857600080fd5b5061015a6102d7366004611acc565b610a02565b3480156102e857600080fd5b5061015a6102f7366004611b05565b610a5a565b34801561030857600080fd5b50610311610b75565b6040516101b99190611c14565b61015a61032c3660046119c7565b610ef0565b34801561033d57600080fd5b5061035161034c366004611964565b610f2e565b60405190151581526020016101b9565b34801561036d57600080fd5b5061015a61037c366004611964565b611002565b34801561038d57600080fd5b5061043261039c366004611964565b600160208181526000928352604092839020805492810154845160e081018652600283015461ffff8082168352620100008083048216968401969096526401000000008204811697830197909752600160301b90048616606082015260038301546080820152600483015460a082015260059092015460c083015260ff8085169561010086049091169493909304909216919085565b6040516101b9959493929190611d01565b34801561044f57600080fd5b506102ae61110b565b34801561046457600080fd5b5061015a6104733660046119c7565b611260565b34801561048457600080fd5b506101af610493366004611964565b611310565b3480156104a457600080fd5b506101af6104b3366004611964565b61133c565b6001600160a01b038116600090815260016020526040902060048101546005820154600290920191811561051857600060028401556105187f0000000000000000000000000000000000000000000000000000000000000000858461146d565b801561054157600060038401819055546105419061010090046001600160a01b0316858361146d565b8115158061054e57508015155b156105995760408051838152602081018390526001600160a01b038616917f0146f1701c23c89f761280798d36d6c4e3acb349438456f5da8f83a2f5dd8cdc91015b60405180910390a25b50505050565b6001600160a01b0381166105c657604051630d23cf4160e11b815260040160405180910390fd5b60008054610100600160a81b0319166101006001600160a01b038481168202929092179283905560405192041681527fc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da906020015b60405180910390a150565b61063083826114ca565b61063b84848461146d565b826001600160a01b03167f634235fcf5af0adbca1a405ec65f6f6c08f55e1f379c2c45cd10f23cb29e0e3161066f8561133c565b604080519182526020820186905201610590565b6001600160a01b038216600090815260016020526040812054829062010000900461ffff166106b18561133c565b6106bb9190611d51565b6106c59190611d70565b9392505050565b816001600160a01b03167f812b76b477469edc716929cbf7ed54e3d9c1a68d8b9f8290dbabcda54d96fcbe6107008461133c565b6001600160a01b038516156107155783610717565b345b604080519283526020830191909152015b60405180910390a25050565b6001600160a01b03821660008181526001602081905260409182902001839055517f8b4a07860448b613116df3f175c837980eceaca7d1dc5143c46a20ab31ec00f9906107289084815260200190565b6001600160a01b0382166107995750346107ae565b6107ae6001600160a01b038316333084611622565b816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161072891815260200190565b6001600160a01b038216600081815260016020908152604091829020805463ffff000019166201000061ffff87169081029190911790915591519182527f68288b0936dd994d19323ee940b2703e7bf46fae2552319d60dc1239ba52ec689101610728565b60008054606091829160ff1667ffffffffffffffff81111561087257610872611d92565b60405190808252806020026020018201604052801561089b578160200160208202803683370190505b50600080549192509060ff1667ffffffffffffffff8111156108bf576108bf611d92565b6040519080825280602002602001820160405280156108e8578160200160208202803683370190505b50905060005b60005460ff90811690821610156109f85760ff81166000908152600260209081526040808320546001600160a01b03168084526001909252909120600381015480156109e2576000600383015561094633848361146d565b826001600160a01b03167fca64dbcaf91abfb066e7a5163f1d135f8f48f2cbdb0395e3b35cc278ebbd340b8260405161098191815260200190565b60405180910390a282868560ff168151811061099f5761099f611da8565b60200260200101906001600160a01b031690816001600160a01b03168152505080858560ff16815181106109d5576109d5611da8565b6020026020010181815250505b50505080806109f090611dbe565b9150506108ee565b5090939092509050565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527fe589eb036e62c07e307aa4d441bd39c81e8bd86f349eaacb0caa06b1477f7f9a9101610728565b60008282610a688688611dde565b610a729190611dde565b610a7c9190611dde565b90508061ffff1661271014610aaf576040516318410e1160e21b815261ffff821660048201526024015b60405180910390fd5b6001600160a01b038616600081815260016020908152604091829020600201805461ffff8a811663ffffffff199092168217620100008b83169081029190911767ffffffff0000000019166401000000008b841690810267ffff000000000000191691909117600160301b938b169384021785558651938452948301529381019290925260608201929092529091907f01573e473e8842c25da06b37c286cdd7bf1c828e796ab47f7eec894ac9fbbee3906080015b60405180910390a250505050505050565b600080546060919060ff1667ffffffffffffffff811115610b9857610b98611d92565b604051908082528060200260200182016040528015610bd157816020015b610bbe6118b2565b815260200190600190039081610bb65790505b50905060005b60005460ff9081169082161015610eea5760ff8181166000908152600260208181526040808420546001600160a01b0316808552600180845294829020825160a080820185528254808a1615158352610100810490991615158287015261ffff62010000998a900481168387015297830154606080840191909152855160e08101875297840154808a168952998a048916968801969096526401000000008904881694870194909452600160301b90970490951692840192909252600384015460808085019190915260048501549184019190915260059093015460c0830152918301529081610d50576040518060a00160405280601260ff168152602001836001600160a01b031681526020016040518060400160405280600381526020016208aa8960eb1b81525081526020016040518060400160405280600381526020016208aa8960eb1b815250815260200182815250848460ff1681518110610d4057610d40611da8565b6020026020010181905250610ed5565b60008290506040518060a00160405280826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190611e04565b60ff168152602001846001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e17573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e3f9190810190611e27565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eaa9190810190611e27565b815260200183815250858560ff1681518110610ec857610ec8611da8565b6020026020010181905250505b50508080610ee290611dbe565b915050610bd7565b50919050565b610efa82826114ca565b816001600160a01b03167f71928ab56dd9fb6df8072adf5fefb4d17ed280fa21652433fe96d7d6729bd3286107008461133c565b6001600160a01b0381166000908152600160208181526040808420815160a08082018452825460ff8082161515845261010082041615158387015261ffff620100009182900481168487015296840154606080850191909152855160e0810187526002860154808a1682529283048916978101979097526401000000008204881695870195909552600160301b90049095169284019290925260038101546080848101919091526004820154948401949094526005015460c083015291820152805180156106c55750602001511592915050565b60005460ff16156110745760005b60005460ff90811690821610156110725760ff81166000908152600260205260409020546001600160a01b038381169116141561106057604051632ae3f45d60e11b815260040160405180910390fd5b8061106a81611dbe565b915050611010565b505b6000805460ff908116825260026020526040822080546001600160a01b0319166001600160a01b03851617905581546001929182916110b591859116611ec9565b92506101000a81548160ff021916908360ff1602179055507fe473c74f34be27c1464d6624f14a0d7fd4e301cbfa29c3eba425d378c8a7ebe08160405161061b91906001600160a01b0391909116815260200190565b60008054606091829160ff1667ffffffffffffffff81111561112f5761112f611d92565b604051908082528060200260200182016040528015611158578160200160208202803683370190505b50600080549192509060ff1667ffffffffffffffff81111561117c5761117c611d92565b6040519080825280602002602001820160405280156111a5578160200160208202803683370190505b50905060005b60005460ff90811690821610156109f85760ff81166000908152600260209081526040808320546001600160a01b031680845260019092529091206003810154801561124a5782868560ff168151811061120757611207611da8565b60200260200101906001600160a01b031690816001600160a01b03168152505080858560ff168151811061123d5761123d611da8565b6020026020010181815250505b505050808061125890611dbe565b9150506111ab565b600061126b8361133c565b905080156112b1576001600160a01b038316600090815260016020526040902054610100900460ff166112b1576040516393b3a85d60e01b815260040160405180910390fd5b808211156112bd578091505b6112c833848461146d565b826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161130391815260200190565b60405180910390a2505050565b6001600160a01b038116600090815260016020819052604090912001548061133757506127105b919050565b6000806001600160a01b0383166113545750476113bf565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015611398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bc9190611eee565b90505b6001600160a01b038316600090815260016020908152604091829020825160e081018452600282015461ffff80821683526201000082048116948301949094526401000000008104841694820194909452600160301b9093049091166060830152600381015460808301819052600482015460a0840181905260059092015460c0840181905291906114519085611f07565b61145b9190611f07565b6114659190611f07565b949350505050565b6001600160a01b0382166114b1576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610599573d6000803e3d6000fd5b6114c56001600160a01b038316848361168d565b505050565b6001600160a01b03821660009081526001602052604081206002018054909190612710906115029062010000900461ffff1685611d51565b61150c9190611d70565b9050808260010160008282546115229190611f1e565b909155505081546000906127109061153e9061ffff1686611d51565b6115489190611d70565b83549091506000906127109061156a90640100000000900461ffff1687611d51565b6115749190611d70565b90508084600201600082825461158a9190611f1e565b90915550508354600090612710906115ad90600160301b900461ffff1688611d51565b6115b79190611d70565b9050808560030160008282546115cd9190611f1e565b90915550506040805184815260208101869052908101839052606081018290526001600160a01b038816907f0b5a4c9121a83120fc7b30f195ddd2c279ec4510cfc8f051380851e8f0686f4990608001610b64565b6040516001600160a01b03808516602483015283166044820152606481018290526105999085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116bd565b6040516001600160a01b0383166024820152604481018290526114c590849063a9059cbb60e01b90606401611656565b6000611712826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117929092919063ffffffff16565b90508051600014806117335750808060200190518101906117339190611f36565b6114c55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aa6565b6060611465848460008585600080866001600160a01b031685876040516117b99190611f53565b60006040518083038185875af1925050503d80600081146117f6576040519150601f19603f3d011682016040523d82523d6000602084013e6117fb565b606091505b509150915061180c87838387611817565b979650505050505050565b6060831561188357825161187c576001600160a01b0385163b61187c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa6565b5081611465565b61146583838151156118985781518083602001fd5b8060405162461bcd60e51b8152600401610aa69190611f6f565b6040518060a00160405280600060ff16815260200160006001600160a01b0316815260200160608152602001606081526020016119476040805160a08082018352600080835260208084018290528385018290526060808501839052855160e081018752838152918201839052948101829052938401819052608084810182905291840181905260c084015290919082015290565b905290565b6001600160a01b038116811461196157600080fd5b50565b60006020828403121561197657600080fd5b81356106c58161194c565b6000806000806080858703121561199757600080fd5b84356119a28161194c565b935060208501356119b28161194c565b93969395505050506040820135916060013590565b600080604083850312156119da57600080fd5b82356119e58161194c565b946020939093013593505050565b803561ffff8116811461133757600080fd5b60008060408385031215611a1857600080fd5b8235611a238161194c565b9150611a31602084016119f3565b90509250929050565b604080825283519082018190526000906020906060840190828701845b82811015611a7c5781516001600160a01b031684529284019290840190600101611a57565b5050508381038285015284518082528583019183019060005b81811015611ab157835183529284019291840191600101611a95565b5090979650505050505050565b801515811461196157600080fd5b60008060408385031215611adf57600080fd5b8235611aea8161194c565b91506020830135611afa81611abe565b809150509250929050565b600080600080600060a08688031215611b1d57600080fd5b8535611b288161194c565b9450611b36602087016119f3565b9350611b44604087016119f3565b9250611b52606087016119f3565b9150611b60608087016119f3565b90509295509295909350565b60005b83811015611b87578181015183820152602001611b6f565b838111156105995750506000910152565b60008151808452611bb0816020860160208601611b6c565b601f01601f19169290920160200192915050565b61ffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611cf357888303603f190185528151805160ff168452878101516001600160a01b031688850152868101516101e088860181905290611c8082870182611b98565b91505060608083015186830382880152611c9a8382611b98565b60809485015180511515898701528c810151151560a08a01528b81015161ffff1660c08a01529283015160e0890152919093015192509050611ce0610100860183611bc4565b9588019593505090860190600101611c3b565b509098975050505050505050565b8515158152841515602082015261ffff84166040820152606081018390526101608101611d316080830184611bc4565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d6b57611d6b611d3b565b500290565b600082611d8d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415611dd557611dd5611d3b565b60010192915050565b600061ffff808316818516808303821115611dfb57611dfb611d3b565b01949350505050565b600060208284031215611e1657600080fd5b815160ff811681146106c557600080fd5b600060208284031215611e3957600080fd5b815167ffffffffffffffff80821115611e5157600080fd5b818401915084601f830112611e6557600080fd5b815181811115611e7757611e77611d92565b604051601f8201601f19908116603f01168101908382118183101715611e9f57611e9f611d92565b81604052828152876020848701011115611eb857600080fd5b61180c836020830160208801611b6c565b600060ff821660ff84168060ff03821115611ee657611ee6611d3b565b019392505050565b600060208284031215611f0057600080fd5b5051919050565b600082821015611f1957611f19611d3b565b500390565b60008219821115611f3157611f31611d3b565b500190565b600060208284031215611f4857600080fd5b81516106c581611abe565b60008251611f65818460208701611b6c565b9190910192915050565b6020815260006106c56020830184611b9856fea2646970667358221220b7cc471adb090fd8025c528729e4e7d168f0962cbcc83bb66910dfd66ec8fca264736f6c634300080c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x135 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8AAA2284 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xD48BFCA7 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xD48BFCA7 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0xED442E14 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0xF6B2A2F1 EQ PUSH2 0x478 JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8AAA2284 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xA7FD00F0 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0xAA6CA808 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xCA7A8769 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xCBE230C3 EQ PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4297DCBE GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x4297DCBE EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x56F0406D EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x59927044 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x802AD8FB EQ PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAE30CB0 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x1525FF7D EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x1F615023 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x278B39DE EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x3138809D EQ PUSH2 0x1C2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x4B8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x177 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST PUSH2 0x15A PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x1981 JUMP JUMPDEST PUSH2 0x626 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AF PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x683 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH2 0x1D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x6CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x1F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x734 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x784 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A05 JUMP JUMPDEST PUSH2 0x7E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x24D SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24D PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x84E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP3 SWAP2 SWAP1 PUSH2 0x1A3A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ACC JUMP JUMPDEST PUSH2 0xA02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B05 JUMP JUMPDEST PUSH2 0xA5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x1C14 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0xEF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0x34C CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0xF2E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x37C CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x1002 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x432 PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 DUP2 ADD SLOAD DUP5 MLOAD PUSH1 0xE0 DUP2 ADD DUP7 MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP1 DUP4 DIV DUP3 AND SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP8 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV DUP7 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xFF DUP1 DUP6 AND SWAP6 PUSH2 0x100 DUP7 DIV SWAP1 SWAP2 AND SWAP5 SWAP4 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x110B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15A PUSH2 0x473 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x1260 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AF PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x1310 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AF PUSH2 0x4B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 DUP2 ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 PUSH1 0x2 DUP5 ADD SSTORE PUSH2 0x518 PUSH32 0x0 DUP6 DUP5 PUSH2 0x146D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 PUSH1 0x3 DUP5 ADD DUP2 SWAP1 SSTORE SLOAD PUSH2 0x541 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP4 PUSH2 0x146D JUMP JUMPDEST DUP2 ISZERO ISZERO DUP1 PUSH2 0x54E JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x599 JUMPI PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x146F1701C23C89F761280798D36D6C4E3ACB349438456F5DA8F83A2F5DD8CDC SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD23CF41 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MUL SWAP3 SWAP1 SWAP3 OR SWAP3 DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP3 DIV AND DUP2 MSTORE PUSH32 0xC6A5DD316FE9D0339F2769DEAB7E31F64C8F5B101FFD85DFC9A83DBEAF2E69DA SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x630 DUP4 DUP3 PUSH2 0x14CA JUMP JUMPDEST PUSH2 0x63B DUP5 DUP5 DUP5 PUSH2 0x146D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x634235FCF5AF0ADBCA1A405EC65F6F6C08F55E1F379C2C45CD10F23CB29E0E31 PUSH2 0x66F DUP6 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE ADD PUSH2 0x590 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x6B1 DUP6 PUSH2 0x133C JUMP JUMPDEST PUSH2 0x6BB SWAP2 SWAP1 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x812B76B477469EDC716929CBF7ED54E3D9C1A68D8B9F8290DBABCDA54D96FCBE PUSH2 0x700 DUP5 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x715 JUMPI DUP4 PUSH2 0x717 JUMP JUMPDEST CALLVALUE JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 ADD DUP4 SWAP1 SSTORE MLOAD PUSH32 0x8B4A07860448B613116DF3F175C837980ECEACA7D1DC5143C46A20AB31EC00F9 SWAP1 PUSH2 0x728 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x799 JUMPI POP CALLVALUE PUSH2 0x7AE JUMP JUMPDEST PUSH2 0x7AE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER ADDRESS DUP5 PUSH2 0x1622 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C DUP3 PUSH1 0x40 MLOAD PUSH2 0x728 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF DUP8 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x68288B0936DD994D19323EE940B2703E7BF46FAE2552319D60DC1239BA52EC68 SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x872 JUMPI PUSH2 0x872 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x89B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8BF JUMPI PUSH2 0x8BF PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8E8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x9F8 JUMPI PUSH1 0xFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP1 ISZERO PUSH2 0x9E2 JUMPI PUSH1 0x0 PUSH1 0x3 DUP4 ADD SSTORE PUSH2 0x946 CALLER DUP5 DUP4 PUSH2 0x146D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xCA64DBCAF91ABFB066E7A5163F1D135F8F48F2CBDB0395E3B35CC278EBBD340B DUP3 PUSH1 0x40 MLOAD PUSH2 0x981 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 DUP7 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x99F JUMPI PUSH2 0x99F PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x9D5 JUMPI PUSH2 0x9D5 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x9F0 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8EE JUMP JUMPDEST POP SWAP1 SWAP4 SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE589EB036E62C07E307AA4D441BD39C81E8BD86F349EAACB0CAA06B1477F7F9A SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH2 0xA68 DUP7 DUP9 PUSH2 0x1DDE JUMP JUMPDEST PUSH2 0xA72 SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x1DDE JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFFFF AND PUSH2 0x2710 EQ PUSH2 0xAAF JUMPI PUSH1 0x40 MLOAD PUSH4 0x18410E11 PUSH1 0xE2 SHL DUP2 MSTORE PUSH2 0xFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP11 DUP2 AND PUSH4 0xFFFFFFFF NOT SWAP1 SWAP3 AND DUP3 OR PUSH3 0x10000 DUP12 DUP4 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR PUSH8 0xFFFFFFFF00000000 NOT AND PUSH5 0x100000000 DUP12 DUP5 AND SWAP1 DUP2 MUL PUSH8 0xFFFF000000000000 NOT AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x30 SHL SWAP4 DUP12 AND SWAP4 DUP5 MUL OR DUP6 SSTORE DUP7 MLOAD SWAP4 DUP5 MSTORE SWAP5 DUP4 ADD MSTORE SWAP4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x1573E473E8842C25DA06B37C286CDD7BF1C828E796AB47F7EEC894AC9FBBEE3 SWAP1 PUSH1 0x80 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB98 JUMPI PUSH2 0xB98 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBD1 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xBBE PUSH2 0x18B2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xBB6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0xEEA JUMPI PUSH1 0xFF DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP6 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP6 MSTORE DUP3 SLOAD DUP1 DUP11 AND ISZERO ISZERO DUP4 MSTORE PUSH2 0x100 DUP2 DIV SWAP1 SWAP10 AND ISZERO ISZERO DUP3 DUP8 ADD MSTORE PUSH2 0xFFFF PUSH3 0x10000 SWAP10 DUP11 SWAP1 DIV DUP2 AND DUP4 DUP8 ADD MSTORE SWAP8 DUP4 ADD SLOAD PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP2 ADD DUP8 MSTORE SWAP8 DUP5 ADD SLOAD DUP1 DUP11 AND DUP10 MSTORE SWAP10 DUP11 DIV DUP10 AND SWAP7 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH5 0x100000000 DUP10 DIV DUP9 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP8 DIV SWAP1 SWAP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x80 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP6 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP4 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 DUP2 PUSH2 0xD50 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x12 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x8AA89 PUSH1 0xEB SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x8AA89 PUSH1 0xEB SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP5 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xD40 JUMPI PUSH2 0xD40 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDC2 SWAP2 SWAP1 PUSH2 0x1E04 JUMP JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6FDDE03 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE3F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E27 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95D89B41 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xEAA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E27 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP6 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xEC8 JUMPI PUSH2 0xEC8 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0xEE2 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBD7 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEFA DUP3 DUP3 PUSH2 0x14CA JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x71928AB56DD9FB6DF8072ADF5FEFB4D17ED280FA21652433FE96D7D6729BD328 PUSH2 0x700 DUP5 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP5 MSTORE DUP3 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP5 MSTORE PUSH2 0x100 DUP3 DIV AND ISZERO ISZERO DUP4 DUP8 ADD MSTORE PUSH2 0xFFFF PUSH3 0x10000 SWAP2 DUP3 SWAP1 DIV DUP2 AND DUP5 DUP8 ADD MSTORE SWAP7 DUP5 ADD SLOAD PUSH1 0x60 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP2 ADD DUP8 MSTORE PUSH1 0x2 DUP7 ADD SLOAD DUP1 DUP11 AND DUP3 MSTORE SWAP3 DUP4 DIV DUP10 AND SWAP8 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH5 0x100000000 DUP3 DIV DUP9 AND SWAP6 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV SWAP1 SWAP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP3 ADD SLOAD SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE SWAP2 DUP3 ADD MSTORE DUP1 MLOAD DUP1 ISZERO PUSH2 0x6C5 JUMPI POP PUSH1 0x20 ADD MLOAD ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1074 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x1072 JUMPI PUSH1 0xFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1060 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2AE3F45D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x106A DUP2 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1010 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE DUP2 SLOAD PUSH1 0x1 SWAP3 SWAP2 DUP3 SWAP2 PUSH2 0x10B5 SWAP2 DUP6 SWAP2 AND PUSH2 0x1EC9 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xE473C74F34BE27C1464D6624F14A0D7FD4E301CBFA29C3EBA425D378C8A7EBE0 DUP2 PUSH1 0x40 MLOAD PUSH2 0x61B SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x112F JUMPI PUSH2 0x112F PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1158 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x117C JUMPI PUSH2 0x117C PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11A5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x9F8 JUMPI PUSH1 0xFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP1 ISZERO PUSH2 0x124A JUMPI DUP3 DUP7 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1207 JUMPI PUSH2 0x1207 PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x123D JUMPI PUSH2 0x123D PUSH2 0x1DA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x1258 SWAP1 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP4 PUSH2 0x133C JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x12B1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x12B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x93B3A85D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12BD JUMPI DUP1 SWAP2 POP JUMPDEST PUSH2 0x12C8 CALLER DUP5 DUP5 PUSH2 0x146D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1303 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP1 PUSH2 0x1337 JUMPI POP PUSH2 0x2710 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1354 JUMPI POP SELFBALANCE PUSH2 0x13BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1398 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13BC SWAP2 SWAP1 PUSH2 0x1EEE JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH5 0x100000000 DUP2 DIV DUP5 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP4 DIV SWAP1 SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 SWAP1 PUSH2 0x1451 SWAP1 DUP6 PUSH2 0x1F07 JUMP JUMPDEST PUSH2 0x145B SWAP2 SWAP1 PUSH2 0x1F07 JUMP JUMPDEST PUSH2 0x1465 SWAP2 SWAP1 PUSH2 0x1F07 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x14B1 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x599 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x14C5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 DUP4 PUSH2 0x168D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x1502 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND DUP6 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x150C SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1522 SWAP2 SWAP1 PUSH2 0x1F1E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x153E SWAP1 PUSH2 0xFFFF AND DUP7 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x1548 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x156A SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH2 0xFFFF AND DUP8 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x1574 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x158A SWAP2 SWAP1 PUSH2 0x1F1E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x15AD SWAP1 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP9 PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x15B7 SWAP2 SWAP1 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x15CD SWAP2 SWAP1 PUSH2 0x1F1E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH32 0xB5A4C9121A83120FC7B30F195DDD2C279EC4510CFC8F051380851E8F0686F49 SWAP1 PUSH1 0x80 ADD PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x599 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x14C5 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1712 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1792 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1733 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1733 SWAP2 SWAP1 PUSH2 0x1F36 JUMP JUMPDEST PUSH2 0x14C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1465 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x17B9 SWAP2 SWAP1 PUSH2 0x1F53 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x180C DUP8 DUP4 DUP4 DUP8 PUSH2 0x1817 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1883 JUMPI DUP3 MLOAD PUSH2 0x187C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x187C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAA6 JUMP JUMPDEST POP DUP2 PUSH2 0x1465 JUMP JUMPDEST PUSH2 0x1465 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1898 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAA6 SWAP2 SWAP1 PUSH2 0x1F6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1947 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP4 DUP6 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP6 ADD DUP4 SWAP1 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP2 ADD DUP8 MSTORE DUP4 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE SWAP5 DUP2 ADD DUP3 SWAP1 MSTORE SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP5 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6C5 DUP2 PUSH2 0x194C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x19A2 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x19B2 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x19E5 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A23 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP2 POP PUSH2 0x1A31 PUSH1 0x20 DUP5 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1A7C JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A57 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE DUP6 DUP4 ADD SWAP2 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AB1 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1A95 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1AEA DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1AFA DUP2 PUSH2 0x1ABE JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1B28 DUP2 PUSH2 0x194C JUMP JUMPDEST SWAP5 POP PUSH2 0x1B36 PUSH1 0x20 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B44 PUSH1 0x40 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP3 POP PUSH2 0x1B52 PUSH1 0x60 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B60 PUSH1 0x80 DUP8 ADD PUSH2 0x19F3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B87 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B6F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x599 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1BB0 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B6C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP1 DUP3 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CF3 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0xFF AND DUP5 MSTORE DUP8 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP6 ADD MSTORE DUP7 DUP2 ADD MLOAD PUSH2 0x1E0 DUP9 DUP7 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH2 0x1C80 DUP3 DUP8 ADD DUP3 PUSH2 0x1B98 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP1 DUP4 ADD MLOAD DUP7 DUP4 SUB DUP3 DUP9 ADD MSTORE PUSH2 0x1C9A DUP4 DUP3 PUSH2 0x1B98 JUMP JUMPDEST PUSH1 0x80 SWAP5 DUP6 ADD MLOAD DUP1 MLOAD ISZERO ISZERO DUP10 DUP8 ADD MSTORE DUP13 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP11 ADD MSTORE DUP12 DUP2 ADD MLOAD PUSH2 0xFFFF AND PUSH1 0xC0 DUP11 ADD MSTORE SWAP3 DUP4 ADD MLOAD PUSH1 0xE0 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 ADD MLOAD SWAP3 POP SWAP1 POP PUSH2 0x1CE0 PUSH2 0x100 DUP7 ADD DUP4 PUSH2 0x1BC4 JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1C3B JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP6 ISZERO ISZERO DUP2 MSTORE DUP5 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFFFF DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD PUSH2 0x1D31 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1BC4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1D6B JUMPI PUSH2 0x1D6B PUSH2 0x1D3B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D8D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x1DD5 JUMPI PUSH2 0x1DD5 PUSH2 0x1D3B JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x1DFB JUMPI PUSH2 0x1DFB PUSH2 0x1D3B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1E77 JUMPI PUSH2 0x1E77 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1E9F JUMPI PUSH2 0x1E9F PUSH2 0x1D92 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1EB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x180C DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1B6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x1EE6 JUMPI PUSH2 0x1EE6 PUSH2 0x1D3B JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1F19 JUMPI PUSH2 0x1F19 PUSH2 0x1D3B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1F31 JUMPI PUSH2 0x1F31 PUSH2 0x1D3B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6C5 DUP2 PUSH2 0x1ABE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F65 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B6C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x6C5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B98 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xCC SELFBALANCE BYTE 0xDB MULMOD 0xF 0xD8 MUL 0x5C MSTORE DUP8 0x29 0xE4 0xE7 0xD1 PUSH9 0xF0962CBCC83BB66910 0xDF 0xD6 PUSH15 0xC8FCA264736F6C634300080C003300 ","sourceMap":"514:21606:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20537:809;;;;;;;;;;-1:-1:-1;20537:809:26;;;;;:::i;:::-;;:::i;:::-;;20136:266;;;;;;;;;;-1:-1:-1;20136:266:26;;;;;:::i;:::-;;:::i;16153:333::-;;;;;;:::i;:::-;;:::i;19025:204::-;;;;;;;;;;-1:-1:-1;19025:204:26;;;;;:::i;:::-;;:::i;:::-;;;1406:25:30;;;1394:2;1379:18;19025:204:26;;;;;;;;16788:280;;;;;;:::i;:::-;;:::i;12168:266::-;;;;;;;;;;-1:-1:-1;12168:266:26;;;;;:::i;:::-;;:::i;8234:350::-;;;;;;:::i;:::-;;:::i;9688:234::-;;;;;;;;;;-1:-1:-1;9688:234:26;;;;;:::i;:::-;;:::i;2059:25::-;;;;;;;;;;-1:-1:-1;2059:25:26;;;;;;;-1:-1:-1;;;;;2059:25:26;;;;;;-1:-1:-1;;;;;2094:32:30;;;2076:51;;2064:2;2049:18;2059:25:26;1930:203:30;1990:33:26;;;;;;;;;;;;;;;12584:933;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;10655:205::-;;;;;;;;;;-1:-1:-1;10655:205:26;;;;;:::i;:::-;;:::i;11362:638::-;;;;;;;;;;-1:-1:-1;11362:638:26;;;;;:::i;:::-;;:::i;17105:1045::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;15567:300::-;;;;;;:::i;:::-;;:::i;19421:180::-;;;;;;;;;;-1:-1:-1;19421:180:26;;;;;:::i;:::-;;:::i;:::-;;;7504:14:30;;7497:22;7479:41;;7467:2;7452:18;19421:180:26;7339:187:30;10082:410:26;;;;;;;;;;-1:-1:-1;10082:410:26;;;;;:::i;:::-;;:::i;2153:39::-;;;;;;;;;;-1:-1:-1;2153:39:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2153:39:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;13684:665::-;;;;;;;;;;;;;:::i;8782:770::-;;;;;;;;;;-1:-1:-1;8782:770:26;;;;;:::i;:::-;;:::i;18394:248::-;;;;;;;;;;-1:-1:-1;18394:248:26;;;;;:::i;:::-;;:::i;21579:539::-;;;;;;;;;;-1:-1:-1;21579:539:26;;;;;:::i;:::-;;:::i;20537:809::-;-1:-1:-1;;;;;20649:20:26;;20609:37;20649:20;;;:6;:20;;;;;20732:29;;;;20792:25;;;;20649:48;;;;;20831:19;;20827:153;;20866:36;20873:29;;;20866:36;20916:53;20930:8;20940:12;20954:14;20916:13;:53::i;:::-;20993:15;;20989:143;;21024:32;21031:25;;;21024:32;;;21084:10;21070:51;;21084:10;;;-1:-1:-1;;;;;21084:10:26;21096:12;21110:10;21070:13;:51::i;:::-;21145:19;;;;:38;;-1:-1:-1;21168:15:26;;;21145:38;21141:199;;;21204:125;;;8294:25:30;;;8350:2;8335:18;;8328:34;;;-1:-1:-1;;;;;21204:125:26;;;;;8267:18:30;21204:125:26;;;;;;;;21141:199;20599:747;;;20537:809;:::o;20136:266::-;-1:-1:-1;;;;;20249:25:26;;20245:77;;20297:14;;-1:-1:-1;;;20297:14:26;;;;;;;;;;;20245:77;20331:10;:24;;-1:-1:-1;;;;;;20331:24:26;;-1:-1:-1;;;;;20331:24:26;;;;;;;;;;;;;20370:25;;20384:10;;;2076:51:30;;20370:25:26;;2064:2:30;2049:18;20370:25:26;;;;;;;;20136:266;:::o;16153:333::-;16324:31;16343:5;16350:4;16324:18;:31::i;:::-;16390:34;16404:4;16410:5;16417:6;16390:13;:34::i;:::-;16446:5;-1:-1:-1;;;;;16439:40:26;;16453:17;16464:5;16453:10;:17::i;:::-;16439:40;;;8294:25:30;;;8350:2;8335:18;;8328:34;;;8267:18;16439:40:26;8120:248:30;19025:204:26;-1:-1:-1;;;;;19183:13:26;;19132:7;19183:13;;;:6;:13;;;;;:25;19212:10;;19183:25;;;;;19163:17;19183:13;19163:10;:17::i;:::-;:45;;;;:::i;:::-;19162:60;;;;:::i;:::-;19155:67;19025:204;-1:-1:-1;;;19025:204:26:o;16788:280::-;16941:12;-1:-1:-1;;;;;16921:140:26;;16967:24;16978:12;16967:10;:24::i;:::-;-1:-1:-1;;;;;7984:19:26;;;17005:46;;17045:6;17005:46;;;17033:9;17005:46;16921:140;;;8294:25:30;;;8350:2;8335:18;;8328:34;;;;8267:18;16921:140:26;;;;;;;;16788:280;;:::o;12168:266::-;-1:-1:-1;;;;;12320:13:26;;;;;;:6;:13;;;;;;;;;:26;:46;;;12381;;;;;12349:17;1406:25:30;;1394:2;1379:18;;1260:177;8234:350:26;-1:-1:-1;;;;;7984:19:26;;8378:163;;-1:-1:-1;8425:9:26;8378:163;;;8465:65;-1:-1:-1;;;;;8465:30:26;;8496:10;8516:4;8523:6;8465:30;:65::i;:::-;8563:5;-1:-1:-1;;;;;8555:22:26;;8570:6;8555:22;;;;1406:25:30;;1394:2;1379:18;;1260:177;9688:234:26;-1:-1:-1;;;;;9827:13:26;;;;;;:6;:13;;;;;;;;;:39;;-1:-1:-1;;9827:39:26;;;;;;;;;;;;;;;9881:34;;9044:38:30;;;9881:34:26;;9017:18:30;9881:34:26;8900:188:30;12584:933:26;12772:24;12813:12;;12701:16;;;;12813:12;;12799:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12799:27:26;-1:-1:-1;12836:25:26;12878:12;;12772:54;;-1:-1:-1;12836:25:26;12878:12;;12864:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12864:27:26;;12836:55;;12907:7;12902:572;12920:12;;;;;;12916:16;;;;12902:572;;;12976:14;;;12953:20;12976:14;;;:11;:14;;;;;;;;;-1:-1:-1;;;;;12976:14:26;13026:20;;;12976:14;13026:20;;;;;;13085:35;;;;13138:19;;13134:330;;13177:42;13184:35;;;13177:42;13237:55;13251:10;13263:12;13277:14;13237:13;:55::i;:::-;13331:12;-1:-1:-1;;;;;13315:45:26;;13345:14;13315:45;;;;1406:25:30;;1394:2;1379:18;;1260:177;13315:45:26;;;;;;;;13391:12;13378:7;13386:1;13378:10;;;;;;;;;;:::i;:::-;;;;;;:25;-1:-1:-1;;;;;13378:25:26;;;-1:-1:-1;;;;;13378:25:26;;;;;13435:14;13421:8;13430:1;13421:11;;;;;;;;;;:::i;:::-;;;;;;:28;;;;;13134:330;12939:535;;;12934:3;;;;;:::i;:::-;;;;12902:572;;;-1:-1:-1;13492:7:26;;13501:8;;-1:-1:-1;12584:933:26;-1:-1:-1;12584:933:26:o;10655:205::-;-1:-1:-1;;;;;10776:13:26;;;;;;:6;:13;;;;;;;;;:31;;-1:-1:-1;;10776:31:26;;;;;;;;;;10822;;7479:41:30;;;10822:31:26;;7452:18:30;10822:31:26;7339:187:30;11362:638:26;11530:15;11573:9;11566:4;11548:15;11555:8;11548:4;:15;:::i;:::-;:22;;;;:::i;:::-;:34;;;;:::i;:::-;11530:52;;11596:8;:17;;11608:5;11596:17;11592:84;;11636:29;;-1:-1:-1;;;11636:29:26;;9074:6:30;9062:19;;11636:29:26;;;9044:38:30;9017:18;;11636:29:26;;;;;;;;11592:84;-1:-1:-1;;;;;11726:13:26;;11686:37;11726:13;;;:6;:13;;;;;;;;;:28;;11764:26;;;;;;-1:-1:-1;;11800:34:26;;;;;;;;;;;;;;;;-1:-1:-1;;11889:26:26;11844:35;;;;;;;-1:-1:-1;;11889:26:26;;;;;-1:-1:-1;;;11889:26:26;;;;;;;;;11931:62;;10014:34:30;;;10064:18;;;10057:43;10116:18;;;10109:43;;;;10183:2;10168:18;;10161:43;;;;11726:28:26;;:13;11931:62;;9976:3:30;9961:19;11931:62:26;;;;;;;;11520:480;;11362:638;;;;;:::o;17105:1045::-;17183:30;17236:12;;17149:22;;17183:30;17236:12;;17216:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;17183:66;;17264:7;17259:861;17277:12;;;;;;17273:16;;;;17259:861;;;17333:14;;;;17310:20;17333:14;;;:11;:14;;;;;;;;;-1:-1:-1;;;;;17333:14:26;17382:20;;;17333:14;17382:20;;;;;;;17361:41;;;;;;;;;;;;;;;;;17333:14;17361:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;17361:41:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17333:14;7984:19;17416:694;;17478:217;;;;;;;;17524:2;17478:217;;;;;;17562:12;-1:-1:-1;;;;;17478:217:26;;;;;;;;;;;;;;;;;;-1:-1:-1;;;17478:217:26;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;17478:217:26;;;;;;;17671:5;17478:217;;;17465:7;17473:1;17465:10;;;;;;;;;;:::i;:::-;;;;;;:230;;;;17416:694;;;17734:28;17780:12;17734:59;;17824:271;;;;;;;;17870:13;-1:-1:-1;;;;;17870:22:26;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17824:271;;;;;;17930:12;-1:-1:-1;;;;;17824:271:26;;;;;17970:13;-1:-1:-1;;;;;17970:18:26;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;17970:20:26;;;;;;;;;;;;:::i;:::-;17824:271;;;;18020:13;-1:-1:-1;;;;;18020:20:26;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;18020:22:26;;;;;;;;;;;;:::i;:::-;17824:271;;;;18071:5;17824:271;;;17811:7;17819:1;17811:10;;;;;;;;;;:::i;:::-;;;;;;:284;;;;17716:394;17416:694;17296:824;;17291:3;;;;;:::i;:::-;;;;17259:861;;;-1:-1:-1;18136:7:26;17105:1045;-1:-1:-1;17105:1045:26:o;15567:300::-;15691:31;15710:5;15717:4;15691:18;:31::i;:::-;15763:5;-1:-1:-1;;;;;15738:122:26;;15782:17;15793:5;15782:10;:17::i;19421:180::-;-1:-1:-1;;;;;19527:20:26;;19490:4;19527:20;;;:6;:20;;;;;;;;19506:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;19506:41:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19564:13;;:30;;;;-1:-1:-1;19582:12:26;;;19581:13;;19557:37;-1:-1:-1;;19421:180:26:o;10082:410::-;10184:12;;;;:17;10180:206;;10222:7;10217:159;10235:12;;;;;;10231:16;;;;10217:159;;;10276:14;;;;;;;:11;:14;;;;;;-1:-1:-1;;;;;10276:23:26;;;:14;;:23;10272:90;;;10330:13;;-1:-1:-1;;;10330:13:26;;;;;;;;;;;10272:90;10249:3;;;;:::i;:::-;;;;10217:159;;;;10180:206;10395:25;10407:12;;;;;;10395:25;;:11;:25;;;;;:33;;-1:-1:-1;;;;;;10395:33:26;-1:-1:-1;;;;;10395:33:26;;;;;10438:17;;-1:-1:-1;;10395:25:26;;;10438:17;;-1:-1:-1;;10438:17:26;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;10470:15;10479:5;10470:15;;;;;-1:-1:-1;;;;;2094:32:30;;;;2076:51;;2064:2;2049:18;;1930:203;13684:665:26;13805:24;13846:12;;13755:16;;;;13846:12;;13832:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13832:27:26;-1:-1:-1;13869:25:26;13911:12;;13805:54;;-1:-1:-1;13869:25:26;13911:12;;13897:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13897:27:26;;13869:55;;13940:7;13935:371;13953:12;;;;;;13949:16;;;;13935:371;;;14009:14;;;13986:20;14009:14;;;:11;:14;;;;;;;;;-1:-1:-1;;;;;14009:14:26;14059:20;;;14009:14;14059:20;;;;;;14118:35;;;;14171:19;;14167:129;;14223:12;14210:7;14218:1;14210:10;;;;;;;;;;:::i;:::-;;;;;;:25;-1:-1:-1;;;;;14210:25:26;;;-1:-1:-1;;;;;14210:25:26;;;;;14267:14;14253:8;14262:1;14253:11;;;;;;;;;;:::i;:::-;;;;;;:28;;;;;14167:129;13972:334;;;13967:3;;;;;:::i;:::-;;;;13935:371;;8782:770;8909:15;8927:17;8938:5;8927:10;:17::i;:::-;8909:35;-1:-1:-1;8958:12:26;;8954:431;;-1:-1:-1;;;;;8991:13:26;;;;;;:6;:13;;;;;:20;;;;;;8986:83;;9038:16;;-1:-1:-1;;;9038:16:26;;;;;;;;;;;8986:83;9408:7;9399:6;:16;9395:63;;;9440:7;9431:16;;9395:63;9467:40;9481:10;9493:5;9500:6;9467:13;:40::i;:::-;9531:5;-1:-1:-1;;;;;9522:23:26;;9538:6;9522:23;;;;1406:25:30;;1394:2;1379:18;;1260:177;9522:23:26;;;;;;;;8899:653;8782:770;;:::o;18394:248::-;-1:-1:-1;;;;;18532:13:26;;18481:20;18532:13;;;:6;:13;;;;;;;;:26;;18572:17;18568:68;;-1:-1:-1;18620:5:26;18568:68;18394:248;;;:::o;21579:539::-;21635:7;;-1:-1:-1;;;;;7984:19:26;;21679:159;;-1:-1:-1;21727:21:26;21679:159;;;21789:38;;-1:-1:-1;;;21789:38:26;;21821:4;21789:38;;;2076:51:30;-1:-1:-1;;;;;21789:23:26;;;;;2049:18:30;;21789:38:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21779:48;;21679:159;-1:-1:-1;;;;;21891:13:26;;21847:41;21891:13;;;:6;:13;;;;;;;;;21847:85;;;;;;;21891:41;;;21847:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;21847:85:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21961:56;;:7;:56;:::i;:::-;:105;;;;:::i;:::-;:150;;;;:::i;:::-;21942:169;21579:539;-1:-1:-1;;;;21579:539:26:o;7464:272::-;-1:-1:-1;;;;;7984:19:26;;7580:150;;7618:30;;-1:-1:-1;;;;;7618:22:26;;;:30;;;;;7641:6;;7618:30;;;;7641:6;7618:22;:30;;;;;;;;;;;;;;;;;;;7580:150;7679:40;-1:-1:-1;;;;;7679:26:26;;7706:4;7712:6;7679:26;:40::i;:::-;7464:272;;;:::o;14583:839::-;-1:-1:-1;;;;;14698:13:26;;14658:37;14698:13;;;:6;:13;;;;;:28;;14770:23;;14698:28;;14658:37;14797:5;;14763:30;;14770:23;;;;;14763:4;:30;:::i;:::-;14762:40;;;;:::i;:::-;14737:65;;14845:14;14812;:29;;;:47;;;;;;;:::i;:::-;;;;-1:-1:-1;;14965:19:26;;14936:18;;14988:5;;14958:26;;14965:19;;14958:4;:26;:::i;:::-;14957:36;;;;:::i;:::-;15037:23;;14936:57;;-1:-1:-1;15004:22:26;;15064:5;;15030:30;;15037:23;;;;;15030:4;:30;:::i;:::-;15029:40;;;;:::i;:::-;15004:65;;15112:14;15079;:29;;;:47;;;;;;;:::i;:::-;;;;-1:-1:-1;;15166:19:26;;15137:18;;15189:5;;15159:26;;-1:-1:-1;;;15166:19:26;;;;15159:4;:26;:::i;:::-;15158:36;;;;:::i;:::-;15137:57;;15233:10;15204:14;:25;;;:39;;;;;;;:::i;:::-;;;;-1:-1:-1;;15259:156:26;;;12274:25:30;;;12330:2;12315:18;;12308:34;;;12358:18;;;12351:34;;;12416:2;12401:18;;12394:34;;;-1:-1:-1;;;;;15259:156:26;;;;;12261:3:30;12246:19;15259:156:26;12043:391:30;1355:203:16;1482:68;;-1:-1:-1;;;;;12697:15:30;;;1482:68:16;;;12679:34:30;12749:15;;12729:18;;;12722:43;12781:18;;;12774:34;;;1455:96:16;;1475:5;;-1:-1:-1;;;1505:27:16;12614:18:30;;1482:68:16;;;;-1:-1:-1;;1482:68:16;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:68:16;-1:-1:-1;;;;;;1482:68:16;;;;;;;;;;1455:19;:96::i;941:175::-;1050:58;;-1:-1:-1;;;;;13011:32:30;;1050:58:16;;;12993:51:30;13060:18;;;13053:34;;;1023:86:16;;1043:5;;-1:-1:-1;;;1073:23:16;12966:18:30;;1050:58:16;12819:274:30;5173:642:16;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;-1:-1:-1;;;;;5618:27:16;;;:69;;;;;:::i;:::-;5592:95;;5705:10;:17;5726:1;5705:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5697:111;;;;-1:-1:-1;;;5697:111:16;;13550:2:30;5697:111:16;;;13532:21:30;13589:2;13569:18;;;13562:30;13628:34;13608:18;;;13601:62;-1:-1:-1;;;13679:18:30;;;13672:40;13729:19;;5697:111:16;13348:406:30;4108:223:17;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;-1:-1:-1;;;;;5487:11:17;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:17:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:17;;7902:286;;-1:-1:-1;;;;;1702:19:17;;;8113:60;;;;-1:-1:-1;;;8113:60:17;;14647:2:30;8113:60:17;;;14629:21:30;14686:2;14666:18;;;14659:30;14725:31;14705:18;;;14698:59;14774:18;;8113:60:17;14445:353:30;8113:60:17;-1:-1:-1;8208:10:17;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:17;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:131:30:-;-1:-1:-1;;;;;89:31:30;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:247::-;209:6;262:2;250:9;241:7;237:23;233:32;230:52;;;278:1;275;268:12;230:52;317:9;304:23;336:31;361:5;336:31;:::i;402:533::-;496:6;504;512;520;573:3;561:9;552:7;548:23;544:33;541:53;;;590:1;587;580:12;541:53;629:9;616:23;648:31;673:5;648:31;:::i;:::-;698:5;-1:-1:-1;755:2:30;740:18;;727:32;768:33;727:32;768:33;:::i;:::-;402:533;;820:7;;-1:-1:-1;;;;874:2:30;859:18;;846:32;;925:2;910:18;897:32;;402:533::o;940:315::-;1008:6;1016;1069:2;1057:9;1048:7;1044:23;1040:32;1037:52;;;1085:1;1082;1075:12;1037:52;1124:9;1111:23;1143:31;1168:5;1143:31;:::i;:::-;1193:5;1245:2;1230:18;;;;1217:32;;-1:-1:-1;;;940:315:30:o;1442:159::-;1509:20;;1569:6;1558:18;;1548:29;;1538:57;;1591:1;1588;1581:12;1606:319;1673:6;1681;1734:2;1722:9;1713:7;1709:23;1705:32;1702:52;;;1750:1;1747;1740:12;1702:52;1789:9;1776:23;1808:31;1833:5;1808:31;:::i;:::-;1858:5;-1:-1:-1;1882:37:30;1915:2;1900:18;;1882:37;:::i;:::-;1872:47;;1606:319;;;;;:::o;2138:1178::-;2406:2;2418:21;;;2488:13;;2391:18;;;2510:22;;;2358:4;;2585;;2563:2;2548:18;;;2612:15;;;2358:4;2655:195;2669:6;2666:1;2663:13;2655:195;;;2734:13;;-1:-1:-1;;;;;2730:39:30;2718:52;;2790:12;;;;2825:15;;;;2766:1;2684:9;2655:195;;;-1:-1:-1;;;2886:19:30;;;2866:18;;;2859:47;2956:13;;2978:21;;;3054:15;;;;3017:12;;;3089:1;3099:189;3115:8;3110:3;3107:17;3099:189;;;3184:15;;3170:30;;3261:17;;;;3222:14;;;;3143:1;3134:11;3099:189;;;-1:-1:-1;3305:5:30;;2138:1178;-1:-1:-1;;;;;;;2138:1178:30:o;3321:118::-;3407:5;3400:13;3393:21;3386:5;3383:32;3373:60;;3429:1;3426;3419:12;3444:382;3509:6;3517;3570:2;3558:9;3549:7;3545:23;3541:32;3538:52;;;3586:1;3583;3576:12;3538:52;3625:9;3612:23;3644:31;3669:5;3644:31;:::i;:::-;3694:5;-1:-1:-1;3751:2:30;3736:18;;3723:32;3764:30;3723:32;3764:30;:::i;:::-;3813:7;3803:17;;;3444:382;;;;;:::o;3831:537::-;3922:6;3930;3938;3946;3954;4007:3;3995:9;3986:7;3982:23;3978:33;3975:53;;;4024:1;4021;4014:12;3975:53;4063:9;4050:23;4082:31;4107:5;4082:31;:::i;:::-;4132:5;-1:-1:-1;4156:37:30;4189:2;4174:18;;4156:37;:::i;:::-;4146:47;;4212:37;4245:2;4234:9;4230:18;4212:37;:::i;:::-;4202:47;;4268:37;4301:2;4290:9;4286:18;4268:37;:::i;:::-;4258:47;;4324:38;4357:3;4346:9;4342:19;4324:38;:::i;:::-;4314:48;;3831:537;;;;;;;;:::o;4373:258::-;4445:1;4455:113;4469:6;4466:1;4463:13;4455:113;;;4545:11;;;4539:18;4526:11;;;4519:39;4491:2;4484:10;4455:113;;;4586:6;4583:1;4580:13;4577:48;;;-1:-1:-1;;4621:1:30;4603:16;;4596:27;4373:258::o;4636:::-;4678:3;4716:5;4710:12;4743:6;4738:3;4731:19;4759:63;4815:6;4808:4;4803:3;4799:14;4792:4;4785:5;4781:16;4759:63;:::i;:::-;4876:2;4855:15;-1:-1:-1;;4851:29:30;4842:39;;;;4883:4;4838:50;;4636:258;-1:-1:-1;;4636:258:30:o;4899:496::-;4977:6;5022:2;5014:5;5008:12;5004:21;4999:3;4992:34;5087:2;5079:4;5072:5;5068:16;5062:23;5058:32;5051:4;5046:3;5042:14;5035:56;5152:2;5144:4;5137:5;5133:16;5127:23;5123:32;5116:4;5111:3;5107:14;5100:56;5217:2;5209:4;5202:5;5198:16;5192:23;5188:32;5181:4;5176:3;5172:14;5165:56;;5270:4;5263:5;5259:16;5253:23;5246:4;5241:3;5237:14;5230:47;5326:4;5319:5;5315:16;5309:23;5302:4;5297:3;5293:14;5286:47;5382:4;5375:5;5371:16;5365:23;5358:4;5353:3;5349:14;5342:47;4899:496;;:::o;5400:1934::-;5604:4;5633:2;5673;5662:9;5658:18;5703:2;5692:9;5685:21;5726:6;5761;5755:13;5792:6;5784;5777:22;5818:2;5808:12;;5851:2;5840:9;5836:18;5829:25;;5913:2;5903:6;5900:1;5896:14;5885:9;5881:30;5877:39;5951:2;5943:6;5939:15;5972:1;5982:1323;5996:6;5993:1;5990:13;5982:1323;;;6061:22;;;-1:-1:-1;;6057:36:30;6045:49;;6117:13;;6191:9;;6202:4;6187:20;6172:36;;6255:11;;;6249:18;-1:-1:-1;;;;;6245:44:30;6228:15;;;6221:69;6329:11;;;6323:18;6153:6;6361:15;;;6354:27;;;6153:6;6408:48;6440:15;;;6323:18;6408:48;:::i;:::-;6394:62;;;6479:4;6532:2;6528;6524:11;6518:18;6585:6;6577;6573:19;6568:2;6560:6;6556:15;6549:44;6620:41;6654:6;6638:14;6620:41;:::i;:::-;6684:4;6729:11;;;6723:18;6792:21;;6785:29;6778:37;6761:15;;;6754:62;6874:23;;;6868:30;6861:38;6854:46;6848:3;6836:16;;6829:72;6949:23;;;6943:30;6975:6;6939:43;6933:3;6921:16;;6914:69;7027:23;;;7021:30;7015:3;7003:16;;6996:56;7093:23;;;;7087:30;;-1:-1:-1;6606:55:30;-1:-1:-1;7130:66:30;7191:3;7179:16;;7087:30;7130:66;:::i;:::-;7283:12;;;;7219:6;-1:-1:-1;;7248:15:30;;;;6018:1;6011:9;5982:1323;;;-1:-1:-1;7322:6:30;;5400:1934;-1:-1:-1;;;;;;;;5400:1934:30:o;7531:584::-;7865:14;;7858:22;7840:41;;7924:14;;7917:22;7912:2;7897:18;;7890:50;7988:6;7976:19;;7971:2;7956:18;;7949:47;8027:2;8012:18;;8005:34;;;7827:3;7812:19;;8048:61;8104:3;8089:19;;8081:6;8048:61;:::i;:::-;7531:584;;;;;;;;:::o;8373:127::-;8434:10;8429:3;8425:20;8422:1;8415:31;8465:4;8462:1;8455:15;8489:4;8486:1;8479:15;8505:168;8545:7;8611:1;8607;8603:6;8599:14;8596:1;8593:21;8588:1;8581:9;8574:17;8570:45;8567:71;;;8618:18;;:::i;:::-;-1:-1:-1;8658:9:30;;8505:168::o;8678:217::-;8718:1;8744;8734:132;;8788:10;8783:3;8779:20;8776:1;8769:31;8823:4;8820:1;8813:15;8851:4;8848:1;8841:15;8734:132;-1:-1:-1;8880:9:30;;8678:217::o;9093:127::-;9154:10;9149:3;9145:20;9142:1;9135:31;9185:4;9182:1;9175:15;9209:4;9206:1;9199:15;9225:127;9286:10;9281:3;9277:20;9274:1;9267:31;9317:4;9314:1;9307:15;9341:4;9338:1;9331:15;9357:175;9394:3;9438:4;9431:5;9427:16;9467:4;9458:7;9455:17;9452:43;;;9475:18;;:::i;:::-;9524:1;9511:15;;9357:175;-1:-1:-1;;9357:175:30:o;9537:224::-;9576:3;9604:6;9637:2;9634:1;9630:10;9667:2;9664:1;9660:10;9698:3;9694:2;9690:12;9685:3;9682:21;9679:47;;;9706:18;;:::i;:::-;9742:13;;9537:224;-1:-1:-1;;;;9537:224:30:o;10215:273::-;10283:6;10336:2;10324:9;10315:7;10311:23;10307:32;10304:52;;;10352:1;10349;10342:12;10304:52;10384:9;10378:16;10434:4;10427:5;10423:16;10416:5;10413:27;10403:55;;10454:1;10451;10444:12;10493:884;10573:6;10626:2;10614:9;10605:7;10601:23;10597:32;10594:52;;;10642:1;10639;10632:12;10594:52;10675:9;10669:16;10704:18;10745:2;10737:6;10734:14;10731:34;;;10761:1;10758;10751:12;10731:34;10799:6;10788:9;10784:22;10774:32;;10844:7;10837:4;10833:2;10829:13;10825:27;10815:55;;10866:1;10863;10856:12;10815:55;10895:2;10889:9;10917:2;10913;10910:10;10907:36;;;10923:18;;:::i;:::-;10998:2;10992:9;10966:2;11052:13;;-1:-1:-1;;11048:22:30;;;11072:2;11044:31;11040:40;11028:53;;;11096:18;;;11116:22;;;11093:46;11090:72;;;11142:18;;:::i;:::-;11182:10;11178:2;11171:22;11217:2;11209:6;11202:18;11257:7;11252:2;11247;11243;11239:11;11235:20;11232:33;11229:53;;;11278:1;11275;11268:12;11229:53;11291:55;11343:2;11338;11330:6;11326:15;11321:2;11317;11313:11;11291:55;:::i;11382:204::-;11420:3;11456:4;11453:1;11449:12;11488:4;11485:1;11481:12;11523:3;11517:4;11513:14;11508:3;11505:23;11502:49;;;11531:18;;:::i;:::-;11567:13;;11382:204;-1:-1:-1;;;11382:204:30:o;11591:184::-;11661:6;11714:2;11702:9;11693:7;11689:23;11685:32;11682:52;;;11730:1;11727;11720:12;11682:52;-1:-1:-1;11753:16:30;;11591:184;-1:-1:-1;11591:184:30:o;11780:125::-;11820:4;11848:1;11845;11842:8;11839:34;;;11853:18;;:::i;:::-;-1:-1:-1;11890:9:30;;11780:125::o;11910:128::-;11950:3;11981:1;11977:6;11974:1;11971:13;11968:39;;;11987:18;;:::i;:::-;-1:-1:-1;12023:9:30;;11910:128::o;13098:245::-;13165:6;13218:2;13206:9;13197:7;13193:23;13189:32;13186:52;;;13234:1;13231;13224:12;13186:52;13266:9;13260:16;13285:28;13307:5;13285:28;:::i;14166:274::-;14295:3;14333:6;14327:13;14349:53;14395:6;14390:3;14383:4;14375:6;14371:17;14349:53;:::i;:::-;14418:16;;;;;14166:274;-1:-1:-1;;14166:274:30:o;14803:220::-;14952:2;14941:9;14934:21;14915:4;14972:45;15013:2;15002:9;14998:18;14990:6;14972:45;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1624000","executionCost":"infinite","totalCost":"infinite"},"external":{"accountFees(address,uint256)":"infinite","addToken(address)":"infinite","cashIn(address,uint256)":"infinite","deposit(address,uint256)":"infinite","getBalance(address)":"infinite","getDividends()":"infinite","getMaxBetAmount(address,uint256)":"infinite","getMinBetAmount(address)":"2684","getTokens()":"infinite","harvestDividends()":"infinite","isAllowedToken(address)":"infinite","payout(address,address,uint256,uint256)":"infinite","setAllowedToken(address,bool)":"infinite","setBalanceRisk(address,uint16)":"26253","setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)":"infinite","setTeamWallet(address)":"25728","setTokenMinBetAmount(address,uint256)":"24002","teamWallet()":"2437","tokens(address)":"13769","treasury()":"infinite","withdraw(address,uint256)":"infinite","withdrawHouseEdgeAmount(address)":"infinite"},"internal":{"_allocateHouseEdge(address,uint256)":"infinite","_isGasToken(address)":"infinite","_safeTransfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"accountFees(address,uint256)":"ca7a8769","addToken(address)":"d48bfca7","cashIn(address,uint256)":"3138809d","deposit(address,uint256)":"47e7ef24","getBalance(address)":"f8b2cb4f","getDividends()":"ed442e14","getMaxBetAmount(address,uint256)":"278b39de","getMinBetAmount(address)":"f6b2a2f1","getTokens()":"aa6ca808","harvestDividends()":"802ad8fb","isAllowedToken(address)":"cbe230c3","payout(address,address,uint256,uint256)":"1f615023","setAllowedToken(address,bool)":"8aaa2284","setBalanceRisk(address,uint16)":"56f0406d","setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)":"a7fd00f0","setTeamWallet(address)":"1525ff7d","setTokenMinBetAmount(address,uint256)":"4297dcbe","teamWallet()":"59927044","tokens(address)":"e4860339","treasury()":"61d027b3","withdraw(address,uint256)":"f3fef3a3","withdrawHouseEdgeAmount(address)":"0ae30cb0"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasPendingBets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"splitSum\",\"type\":\"uint16\"}],\"name\":\"WrongHouseEdgeSplit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"AccountFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"AllocateHouseEdgeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"HouseEdgeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"}],\"name\":\"SetBalanceRisk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"SetTeamWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"SetTokenHouseEdgeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"SetTokenMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"accountFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cashIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividends\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BankV2.HouseEdgeSplit\",\"name\":\"houseEdgeSplit\",\"type\":\"tuple\"}],\"internalType\":\"struct BankV2.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"internalType\":\"struct BankV2.TokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestDividends\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"}],\"name\":\"setBalanceRisk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"setHouseEdgeSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMinBetAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BankV2.HouseEdgeSplit\",\"name\":\"houseEdgeSplit\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawHouseEdgeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"WrongHouseEdgeSplit(uint16)\":[{\"params\":{\"splitSum\":\"Sum of the house edge allocations rates.\"}}]},\"events\":{\"AccountFees(address,uint256,uint256)\":{\"params\":{\"fees\":\"Fees received from game.\",\"newBalance\":\"New token balance.\",\"token\":\"Address of the token.\"}},\"AddToken(address)\":{\"params\":{\"token\":\"Address of the token.\"}},\"AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"bank\":\"The number of tokens allocated to bank.\",\"dividend\":\"The number of tokens allocated as staking rewards.\",\"team\":\"The number of tokens allocated to the team.\",\"token\":\"Address of the token.\",\"treasury\":\"The number of tokens allocated to the treasury.\"}},\"CashIn(address,uint256,uint256)\":{\"params\":{\"amount\":\"Bet amount collected.\",\"newBalance\":\"New token balance.\",\"token\":\"Address of the token.\"}},\"Deposit(address,uint256)\":{\"params\":{\"amount\":\"The number of token deposited.\",\"token\":\"Address of the token.\"}},\"HarvestDividend(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens sent to the SwirlMaster.\",\"token\":\"Address of the token.\"}},\"HouseEdgeDistribution(address,uint256,uint256)\":{\"params\":{\"teamAmount\":\"The number of tokens sent to the team.\",\"token\":\"Address of the token.\",\"treasuryAmount\":\"The number of tokens sent to the treasury.\"}},\"Payout(address,uint256,uint256)\":{\"params\":{\"newBalance\":\"New token balance.\",\"profit\":\"Bet profit amount sent.\",\"token\":\"Address of the token.\"}},\"SetAllowedToken(address,bool)\":{\"params\":{\"allowed\":\"Whether the token is allowed for betting.\",\"token\":\"Address of the token.\"}},\"SetBalanceRisk(address,uint16)\":{\"params\":{\"balanceRisk\":\"Rate defining the balance risk.\"}},\"SetTeamWallet(address)\":{\"params\":{\"teamWallet\":\"The team wallet address.\"}},\"SetTokenMinBetAmount(address,uint256)\":{\"params\":{\"minBetAmount\":\"Minimum bet amount.\",\"token\":\"Address of the token.\"}},\"Withdraw(address,uint256)\":{\"params\":{\"amount\":\"The number of token withdrawn.\",\"token\":\"Address of the token.\"}}},\"kind\":\"dev\",\"methods\":{\"accountFees(address,uint256)\":{\"params\":{\"fees\":\"Bet amount and bet profit fees amount.\",\"token\":\"Address of the token.\"}},\"addToken(address)\":{\"params\":{\"token\":\"Address of the token.\"}},\"cashIn(address,uint256)\":{\"details\":\"In case of an ERC20, the bet amount should be transfered prior to this tx.In case of the gas token, the bet amount is sent along with this tx.\",\"params\":{\"amount\":\"Loss bet amount.\",\"tokenAddress\":\"Address of the token.\"}},\"constructor\":{\"params\":{\"teamWalletAddress\":\"Team wallet.\",\"treasuryAddress\":\"Treasury multi-sig wallet.\"}},\"deposit(address,uint256)\":{\"params\":{\"amount\":\"Number of tokens.\",\"token\":\"Address of the token.\"}},\"getBalance(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"The amount of token available for profits.\"}},\"getDividends()\":{\"returns\":{\"_0\":\"The list of tokens addresses.\",\"_1\":\"The list of tokens' amounts harvested.\"}},\"getMaxBetAmount(address,uint256)\":{\"details\":\"The multiplier should be at least 10000.\",\"params\":{\"multiplier\":\"The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\",\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"Maximum bet amount for the token.\"}},\"getMinBetAmount(address)\":{\"details\":\"The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.\",\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"minBetAmount\":\"Min bet amount.\"}},\"getTokens()\":{\"details\":\"For the front-end\"},\"harvestDividends()\":{\"returns\":{\"_0\":\"The list of tokens addresses.\",\"_1\":\"The list of tokens' amounts harvested.\"}},\"isAllowedToken(address)\":{\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"Whether the token is enabled for bets.\"}},\"payout(address,address,uint256,uint256)\":{\"params\":{\"fees\":\"Bet amount and bet profit fees amount.\",\"profit\":\"Number of tokens to be sent to the gamer.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"setAllowedToken(address,bool)\":{\"params\":{\"allowed\":\"Whether the token is enabled for bets.\",\"token\":\"Address of the token.\"}},\"setBalanceRisk(address,uint16)\":{\"params\":{\"balanceRisk\":\"Risk rate.\",\"token\":\"Address of the token.\"}},\"setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)\":{\"details\":\"`bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.\",\"params\":{\"_treasury\":\"Rate to be allocated to the treasury, on bet payout.\",\"bank\":\"Rate to be allocated to the bank, on bet payout.\",\"dividend\":\"Rate to be allocated as staking rewards, on bet payout.\",\"team\":\"Rate to be allocated to the team, on bet payout.\",\"token\":\"Address of the token.\"}},\"setTeamWallet(address)\":{\"params\":{\"_teamWallet\":\"The team wallet address.\"}},\"setTokenMinBetAmount(address,uint256)\":{\"params\":{\"token\":\"Address of the token.\",\"tokenMinBetAmount\":\"Minimum bet amount.\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"Number of tokens.\",\"token\":\"Address of the token.\"}},\"withdrawHouseEdgeAmount(address)\":{\"params\":{\"tokenAddress\":\"Address of the token.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AccessDenied()\":[{\"notice\":\"Reverting error when sender isn't allowed.\"}],\"TokenExists()\":[{\"notice\":\"Reverting error when trying to add an existing token.\"}],\"TokenHasPendingBets()\":[{\"notice\":\"Reverting error when token has pending bets on a game.\"}],\"TokenNotPaused()\":[{\"notice\":\"Reverting error when withdrawing a non paused token.\"}],\"WrongAddress()\":[{\"notice\":\"Reverting error when team wallet or treasury is the zero address.\"}],\"WrongHouseEdgeSplit(uint16)\":[{\"notice\":\"Reverting error when setting the house edge allocations, but the sum isn't 100%.\"}]},\"events\":{\"AccountFees(address,uint256,uint256)\":{\"notice\":\"Emitted after the game's fees are sent to the bank.\"},\"AddToken(address)\":{\"notice\":\"Emitted after a token is added.\"},\"AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted after the token's house edge is allocated.\"},\"CashIn(address,uint256,uint256)\":{\"notice\":\"Emitted after the bet amount is collected from the game smart contract.\"},\"Deposit(address,uint256)\":{\"notice\":\"Emitted after a token deposit.\"},\"HarvestDividend(address,uint256)\":{\"notice\":\"Emitted after the token's dividend allocation is distributed.\"},\"HouseEdgeDistribution(address,uint256,uint256)\":{\"notice\":\"Emitted after the token's treasury and team allocations are distributed.\"},\"Payout(address,uint256,uint256)\":{\"notice\":\"Emitted after the bet profit amount is sent to the user.\"},\"SetAllowedToken(address,bool)\":{\"notice\":\"Emitted after a token is allowed.\"},\"SetBalanceRisk(address,uint16)\":{\"notice\":\"Emitted after the balance risk is set.\"},\"SetTeamWallet(address)\":{\"notice\":\"Emitted after the team wallet is set.\"},\"SetTokenMinBetAmount(address,uint256)\":{\"notice\":\"Emitted after the minimum bet amount is set for a token.\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted after a token withdrawal.\"}},\"kind\":\"user\",\"methods\":{\"accountFees(address,uint256)\":{\"notice\":\"Receive game's fees.\"},\"addToken(address)\":{\"notice\":\"Adds a new token that'll be enabled for the games' betting. Token shouldn't exist yet.\"},\"cashIn(address,uint256)\":{\"notice\":\"Accounts a loss bet.\"},\"constructor\":{\"notice\":\"Initialize the contract's admin role to the deployer, and state variables.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit funds in the bank to allow gamers to win more. ERC20 token allowance should be given prior to deposit.\"},\"getBalance(address)\":{\"notice\":\"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance.\"},\"getDividends()\":{\"notice\":\"Get the available tokens dividends amounts.\"},\"getMaxBetAmount(address,uint256)\":{\"notice\":\"Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\"},\"getMinBetAmount(address)\":{\"notice\":\"Gets the token's min bet amount.\"},\"harvestDividends()\":{\"notice\":\"Harvests tokens dividends.\"},\"isAllowedToken(address)\":{\"notice\":\"Gets the token's allow status used on the games smart contracts.\"},\"payout(address,address,uint256,uint256)\":{\"notice\":\"Payouts a winning bet, and allocate the house edge fee.\"},\"setAllowedToken(address,bool)\":{\"notice\":\"Changes the token's bet permission.\"},\"setBalanceRisk(address,uint16)\":{\"notice\":\"Sets the new token balance risk.\"},\"setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)\":{\"notice\":\"Sets the token's house edge allocations for bet payout.\"},\"setTeamWallet(address)\":{\"notice\":\"Sets the new team wallet.\"},\"setTokenMinBetAmount(address,uint256)\":{\"notice\":\"Sets the minimum bet amount for a specific token.\"},\"teamWallet()\":{\"notice\":\"Team wallet.\"},\"tokens(address)\":{\"notice\":\"Maps tokens addresses to token configuration.\"},\"treasury()\":{\"notice\":\"Treasury multi-sig wallet.\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\"},\"withdrawHouseEdgeAmount(address)\":{\"notice\":\"Distributes the token's treasury and team allocations amounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BankV2.sol\":\"BankV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatible as KeeperCompatible} from \\\"./AutomationCompatible.sol\\\";\\nimport {AutomationBase as KeeperBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xa5f26a85ab9a927016e27af9f1ec33f878c28d8f06cb611e7fb2e189a5336a43\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/BankV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {AccessControlEnumerable} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\nimport {KeeperCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\ncontract BankV2 {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Token's house edge allocations struct.\\n    /// The games house edge is split into several allocations.\\n    /// The allocated amounts stays in the bank until authorized parties withdraw. They are subtracted from the balance.\\n    /// @param bank Rate to be allocated to the bank, on bet payout.\\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\\n    /// @param treasury Rate to be allocated to the treasury, on bet payout.\\n    /// @param team Rate to be allocated to the team, on bet payout.\\n    /// @param dividendAmount The number of tokens to be sent as staking rewards.\\n    /// @param treasuryAmount The number of tokens to be sent to the treasury.\\n    /// @param teamAmount The number of tokens to be sent to the team.\\n    struct HouseEdgeSplit {\\n        uint16 bank;\\n        uint16 dividend;\\n        uint16 treasury;\\n        uint16 team;\\n        uint256 dividendAmount;\\n        uint256 treasuryAmount;\\n        uint256 teamAmount;\\n    }\\n\\n    struct Token {\\n        bool allowed;\\n        bool paused;\\n        uint16 balanceRisk;\\n        uint256 minBetAmount;\\n        HouseEdgeSplit houseEdgeSplit;\\n    }\\n\\n    struct TokenMetadata {\\n        uint8 decimals;\\n        address tokenAddress;\\n        string name;\\n        string symbol;\\n        Token token;\\n    }\\n\\n    /// @notice Number of tokens added.\\n    uint8 private _tokensCount;\\n\\n    /// @notice Treasury multi-sig wallet.\\n    address public immutable treasury;\\n\\n    /// @notice Team wallet.\\n    address public teamWallet;\\n\\n    /// @notice Maps tokens addresses to token configuration.\\n    mapping(address => Token) public tokens;\\n\\n    /// @notice Maps tokens indexes to token address.\\n    mapping(uint8 => address) private _tokensList;\\n\\n    /// @notice Emitted after a token is added.\\n    /// @param token Address of the token.\\n    event AddToken(address token);\\n\\n    /// @notice Emitted after the balance risk is set.\\n    /// @param balanceRisk Rate defining the balance risk.\\n    event SetBalanceRisk(address indexed token, uint16 balanceRisk);\\n\\n    /// @notice Emitted after a token is allowed.\\n    /// @param token Address of the token.\\n    /// @param allowed Whether the token is allowed for betting.\\n    event SetAllowedToken(address indexed token, bool allowed);\\n\\n    /// @notice Emitted after the minimum bet amount is set for a token.\\n    /// @param token Address of the token.\\n    /// @param minBetAmount Minimum bet amount.\\n    event SetTokenMinBetAmount(address indexed token, uint256 minBetAmount);\\n\\n    /// @notice Emitted after a token deposit.\\n    /// @param token Address of the token.\\n    /// @param amount The number of token deposited.\\n    event Deposit(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after a token withdrawal.\\n    /// @param token Address of the token.\\n    /// @param amount The number of token withdrawn.\\n    event Withdraw(address indexed token, uint256 amount);\\n\\n    event SetTokenHouseEdgeSplit(\\n        address indexed token,\\n        uint16 bank,\\n        uint16 dividend,\\n        uint16 treasury,\\n        uint16 team\\n    );\\n\\n    /// @notice Emitted after the token's treasury and team allocations are distributed.\\n    /// @param token Address of the token.\\n    /// @param treasuryAmount The number of tokens sent to the treasury.\\n    /// @param teamAmount The number of tokens sent to the team.\\n    event HouseEdgeDistribution(\\n        address indexed token,\\n        uint256 treasuryAmount,\\n        uint256 teamAmount\\n    );\\n\\n    /// @notice Emitted after the token's dividend allocation is distributed.\\n    /// @param token Address of the token.\\n    /// @param amount The number of tokens sent to the SwirlMaster.\\n    event HarvestDividend(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after the token's house edge is allocated.\\n    /// @param token Address of the token.\\n    /// @param bank The number of tokens allocated to bank.\\n    /// @param dividend The number of tokens allocated as staking rewards.\\n    /// @param treasury The number of tokens allocated to the treasury.\\n    /// @param team The number of tokens allocated to the team.\\n    event AllocateHouseEdgeAmount(\\n        address indexed token,\\n        uint256 bank,\\n        uint256 dividend,\\n        uint256 treasury,\\n        uint256 team\\n    );\\n\\n    /// @notice Emitted after the game's fees are sent to the bank.\\n    /// @param token Address of the token.\\n    /// @param newBalance New token balance.\\n    /// @param fees Fees received from game.\\n    event AccountFees(address indexed token, uint256 newBalance, uint256 fees);\\n\\n    /// @notice Emitted after the bet profit amount is sent to the user.\\n    /// @param token Address of the token.\\n    /// @param newBalance New token balance.\\n    /// @param profit Bet profit amount sent.\\n    event Payout(address indexed token, uint256 newBalance, uint256 profit);\\n\\n    /// @notice Emitted after the bet amount is collected from the game smart contract.\\n    /// @param token Address of the token.\\n    /// @param newBalance New token balance.\\n    /// @param amount Bet amount collected.\\n    event CashIn(address indexed token, uint256 newBalance, uint256 amount);\\n\\n    /// @notice Reverting error when trying to add an existing token.\\n    error TokenExists();\\n    /// @notice Reverting error when setting the house edge allocations, but the sum isn't 100%.\\n    /// @param splitSum Sum of the house edge allocations rates.\\n    error WrongHouseEdgeSplit(uint16 splitSum);\\n    /// @notice Reverting error when sender isn't allowed.\\n    error AccessDenied();\\n    /// @notice Reverting error when team wallet or treasury is the zero address.\\n    error WrongAddress();\\n    /// @notice Reverting error when withdrawing a non paused token.\\n    error TokenNotPaused();\\n    /// @notice Reverting error when token has pending bets on a game.\\n    error TokenHasPendingBets();\\n\\n    /// @notice Emitted after the team wallet is set.\\n    /// @param teamWallet The team wallet address.\\n    event SetTeamWallet(address teamWallet);\\n\\n    /// @notice Initialize the contract's admin role to the deployer, and state variables.\\n    /// @param treasuryAddress Treasury multi-sig wallet.\\n    /// @param teamWalletAddress Team wallet.\\n    constructor(address treasuryAddress, address teamWalletAddress) {\\n        if (treasuryAddress == address(0)) {\\n            revert WrongAddress();\\n        }\\n\\n        treasury = treasuryAddress;\\n\\n        // The ownership should then be transfered to a multi-sig.\\n        // _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        setTeamWallet(teamWalletAddress);\\n    }\\n\\n    /// @notice Transfers a specific amount of token to an address.\\n    /// Uses native transfer or ERC20 transfer depending on the token.\\n    /// @dev The 0x address is considered the gas token.\\n    /// @param user Address of destination.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    function _safeTransfer(\\n        address user,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        if (_isGasToken(token)) {\\n            payable(user).transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(user, amount);\\n        }\\n    }\\n\\n    /// @notice Check if the token has the 0x address.\\n    /// @param token Address of the token.\\n    /// @return Whether the token's address is the 0x address.\\n    function _isGasToken(address token) private pure returns (bool) {\\n        return token == address(0);\\n    }\\n\\n    /// @notice Deposit funds in the bank to allow gamers to win more.\\n    /// ERC20 token allowance should be given prior to deposit.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    function deposit(address token, uint256 amount)\\n        external\\n        payable\\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        if (_isGasToken(token)) {\\n            amount = msg.value;\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n        emit Deposit(token, amount);\\n    }\\n\\n    /// @notice Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    function withdraw(address token, uint256 amount)\\n        public\\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        uint256 balance = getBalance(token);\\n        if (balance != 0) {\\n            if (!tokens[token].paused) {\\n                revert TokenNotPaused();\\n            }\\n\\n            // uint256 roleMemberCount = getRoleMemberCount(GAME_ROLE);\\n            // for (uint256 i; i < roleMemberCount; i++) {\\n            //     if (IGame(getRoleMember(GAME_ROLE, i)).hasPendingBets(token)) {\\n            //         revert TokenHasPendingBets();\\n            //     }\\n            // }\\n        }\\n\\n        if (amount > balance) {\\n            amount = balance;\\n        }\\n        _safeTransfer(msg.sender, token, amount);\\n        emit Withdraw(token, amount);\\n    }\\n\\n    /// @notice Sets the new token balance risk.\\n    /// @param token Address of the token.\\n    /// @param balanceRisk Risk rate.\\n    function setBalanceRisk(address token, uint16 balanceRisk)\\n        external\\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        tokens[token].balanceRisk = balanceRisk;\\n        emit SetBalanceRisk(token, balanceRisk);\\n    }\\n\\n    /// @notice Adds a new token that'll be enabled for the games' betting.\\n    /// Token shouldn't exist yet.\\n    /// @param token Address of the token.\\n    function addToken(\\n        address token // onlyRole(DEFAULT_ADMIN_ROLE)\\n    ) external {\\n        if (_tokensCount != 0) {\\n            for (uint8 i; i < _tokensCount; i++) {\\n                if (_tokensList[i] == token) {\\n                    revert TokenExists();\\n                }\\n            }\\n        }\\n        _tokensList[_tokensCount] = token;\\n        _tokensCount += 1;\\n        emit AddToken(token);\\n    }\\n\\n    /// @notice Changes the token's bet permission.\\n    /// @param token Address of the token.\\n    /// @param allowed Whether the token is enabled for bets.\\n    function setAllowedToken(address token, bool allowed)\\n        external\\n    // onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        tokens[token].allowed = allowed;\\n        emit SetAllowedToken(token, allowed);\\n    }\\n\\n    /// @notice Sets the token's house edge allocations for bet payout.\\n    /// @param token Address of the token.\\n    /// @param bank Rate to be allocated to the bank, on bet payout.\\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\\n    /// @param _treasury Rate to be allocated to the treasury, on bet payout.\\n    /// @param team Rate to be allocated to the team, on bet payout.\\n    /// @dev `bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.\\n    function setHouseEdgeSplit(\\n        address token,\\n        uint16 bank,\\n        uint16 dividend,\\n        uint16 _treasury,\\n        uint16 team\\n    ) external {\\n        uint16 splitSum = bank + dividend + team + _treasury;\\n        if (splitSum != 10000) {\\n            revert WrongHouseEdgeSplit(splitSum);\\n        }\\n\\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\\n        tokenHouseEdge.bank = bank;\\n        tokenHouseEdge.dividend = dividend;\\n        tokenHouseEdge.treasury = _treasury;\\n        tokenHouseEdge.team = team;\\n\\n        emit SetTokenHouseEdgeSplit(token, bank, dividend, _treasury, team);\\n    }\\n\\n    /// @notice Sets the minimum bet amount for a specific token.\\n    /// @param token Address of the token.\\n    /// @param tokenMinBetAmount Minimum bet amount.\\n    function setTokenMinBetAmount(address token, uint256 tokenMinBetAmount)\\n        external\\n    // onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        tokens[token].minBetAmount = tokenMinBetAmount;\\n        emit SetTokenMinBetAmount(token, tokenMinBetAmount);\\n    }\\n\\n    /// @notice Harvests tokens dividends.\\n    /// @return The list of tokens addresses.\\n    /// @return The list of tokens' amounts harvested.\\n    function harvestDividends()\\n        external\\n        returns (\\n            // onlyRole(SWIRLMASTER_ROLE)\\n            address[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        address[] memory _tokens = new address[](_tokensCount);\\n        uint256[] memory _amounts = new uint256[](_tokensCount);\\n\\n        for (uint8 i; i < _tokensCount; i++) {\\n            address tokenAddress = _tokensList[i];\\n            Token storage token = tokens[tokenAddress];\\n            uint256 dividendAmount = token.houseEdgeSplit.dividendAmount;\\n            if (dividendAmount != 0) {\\n                delete token.houseEdgeSplit.dividendAmount;\\n                _safeTransfer(msg.sender, tokenAddress, dividendAmount);\\n                emit HarvestDividend(tokenAddress, dividendAmount);\\n                _tokens[i] = tokenAddress;\\n                _amounts[i] = dividendAmount;\\n            }\\n        }\\n\\n        return (_tokens, _amounts);\\n    }\\n\\n    /// @notice Get the available tokens dividends amounts.\\n    /// @return The list of tokens addresses.\\n    /// @return The list of tokens' amounts harvested.\\n    function getDividends()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory _tokens = new address[](_tokensCount);\\n        uint256[] memory _amounts = new uint256[](_tokensCount);\\n\\n        for (uint8 i; i < _tokensCount; i++) {\\n            address tokenAddress = _tokensList[i];\\n            Token storage token = tokens[tokenAddress];\\n            uint256 dividendAmount = token.houseEdgeSplit.dividendAmount;\\n            if (dividendAmount != 0) {\\n                _tokens[i] = tokenAddress;\\n                _amounts[i] = dividendAmount;\\n            }\\n        }\\n\\n        return (_tokens, _amounts);\\n    }\\n\\n    /// @notice Splits the house edge fees and allocates them as dividends, to the partner, the bank, the treasury, and team.\\n    /// @param token Address of the token.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function _allocateHouseEdge(address token, uint256 fees) private {\\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\\n\\n        uint256 dividendAmount = (fees * tokenHouseEdge.dividend) / 10000;\\n        tokenHouseEdge.dividendAmount += dividendAmount;\\n\\n        // The bank also get allocated a share of the house edge.\\n        uint256 bankAmount = (fees * tokenHouseEdge.bank) / 10000;\\n\\n        uint256 treasuryAmount = (fees * tokenHouseEdge.treasury) / 10000;\\n        tokenHouseEdge.treasuryAmount += treasuryAmount;\\n\\n        uint256 teamAmount = (fees * tokenHouseEdge.team) / 10000;\\n        tokenHouseEdge.teamAmount += teamAmount;\\n\\n        emit AllocateHouseEdgeAmount(\\n            token,\\n            bankAmount,\\n            dividendAmount,\\n            treasuryAmount,\\n            teamAmount\\n        );\\n    }\\n\\n    /// @notice Receive game's fees.\\n    /// @param token Address of the token.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function accountFees(address token, uint256 fees)\\n        external\\n        payable\\n    // onlyRole(GAME_ROLE)\\n    {\\n        _allocateHouseEdge(token, fees);\\n\\n        emit AccountFees(\\n            token,\\n            getBalance(token),\\n            _isGasToken(token) ? msg.value : fees\\n        );\\n    }\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address payable user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees // onlyRole(GAME_ROLE)\\n    ) external payable {\\n        _allocateHouseEdge(token, fees);\\n\\n        // Pay the user\\n        _safeTransfer(user, token, profit);\\n        emit Payout(token, getBalance(token), profit);\\n    }\\n\\n    /// @notice Accounts a loss bet.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    function cashIn(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n    // onlyRole(GAME_ROLE)\\n    {\\n        emit CashIn(\\n            tokenAddress,\\n            getBalance(tokenAddress),\\n            _isGasToken(tokenAddress) ? msg.value : amount\\n        );\\n    }\\n\\n    /// @dev For the front-end\\n    function getTokens() external view returns (TokenMetadata[] memory) {\\n        TokenMetadata[] memory _tokens = new TokenMetadata[](_tokensCount);\\n        for (uint8 i; i < _tokensCount; i++) {\\n            address tokenAddress = _tokensList[i];\\n            Token memory token = tokens[tokenAddress];\\n            if (_isGasToken(tokenAddress)) {\\n                _tokens[i] = TokenMetadata({\\n                    decimals: 18,\\n                    tokenAddress: tokenAddress,\\n                    name: \\\"ETH\\\",\\n                    symbol: \\\"ETH\\\",\\n                    token: token\\n                });\\n            } else {\\n                IERC20Metadata erc20Metadata = IERC20Metadata(tokenAddress);\\n                _tokens[i] = TokenMetadata({\\n                    decimals: erc20Metadata.decimals(),\\n                    tokenAddress: tokenAddress,\\n                    name: erc20Metadata.name(),\\n                    symbol: erc20Metadata.symbol(),\\n                    token: token\\n                });\\n            }\\n        }\\n        return _tokens;\\n    }\\n\\n    /// @notice Gets the token's min bet amount.\\n    /// @param token Address of the token.\\n    /// @return minBetAmount Min bet amount.\\n    /// @dev The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.\\n    function getMinBetAmount(address token)\\n        external\\n        view\\n        returns (uint256 minBetAmount)\\n    {\\n        minBetAmount = tokens[token].minBetAmount;\\n        if (minBetAmount == 0) {\\n            minBetAmount = 10000;\\n        }\\n    }\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return (getBalance(token) * tokens[token].balanceRisk) / multiplier;\\n    }\\n\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param tokenAddress Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address tokenAddress) external view returns (bool) {\\n        Token memory token = tokens[tokenAddress];\\n        return token.allowed && !token.paused;\\n    }\\n\\n    // /// @notice Gets the token's owner.\\n    // /// @param token Address of the token.\\n    // /// @return Address of the owner.\\n    // function getTokenOwner(address token) external view returns (address) {\\n    //     address partner = tokens[token].partner;\\n    //     if (partner == address(0)) {\\n    //         return getRoleMember(DEFAULT_ADMIN_ROLE, 0);\\n    //     } else {\\n    //         return partner;\\n    //     }\\n    // }\\n\\n    /// @notice Sets the new team wallet.\\n    /// @param _teamWallet The team wallet address.\\n    function setTeamWallet(address _teamWallet)\\n        public\\n    // onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (_teamWallet == address(0)) {\\n            revert WrongAddress();\\n        }\\n        teamWallet = _teamWallet;\\n        emit SetTeamWallet(teamWallet);\\n    }\\n\\n    /// @notice Distributes the token's treasury and team allocations amounts.\\n    /// @param tokenAddress Address of the token.\\n    function withdrawHouseEdgeAmount(address tokenAddress) public {\\n        HouseEdgeSplit storage tokenHouseEdge = tokens[tokenAddress]\\n            .houseEdgeSplit;\\n        uint256 treasuryAmount = tokenHouseEdge.treasuryAmount;\\n        uint256 teamAmount = tokenHouseEdge.teamAmount;\\n        if (treasuryAmount != 0) {\\n            delete tokenHouseEdge.treasuryAmount;\\n            _safeTransfer(treasury, tokenAddress, treasuryAmount);\\n        }\\n        if (teamAmount != 0) {\\n            delete tokenHouseEdge.teamAmount;\\n            _safeTransfer(teamWallet, tokenAddress, teamAmount);\\n        }\\n        if (treasuryAmount != 0 || teamAmount != 0) {\\n            emit HouseEdgeDistribution(\\n                tokenAddress,\\n                treasuryAmount,\\n                teamAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice Gets the token's balance.\\n    /// The token's house edge allocation amounts are subtracted from the balance.\\n    /// @param token Address of the token.\\n    /// @return The amount of token available for profits.\\n    function getBalance(address token) public view returns (uint256) {\\n        uint256 balance;\\n        if (_isGasToken(token)) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = IERC20(token).balanceOf(address(this));\\n        }\\n        HouseEdgeSplit memory tokenHouseEdgeSplit = tokens[token]\\n            .houseEdgeSplit;\\n        return\\n            balance -\\n            tokenHouseEdgeSplit.dividendAmount -\\n            tokenHouseEdgeSplit.treasuryAmount -\\n            tokenHouseEdgeSplit.teamAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xf4548dd7618112d7e30ee1c480f4118c7e276e13079dde2ac50b0599728b5977\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3874,"contract":"contracts/BankV2.sol:BankV2","label":"_tokensCount","offset":0,"slot":"0","type":"t_uint8"},{"astId":3880,"contract":"contracts/BankV2.sol:BankV2","label":"teamWallet","offset":1,"slot":"0","type":"t_address"},{"astId":3886,"contract":"contracts/BankV2.sol:BankV2","label":"tokens","offset":0,"slot":"1","type":"t_mapping(t_address,t_struct(Token)3859_storage)"},{"astId":3891,"contract":"contracts/BankV2.sol:BankV2","label":"_tokensList","offset":0,"slot":"2","type":"t_mapping(t_uint8,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_struct(Token)3859_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BankV2.Token)","numberOfBytes":"32","value":"t_struct(Token)3859_storage"},"t_mapping(t_uint8,t_address)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => address)","numberOfBytes":"32","value":"t_address"},"t_struct(HouseEdgeSplit)3847_storage":{"encoding":"inplace","label":"struct BankV2.HouseEdgeSplit","members":[{"astId":3834,"contract":"contracts/BankV2.sol:BankV2","label":"bank","offset":0,"slot":"0","type":"t_uint16"},{"astId":3836,"contract":"contracts/BankV2.sol:BankV2","label":"dividend","offset":2,"slot":"0","type":"t_uint16"},{"astId":3838,"contract":"contracts/BankV2.sol:BankV2","label":"treasury","offset":4,"slot":"0","type":"t_uint16"},{"astId":3840,"contract":"contracts/BankV2.sol:BankV2","label":"team","offset":6,"slot":"0","type":"t_uint16"},{"astId":3842,"contract":"contracts/BankV2.sol:BankV2","label":"dividendAmount","offset":0,"slot":"1","type":"t_uint256"},{"astId":3844,"contract":"contracts/BankV2.sol:BankV2","label":"treasuryAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":3846,"contract":"contracts/BankV2.sol:BankV2","label":"teamAmount","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(Token)3859_storage":{"encoding":"inplace","label":"struct BankV2.Token","members":[{"astId":3849,"contract":"contracts/BankV2.sol:BankV2","label":"allowed","offset":0,"slot":"0","type":"t_bool"},{"astId":3851,"contract":"contracts/BankV2.sol:BankV2","label":"paused","offset":1,"slot":"0","type":"t_bool"},{"astId":3853,"contract":"contracts/BankV2.sol:BankV2","label":"balanceRisk","offset":2,"slot":"0","type":"t_uint16"},{"astId":3855,"contract":"contracts/BankV2.sol:BankV2","label":"minBetAmount","offset":0,"slot":"1","type":"t_uint256"},{"astId":3858,"contract":"contracts/BankV2.sol:BankV2","label":"houseEdgeSplit","offset":0,"slot":"2","type":"t_struct(HouseEdgeSplit)3847_storage"}],"numberOfBytes":"192"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"AccessDenied()":[{"notice":"Reverting error when sender isn't allowed."}],"TokenExists()":[{"notice":"Reverting error when trying to add an existing token."}],"TokenHasPendingBets()":[{"notice":"Reverting error when token has pending bets on a game."}],"TokenNotPaused()":[{"notice":"Reverting error when withdrawing a non paused token."}],"WrongAddress()":[{"notice":"Reverting error when team wallet or treasury is the zero address."}],"WrongHouseEdgeSplit(uint16)":[{"notice":"Reverting error when setting the house edge allocations, but the sum isn't 100%."}]},"events":{"AccountFees(address,uint256,uint256)":{"notice":"Emitted after the game's fees are sent to the bank."},"AddToken(address)":{"notice":"Emitted after a token is added."},"AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256)":{"notice":"Emitted after the token's house edge is allocated."},"CashIn(address,uint256,uint256)":{"notice":"Emitted after the bet amount is collected from the game smart contract."},"Deposit(address,uint256)":{"notice":"Emitted after a token deposit."},"HarvestDividend(address,uint256)":{"notice":"Emitted after the token's dividend allocation is distributed."},"HouseEdgeDistribution(address,uint256,uint256)":{"notice":"Emitted after the token's treasury and team allocations are distributed."},"Payout(address,uint256,uint256)":{"notice":"Emitted after the bet profit amount is sent to the user."},"SetAllowedToken(address,bool)":{"notice":"Emitted after a token is allowed."},"SetBalanceRisk(address,uint16)":{"notice":"Emitted after the balance risk is set."},"SetTeamWallet(address)":{"notice":"Emitted after the team wallet is set."},"SetTokenMinBetAmount(address,uint256)":{"notice":"Emitted after the minimum bet amount is set for a token."},"Withdraw(address,uint256)":{"notice":"Emitted after a token withdrawal."}},"kind":"user","methods":{"accountFees(address,uint256)":{"notice":"Receive game's fees."},"addToken(address)":{"notice":"Adds a new token that'll be enabled for the games' betting. Token shouldn't exist yet."},"cashIn(address,uint256)":{"notice":"Accounts a loss bet."},"constructor":{"notice":"Initialize the contract's admin role to the deployer, and state variables."},"deposit(address,uint256)":{"notice":"Deposit funds in the bank to allow gamers to win more. ERC20 token allowance should be given prior to deposit."},"getBalance(address)":{"notice":"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance."},"getDividends()":{"notice":"Get the available tokens dividends amounts."},"getMaxBetAmount(address,uint256)":{"notice":"Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier."},"getMinBetAmount(address)":{"notice":"Gets the token's min bet amount."},"harvestDividends()":{"notice":"Harvests tokens dividends."},"isAllowedToken(address)":{"notice":"Gets the token's allow status used on the games smart contracts."},"payout(address,address,uint256,uint256)":{"notice":"Payouts a winning bet, and allocate the house edge fee."},"setAllowedToken(address,bool)":{"notice":"Changes the token's bet permission."},"setBalanceRisk(address,uint16)":{"notice":"Sets the new token balance risk."},"setHouseEdgeSplit(address,uint16,uint16,uint16,uint16)":{"notice":"Sets the token's house edge allocations for bet payout."},"setTeamWallet(address)":{"notice":"Sets the new team wallet."},"setTokenMinBetAmount(address,uint256)":{"notice":"Sets the minimum bet amount for a specific token."},"teamWallet()":{"notice":"Team wallet."},"tokens(address)":{"notice":"Maps tokens addresses to token configuration."},"treasury()":{"notice":"Treasury multi-sig wallet."},"withdraw(address,uint256)":{"notice":"Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games."},"withdrawHouseEdgeAmount(address)":{"notice":"Distributes the token's treasury and team allocations amounts."}},"version":1}}},"contracts/CoinToss.sol":{"CoinTossV5":{"abi":[{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"bankAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"ExcessiveHouseEdge","type":"error"},{"inputs":[],"name":"ForbiddenToken","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"NotFulfilled","type":"error"},{"inputs":[],"name":"NotPendingBet","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"TokenHasPendingBets","type":"error"},{"inputs":[{"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"name":"UnderMinBetAmount","type":"error"},{"inputs":[],"name":"WrongGasValueToCoverFee","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"chainlinkVRFCost","type":"uint256"}],"name":"BetRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"face","type":"bool"}],"name":"PlaceBet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"face","type":"bool"},{"indexed":false,"internalType":"bool","name":"rolled","type":"bool"}],"name":"Roll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"bank","type":"address"}],"name":"SetBank","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint16","name":"houseEdge","type":"uint16"}],"name":"SetHouseEdge","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"bank","outputs":[{"internalType":"contract IBankV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"bets","outputs":[{"internalType":"bool","name":"resolved","type":"bool"},{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"blockTime","type":"uint256"},{"internalType":"bool","name":"betStatus","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"coinTossBets","outputs":[{"internalType":"bool","name":"face","type":"bool"},{"internalType":"bool","name":"rolled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getBetData","outputs":[{"components":[{"internalType":"bool","name":"resolved","type":"bool"},{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"blockTime","type":"uint256"},{"internalType":"bool","name":"betStatus","type":"bool"}],"internalType":"struct CoinTossV5.Bet","name":"betData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getBetStatus","outputs":[{"internalType":"bool","name":"status","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"dataLength","type":"uint256"}],"name":"getLastUserBets","outputs":[{"components":[{"components":[{"internalType":"bool","name":"resolved","type":"bool"},{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"blockTime","type":"uint256"},{"internalType":"bool","name":"betStatus","type":"bool"}],"internalType":"struct CoinTossV5.Bet","name":"bet","type":"tuple"},{"components":[{"internalType":"bool","name":"face","type":"bool"},{"internalType":"bool","name":"rolled","type":"bool"}],"internalType":"struct CoinTossV5.CoinTossBet","name":"coinTossBet","type":"tuple"}],"internalType":"struct CoinTossV5.FullCoinTossBet[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"hasPendingBets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"multiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"refundBet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"s_owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_randomWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_requestId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IBankV2","name":"_bank","type":"address"}],"name":"setBank","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint16","name":"houseEdge","type":"uint16"}],"name":"setHouseEdge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokens","outputs":[{"internalType":"uint16","name":"houseEdge","type":"uint16"},{"internalType":"uint64","name":"pendingCount","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"updateMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"face","type":"bool"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"wager","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"errors":{"UnderMinBetAmount(uint256)":[{"params":{"minBetAmount":"Bet amount."}}]},"events":{"BetRefunded(uint256,address,uint256,uint256)":{"params":{"amount":"Number of tokens refunded.","chainlinkVRFCost":"The Chainlink VRF cost refunded to player.","id":"The bet ID.","user":"Address of the gamer."}},"PlaceBet(uint256,address,address,uint256,bool)":{"params":{"amount":"The bet amount.","face":"The chosen coin face.","id":"The bet ID.","token":"Address of the token.","user":"Address of the gamer."}},"Roll(uint256,address,address,uint256,bool,bool)":{"params":{"amount":"The bet amount.","face":"The chosen coin face.","id":"The bet ID.","rolled":"The rolled coin face.","token":"Address of the token.","user":"Address of the gamer."}},"SetBank(address)":{"params":{"bank":"Address of the bank contract."}},"SetHouseEdge(address,uint16)":{"params":{"houseEdge":"House edge rate.","token":"Address of the token."}}},"kind":"dev","methods":{"getLastUserBets(address,uint256)":{"params":{"dataLength":"The amount of bets to return.","user":"Address of the gamer."},"returns":{"_0":"A list of Coin Toss bet."}},"getTokenBalance(address)":{"params":{"token":"Address of the token."},"returns":{"_0":"The amount of token available for profits."}},"hasPendingBets(address)":{"returns":{"_0":"Whether the token has pending bets."}},"multicall(bytes[])":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Receives and executes a batch of function calls on this contract."},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"refundBet(uint256)":{"params":{"id":"The Bet ID."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setBank(address)":{"params":{"_bank":"Address of the Bank contract."}},"setHouseEdge(address,uint16)":{"details":"The house edge rate couldn't exceed 4%.","params":{"houseEdge":"House edge rate.","token":"Address of the token."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"wager(bool,address,uint256)":{"params":{"face":"The chosen color number from the struct .","token":"Address of the token.","tokenAmount":"The number of tokens bet."}}},"stateVariables":{"coinTossBets":{"details":"Coin faces: true = Tails, false = Heads."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5267":{"entryPoint":null,"id":5267,"parameterSlots":2,"returnSlots":0},"@_68":{"entryPoint":null,"id":68,"parameterSlots":1,"returnSlots":0},"@_782":{"entryPoint":null,"id":782,"parameterSlots":0,"returnSlots":0},"@_898":{"entryPoint":null,"id":898,"parameterSlots":0,"returnSlots":0},"@_998":{"entryPoint":null,"id":998,"parameterSlots":0,"returnSlots":0},"@_checkOwner_813":{"entryPoint":476,"id":813,"parameterSlots":0,"returnSlots":0},"@_msgSender_1901":{"entryPoint":null,"id":1901,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_870":{"entryPoint":302,"id":870,"parameterSlots":1,"returnSlots":0},"@owner_799":{"entryPoint":null,"id":799,"parameterSlots":0,"returnSlots":1},"@setBank_5335":{"entryPoint":382,"id":5335,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_uint64t_address_fromMemory":{"entryPoint":573,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1048:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"111:366:30","statements":[{"body":{"nodeType":"YulBlock","src":"157:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"166:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"169:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"159:6:30"},"nodeType":"YulFunctionCall","src":"159:12:30"},"nodeType":"YulExpressionStatement","src":"159:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"132:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"141:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"128:3:30"},"nodeType":"YulFunctionCall","src":"128:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"153:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"124:3:30"},"nodeType":"YulFunctionCall","src":"124:32:30"},"nodeType":"YulIf","src":"121:52:30"},{"nodeType":"YulVariableDeclaration","src":"182:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"201:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"195:5:30"},"nodeType":"YulFunctionCall","src":"195:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"186:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"273:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"282:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"285:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"275:6:30"},"nodeType":"YulFunctionCall","src":"275:12:30"},"nodeType":"YulExpressionStatement","src":"275:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"233:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"244:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"259:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"263:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"255:3:30"},"nodeType":"YulFunctionCall","src":"255:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"267:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"251:3:30"},"nodeType":"YulFunctionCall","src":"251:18:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"240:3:30"},"nodeType":"YulFunctionCall","src":"240:30:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"230:2:30"},"nodeType":"YulFunctionCall","src":"230:41:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:30"},"nodeType":"YulFunctionCall","src":"223:49:30"},"nodeType":"YulIf","src":"220:69:30"},{"nodeType":"YulAssignment","src":"298:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"308:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"298:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"322:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"347:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"358:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"343:3:30"},"nodeType":"YulFunctionCall","src":"343:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"337:5:30"},"nodeType":"YulFunctionCall","src":"337:25:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"326:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"429:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"441:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"431:6:30"},"nodeType":"YulFunctionCall","src":"431:12:30"},"nodeType":"YulExpressionStatement","src":"431:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"384:7:30"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"397:7:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"414:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"419:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"410:3:30"},"nodeType":"YulFunctionCall","src":"410:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"423:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"406:3:30"},"nodeType":"YulFunctionCall","src":"406:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"393:3:30"},"nodeType":"YulFunctionCall","src":"393:33:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"381:2:30"},"nodeType":"YulFunctionCall","src":"381:46:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"374:6:30"},"nodeType":"YulFunctionCall","src":"374:54:30"},"nodeType":"YulIf","src":"371:74:30"},{"nodeType":"YulAssignment","src":"454:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"464:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"454:6:30"}]}]},"name":"abi_decode_tuple_t_uint64t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"69:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"80:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"92:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"100:6:30","type":""}],"src":"14:463:30"},{"body":{"nodeType":"YulBlock","src":"583:102:30","statements":[{"nodeType":"YulAssignment","src":"593:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"605:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"616:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"601:3:30"},"nodeType":"YulFunctionCall","src":"601:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"593:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"635:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"650:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"666:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"671:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"662:3:30"},"nodeType":"YulFunctionCall","src":"662:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"675:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"658:3:30"},"nodeType":"YulFunctionCall","src":"658:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"646:3:30"},"nodeType":"YulFunctionCall","src":"646:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"628:6:30"},"nodeType":"YulFunctionCall","src":"628:51:30"},"nodeType":"YulExpressionStatement","src":"628:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"552:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"563:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"574:4:30","type":""}],"src":"482:203:30"},{"body":{"nodeType":"YulBlock","src":"864:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"881:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"892:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"874:6:30"},"nodeType":"YulFunctionCall","src":"874:21:30"},"nodeType":"YulExpressionStatement","src":"874:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"915:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"926:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"911:3:30"},"nodeType":"YulFunctionCall","src":"911:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"931:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"904:6:30"},"nodeType":"YulFunctionCall","src":"904:30:30"},"nodeType":"YulExpressionStatement","src":"904:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"965:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"950:3:30"},"nodeType":"YulFunctionCall","src":"950:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"970:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"943:6:30"},"nodeType":"YulFunctionCall","src":"943:62:30"},"nodeType":"YulExpressionStatement","src":"943:62:30"},{"nodeType":"YulAssignment","src":"1014:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1026:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1037:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1022:3:30"},"nodeType":"YulFunctionCall","src":"1022:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1014:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"841:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"855:4:30","type":""}],"src":"690:356:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint64t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(64, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a0604052600480546001600160a01b03191673bd13f08b8352a3635218ab9418e340c60d6eb4181790557f121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4600555600680546602000300030d406001600160501b03199091161790556003600e553480156200007b57600080fd5b506040516200258f3803806200258f8339810160408190526200009e916200023d565b6004546001600160a01b0316608052620000b8336200012e565b6000805460ff60a01b1916905560018055600454600380546001600160a01b039092166001600160a01b03199283161790556009805433921691909117905560028054600160a01b600160e01b031916600160a01b6001600160401b0385160217905562000126816200017e565b505062000292565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000188620001dc565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb2612440679060200160405180910390a150565b6000546001600160a01b031633146200023b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b600080604083850312156200025157600080fd5b82516001600160401b03811681146200026957600080fd5b60208401519092506001600160a01b03811681146200028757600080fd5b809150509250929050565b6080516122da620002b56000396000818161067401526106b601526122da6000f3fe6080604052600436106101815760003560e01c8063715018a6116100d1578063c2fb579f1161008a578063e397824011610064578063e397824014610553578063e486033914610573578063e89e106a146105d7578063f2fde38b146105ed57600080fd5b8063c2fb579f146104b6578063e051ece9146104e3578063e1fdb4b41461053357600080fd5b8063715018a6146103e957806376cdb03b146103fe57806378bcde22146104365780638456cb59146104565780638da5cb5b1461046b578063ac9650d81461048957600080fd5b80633aecd0e31161013e5780635bfe1630116101185780635bfe16301461034a5780635c975abb146103775780635ffe61461461039657806361f14f11146103b657600080fd5b80633aecd0e3146102c057806350462ea0146102e0578063594043fd146102f357600080fd5b8063090d23b91461018657806312065fe0146101a85780631b3ed722146101ca5780631d3c7b91146101e05780631fe543e3146101f657806322af00fa14610216575b600080fd5b34801561019257600080fd5b506101a66101a1366004611d01565b61060d565b005b3480156101b457600080fd5b50475b6040519081526020015b60405180910390f35b3480156101d657600080fd5b506101b7600e5481565b3480156101ec57600080fd5b506101b760075481565b34801561020257600080fd5b506101a6610211366004611d34565b610669565b34801561022257600080fd5b5061027b610231366004611dfd565b600b6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff808616966101009096046001600160a01b0390811696951694911687565b6040805197151588526001600160a01b03968716602089015294909516938601939093526060850191909152608084015260a0830152151560c082015260e0016101c1565b3480156102cc57600080fd5b506101b76102db366004611d01565b6106f6565b6101a66102ee366004611e24565b61077e565b3480156102ff57600080fd5b5061033a61030e366004611d01565b6001600160a01b03166000908152600a60205260409020546201000090046001600160401b0316151590565b60405190151581526020016101c1565b34801561035657600080fd5b5061036a610365366004611dfd565b610827565b6040516101c19190611ebb565b34801561038357600080fd5b50600054600160a01b900460ff1661033a565b3480156103a257600080fd5b506101a66103b1366004611dfd565b6108a6565b3480156103c257600080fd5b5061033a6103d1366004611dfd565b6000908152600b602052604090206005015460ff1690565b3480156103f557600080fd5b506101a66108b3565b34801561040a57600080fd5b5060025461041e906001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561044257600080fd5b506101a6610451366004611ec9565b6108c7565b34801561046257600080fd5b506101a661099e565b34801561047757600080fd5b506000546001600160a01b031661041e565b34801561049557600080fd5b506104a96104a4366004611f09565b6109c8565b6040516101c19190611fd5565b3480156104c257600080fd5b506104d66104d1366004612037565b610abd565b6040516101c19190612063565b3480156104ef57600080fd5b5061051c6104fe366004611dfd565b600d6020526000908152604090205460ff8082169161010090041682565b6040805192151583529015156020830152016101c1565b34801561053f57600080fd5b506101a661054e366004611dfd565b610bf0565b34801561055f57600080fd5b5060095461041e906001600160a01b031681565b34801561057f57600080fd5b506105b561058e366004611d01565b600a6020526000908152604090205461ffff8116906201000090046001600160401b031682565b6040805161ffff90931683526001600160401b039091166020830152016101c1565b3480156105e357600080fd5b506101b760085481565b3480156105f957600080fd5b506101a6610608366004611d01565b610d57565b610615610dcd565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb2612440679060200160405180910390a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e85760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6106f28282610e27565b5050565b6000806001600160a01b03831661070f57504792915050565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077791906120be565b9392505050565b61078661103f565b600061079d838361079861271061108c565b61109c565b606081810180516000908152600d6020908152604091829020805460ff19168a1515908117909155828601518287015194516080880151855191825293810193909352928201529394506001600160a01b03908116939116917f388b4fad58a4c74ad944d05888d8e83b64e28a3a71e0381a02c7d98440c63ac3910160405180910390a350505050565b61082f611c72565b506000908152600b6020908152604091829020825160e081018452815460ff808216151583526001600160a01b03610100909204821694830194909452600183015416938101939093526002810154606084015260038101546080840152600481015460a08401526005015416151560c082015290565b6108ae610dcd565b600e55565b6108bb610dcd565b6108c5600061152e565b565b6108cf610dcd565b6101908161ffff1611156108f657604051631c2d5dd360e21b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260409020546201000090046001600160401b03161561093c5760405163055212b760e51b815260040160405180910390fd5b6001600160a01b0382166000818152600a6020908152604091829020805461ffff191661ffff861690811790915591519182527f7dfd3ecb8ac83242184c019f85ca408558f2ac0a5a19af6be2a4aee697eac812910160405180910390a25050565b6109a6610dcd565b600054600160a01b900460ff16156109c0576108c561157e565b6108c56115d3565b6060816001600160401b038111156109e2576109e2611d1e565b604051908082528060200260200182016040528015610a1557816020015b6060815260200190600190039081610a005790505b50905060005b82811015610ab557610a8530858584818110610a3957610a396120d7565b9050602002810190610a4b91906120ed565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061161692505050565b828281518110610a9757610a976120d7565b60200260200101819052508080610aad90612150565b915050610a1b565b505b92915050565b60606000610acb848461163b565b9050600081516001600160401b03811115610ae857610ae8611d1e565b604051908082528060200260200182016040528015610b2157816020015b610b0e611cae565b815260200190600190039081610b065790505b50905060005b8251811015610be7576040518060400160405280848381518110610b4d57610b4d6120d7565b60200260200101518152602001600d6000868581518110610b7057610b706120d7565b60209081029190910181015160600151825281810192909252604090810160002081518083019092525460ff808216151583526101009091041615159181019190915290528251839083908110610bc957610bc96120d7565b60200260200101819052508080610bdf90612150565b915050610b27565b50949350505050565b610bf861180d565b6000818152600b60205260409020805460ff16151560011415610c2e576040516310d5f2bd60e11b815260040160405180910390fd5b6004810154610c3e90601e61216b565b421015610c5e576040516303de361f60e11b815260040160405180910390fd5b60018101546001600160a01b03166000908152600a6020526040902080546201000090046001600160401b0316816002610c9783612183565b82546001600160401b039182166101009390930a928302919092021990911617905550815460ff1916600190811783558201546001600160a01b0316610d1e57815460038301546040516101009092046001600160a01b0316916108fc82150291906000818181858888f19350505050158015610d18573d6000803e3d6000fd5b50610d49565b815460038301546001840154610d49926001600160a01b039182169261010090910490911690611867565b5050610d5460018055565b50565b610d5f610dcd565b6001600160a01b038116610dc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106df565b610d548161152e565b6000546001600160a01b031633146108c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106df565b6000828152600d60209081526040808320600b909252822083519192909160029085908390610e5857610e586120d7565b6020026020010151610e6a91906121bc565b6040805180820190915260008082526001602083015291925090818360028110610e9657610e966120d7565b6020020151855461ff00198116610100831515908102918217895592935060ff91821691161715151415610fa9578354600160ff199182168117808755600587018054909316821790925585015460038601546001600160a01b03918216926101009004909116906000610f098261108c565b9050806000610f1886856118cf565b90506000610f2682846121d0565b600254604051631f61502360e01b81526001600160a01b0389811660048301528a811660248301526044820184905260648201869052929350911690631f61502390608401600060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b5050505050505050505050610fc2565b835460ff19908116600117855560058501805490911690555b6001840154845460028601546003870154885460408051938452602084019290925260ff161515828201528415156060830152516001600160a01b0393841693610100909304909216917f61a9f4ed6fa1d9a386035ef6d352d6e5ff07bd93eb58025400302b462eb9b0639181900360800190a350505050505050565b600054600160a01b900460ff16156108c55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106df565b6000600e5482610ab791906121e7565b6110a4611c72565b6110ac61103f565b6110b461180d565b6001600160a01b038481166000818152600a602052604090819020600254915163cbe230c360e01b8152600481019390935292169063cbe230c390602401602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111339190612206565b15806111425750805461ffff16155b156111605760405163c455905560e01b815260040160405180910390fd5b60025460405163f6b2a2f160e01b81526001600160a01b038781166004830181905233939015928892600092169063f6b2a2f190602401602060405180830381865afa1580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d891906120be565b9050808210156111fd576040516289563d60e21b8152600481018290526024016106df565b6002546040516313c59cef60e11b81526001600160a01b038b81166004830152602482018a9052600092169063278b39de90604401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127391906120be565b9050808311156112c85783156112c4576001600160a01b0385166108fc61129a83866121d0565b6040518115909202916000818181858888f193505050501580156112c2573d6000803e3d6000fd5b505b8092505b50506003546005546002546006546040516305d3b1d360e41b81526004810193909352600160a01b9091046001600160401b03166024830152640100000000810461ffff16604483015263ffffffff808216606484015266010000000000009091041660848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906120be565b60088190555060006040518060e00160405280600015158152602001856001600160a01b031681526020018a6001600160a01b031681526020016008548152602001838152602001428152602001600015158152509050600c6000856001600160a01b03166001600160a01b03168152602001908152602001600020600854908060018154018082558091505060019003906000526020600020016000909190919091505580600b6000600854815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff0219169083151502179055509050508261151f5760025461151f906001600160a01b038b81169187911685611905565b94505050505061077760018055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611586611943565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6115db61103f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115b63390565b6060610777838360405180606001604052806027815260200161227e60279139611993565b6001600160a01b0382166000908152600c6020908152604080832080548251818502810185019093528083526060949383018282801561169a57602002820191906000526020600020905b815481526020019060010190808311611686575b50508351939450505050838110156116b0578093505b6000846001600160401b038111156116ca576116ca611d1e565b60405190808252806020026020018201604052801561170357816020015b6116f0611c72565b8152602001906001900390816116e85790505b5090508415611804576000825b61171a87856121d0565b81111561180157600b6000866117316001856121d0565b81518110611741576117416120d7565b6020908102919091018101518252818101929092526040908101600020815160e081018352815460ff808216151583526001600160a01b03610100909204821695830195909552600183015416928101929092526002810154606083015260038101546080830152600481015460a083015260050154909116151560c082015283518490849081106117d5576117d56120d7565b602002602001018190525081806117eb90612150565b92505080806117f990612223565b915050611710565b50505b95945050505050565b600260015414156118605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106df565b6002600155565b6040516001600160a01b0383166024820152604481018290526118ca90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a0b565b505050565b6001600160a01b0382166000908152600a6020526040812054612710906118fb90849061ffff166121e7565b610777919061223a565b6040516001600160a01b038085166024830152831660448201526064810182905261193d9085906323b872dd60e01b90608401611893565b50505050565b600054600160a01b900460ff166108c55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106df565b6060600080856001600160a01b0316856040516119b0919061224e565b600060405180830381855af49150503d80600081146119eb576040519150601f19603f3d011682016040523d82523d6000602084013e6119f0565b606091505b5091509150611a0186838387611ae0565b9695505050505050565b6000611a60826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b5e9092919063ffffffff16565b9050805160001480611a81575080806020019051810190611a819190612206565b6118ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106df565b60608315611b4c578251611b45576001600160a01b0385163b611b455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106df565b5081611b56565b611b568383611b6d565b949350505050565b6060611b568484600085611b97565b815115611b7d5781518083602001fd5b8060405162461bcd60e51b81526004016106df919061226a565b606082471015611bf85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106df565b600080866001600160a01b03168587604051611c14919061224e565b60006040518083038185875af1925050503d8060008114611c51576040519150601f19603f3d011682016040523d82523d6000602084013e611c56565b606091505b5091509150611c6787838387611ae0565b979650505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060400160405280611cc1611c72565b8152602001611ce760405180604001604052806000151581526020016000151581525090565b905290565b6001600160a01b0381168114610d5457600080fd5b600060208284031215611d1357600080fd5b813561077781611cec565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611d4757600080fd5b823591506020808401356001600160401b0380821115611d6657600080fd5b818601915086601f830112611d7a57600080fd5b813581811115611d8c57611d8c611d1e565b8060051b604051601f19603f83011681018181108582111715611db157611db1611d1e565b604052918252848201925083810185019189831115611dcf57600080fd5b938501935b82851015611ded57843584529385019392850192611dd4565b8096505050505050509250929050565b600060208284031215611e0f57600080fd5b5035919050565b8015158114610d5457600080fd5b600080600060608486031215611e3957600080fd5b8335611e4481611e16565b92506020840135611e5481611cec565b929592945050506040919091013590565b805115158252602081015160018060a01b0380821660208501528060408401511660408501525050606081015160608301526080810151608083015260a081015160a083015260c0810151151560c08301525050565b60e08101610ab78284611e65565b60008060408385031215611edc57600080fd5b8235611ee781611cec565b9150602083013561ffff81168114611efe57600080fd5b809150509250929050565b60008060208385031215611f1c57600080fd5b82356001600160401b0380821115611f3357600080fd5b818501915085601f830112611f4757600080fd5b813581811115611f5657600080fd5b8660208260051b8501011115611f6b57600080fd5b60209290920196919550909350505050565b60005b83811015611f98578181015183820152602001611f80565b8381111561193d5750506000910152565b60008151808452611fc1816020860160208601611f7d565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561202a57603f19888603018452612018858351611fa9565b94509285019290850190600101611ffc565b5092979650505050505050565b6000806040838503121561204a57600080fd5b823561205581611cec565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015611801578351612094848251611e65565b8501518051151560e08501528501511515610100840152928401926101209092019160010161207f565b6000602082840312156120d057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261210457600080fd5b8301803591506001600160401b0382111561211e57600080fd5b60200191503681900382131561213357600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156121645761216461213a565b5060010190565b6000821982111561217e5761217e61213a565b500190565b60006001600160401b0382168061219c5761219c61213a565b6000190192915050565b634e487b7160e01b600052601260045260246000fd5b6000826121cb576121cb6121a6565b500690565b6000828210156121e2576121e261213a565b500390565b60008160001904831182151516156122015761220161213a565b500290565b60006020828403121561221857600080fd5b815161077781611e16565b6000816122325761223261213a565b506000190190565b600082612249576122496121a6565b500490565b60008251612260818460208701611f7d565b9190910192915050565b6020815260006107776020830184611fa956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204fb91405c17bdb5ad62d8a106e09d7f765d0856ed1bc354f31e6eef2e925a02864736f6c634300080c0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0xBD13F08B8352A3635218AB9418E340C60D6EB418 OR SWAP1 SSTORE PUSH32 0x121A143066E0F2F08B620784AF77CCCB35C6242460B4A8EE251B4B416ABAEBD4 PUSH1 0x5 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH7 0x2000300030D40 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x3 PUSH1 0xE SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x258F CODESIZE SUB DUP1 PUSH3 0x258F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x9E SWAP2 PUSH3 0x23D JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH3 0xB8 CALLER PUSH3 0x12E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP1 SSTORE PUSH1 0x4 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD CALLER SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE PUSH3 0x126 DUP2 PUSH3 0x17E JUMP JUMPDEST POP POP PUSH3 0x292 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x188 PUSH3 0x1DC JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x10F5824683D64A0712038F2244E046B174A1CC57FBB8556BFDA5FFB261244067 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x23B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x22DA PUSH3 0x2B5 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x674 ADD MSTORE PUSH2 0x6B6 ADD MSTORE PUSH2 0x22DA PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x181 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xC2FB579F GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE3978240 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE3978240 EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xE89E106A EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC2FB579F EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0xE051ECE9 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xE1FDB4B4 EQ PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x76CDB03B EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x78BCDE22 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x5BFE1630 GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x5BFE1630 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0x5FFE6146 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x61F14F11 EQ PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x50462EA0 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x594043FD EQ PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90D23B9 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x1B3ED722 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x1D3C7B91 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x22AF00FA EQ PUSH2 0x216 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D34 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x231 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 SWAP1 SWAP6 ADD SLOAD PUSH1 0xFF DUP1 DUP7 AND SWAP7 PUSH2 0x100 SWAP1 SWAP7 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP7 SWAP6 AND SWAP5 SWAP2 AND DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE SWAP5 SWAP1 SWAP6 AND SWAP4 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1E24 JUMP JUMPDEST PUSH2 0x77E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33A PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x36A PUSH2 0x365 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1EBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x33A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0x8A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33A PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x8B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x41E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC9 JUMP JUMPDEST PUSH2 0x8C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x99E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x41E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A9 PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1FD5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D6 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x2063 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51C PUSH2 0x4FE CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0xBF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x41E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B5 PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x615 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x10F5824683D64A0712038F2244E046B174A1CC57FBB8556BFDA5FFB261244067 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x6E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F2 DUP3 DUP3 PUSH2 0xE27 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x70F JUMPI POP SELFBALANCE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x753 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x777 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x786 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79D DUP4 DUP4 PUSH2 0x798 PUSH2 0x2710 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x109C JUMP JUMPDEST PUSH1 0x60 DUP2 DUP2 ADD DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP11 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 DUP7 ADD MLOAD DUP3 DUP8 ADD MLOAD SWAP5 MLOAD PUSH1 0x80 DUP9 ADD MLOAD DUP6 MLOAD SWAP2 DUP3 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP3 ADD MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP2 AND SWAP2 PUSH32 0x388B4FAD58A4C74AD944D05888D8E83B64E28A3A71E0381A02C7D98440C63AC3 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x82F PUSH2 0x1C72 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8AE PUSH2 0xDCD JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0x8BB PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x8C5 PUSH1 0x0 PUSH2 0x152E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8CF PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x190 DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1C2D5DD3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO PUSH2 0x93C JUMPI PUSH1 0x40 MLOAD PUSH4 0x55212B7 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7DFD3ECB8AC83242184C019F85CA408558F2AC0A5A19AF6BE2A4AEE697EAC812 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x9A6 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x8C5 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x8C5 PUSH2 0x15D3 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E2 JUMPI PUSH2 0x9E2 PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA15 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA00 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAB5 JUMPI PUSH2 0xA85 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xA39 JUMPI PUSH2 0xA39 PUSH2 0x20D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xA4B SWAP2 SWAP1 PUSH2 0x20ED JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1616 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA97 JUMPI PUSH2 0xA97 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xAAD SWAP1 PUSH2 0x2150 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA1B JUMP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xACB DUP5 DUP5 PUSH2 0x163B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAE8 JUMPI PUSH2 0xAE8 PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB21 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xB0E PUSH2 0x1CAE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB06 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xBE7 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB4D JUMPI PUSH2 0xB4D PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xD PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB70 JUMPI PUSH2 0xB70 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 MSTORE DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xBC9 JUMPI PUSH2 0xBC9 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xBDF SWAP1 PUSH2 0x2150 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB27 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBF8 PUSH2 0x180D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xC2E JUMPI PUSH1 0x40 MLOAD PUSH4 0x10D5F2BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SLOAD PUSH2 0xC3E SWAP1 PUSH1 0x1E PUSH2 0x216B JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DE361F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH1 0x2 PUSH2 0xC97 DUP4 PUSH2 0x2183 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 AND PUSH2 0x100 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP3 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP DUP2 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP4 SSTORE DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD1E JUMPI DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x100 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x8FC DUP3 ISZERO MUL SWAP2 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xD18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD49 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0xD49 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x100 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH2 0x1867 JUMP JUMPDEST POP POP PUSH2 0xD54 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD5F PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH2 0xD54 DUP2 PUSH2 0x152E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP4 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x2 SWAP1 DUP6 SWAP1 DUP4 SWAP1 PUSH2 0xE58 JUMPI PUSH2 0xE58 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE6A SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP2 DUP4 PUSH1 0x2 DUP2 LT PUSH2 0xE96 JUMPI PUSH2 0xE96 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP6 SLOAD PUSH2 0xFF00 NOT DUP2 AND PUSH2 0x100 DUP4 ISZERO ISZERO SWAP1 DUP2 MUL SWAP2 DUP3 OR DUP10 SSTORE SWAP3 SWAP4 POP PUSH1 0xFF SWAP2 DUP3 AND SWAP2 AND OR ISZERO ISZERO EQ ISZERO PUSH2 0xFA9 JUMPI DUP4 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR DUP1 DUP8 SSTORE PUSH1 0x5 DUP8 ADD DUP1 SLOAD SWAP1 SWAP4 AND DUP3 OR SWAP1 SWAP3 SSTORE DUP6 ADD SLOAD PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x100 SWAP1 DIV SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 PUSH2 0xF09 DUP3 PUSH2 0x108C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 PUSH2 0xF18 DUP7 DUP6 PUSH2 0x18CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF26 DUP3 DUP5 PUSH2 0x21D0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1F615023 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x1F615023 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP PUSH2 0xFC2 JUMP JUMPDEST DUP4 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 OR DUP6 SSTORE PUSH1 0x5 DUP6 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP5 SLOAD PUSH1 0x2 DUP7 ADD SLOAD PUSH1 0x3 DUP8 ADD SLOAD DUP9 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF AND ISZERO ISZERO DUP3 DUP3 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 PUSH2 0x100 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP2 PUSH32 0x61A9F4ED6FA1D9A386035EF6D352D6E5FF07BD93EB58025400302B462EB9B063 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SLOAD DUP3 PUSH2 0xAB7 SWAP2 SWAP1 PUSH2 0x21E7 JUMP JUMPDEST PUSH2 0x10A4 PUSH2 0x1C72 JUMP JUMPDEST PUSH2 0x10AC PUSH2 0x103F JUMP JUMPDEST PUSH2 0x10B4 PUSH2 0x180D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 SLOAD SWAP2 MLOAD PUSH4 0xCBE230C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND SWAP1 PUSH4 0xCBE230C3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x110F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1133 SWAP2 SWAP1 PUSH2 0x2206 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1142 JUMPI POP DUP1 SLOAD PUSH2 0xFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x1160 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC4559055 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF6B2A2F1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD DUP2 SWAP1 MSTORE CALLER SWAP4 SWAP1 ISZERO SWAP3 DUP9 SWAP3 PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xF6B2A2F1 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11D8 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT ISZERO PUSH2 0x11FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x89563D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x13C59CEF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x278B39DE SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1273 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x12C8 JUMPI DUP4 ISZERO PUSH2 0x12C4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x8FC PUSH2 0x129A DUP4 DUP7 PUSH2 0x21D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x12C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP1 SWAP3 POP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x5 SLOAD PUSH1 0x2 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH5 0x100000000 DUP2 DIV PUSH2 0xFFFF AND PUSH1 0x44 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x64 DUP5 ADD MSTORE PUSH7 0x1000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1364 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1388 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH1 0xC PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 SLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP1 PUSH1 0xB PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP3 PUSH2 0x151F JUMPI PUSH1 0x2 SLOAD PUSH2 0x151F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP2 DUP8 SWAP2 AND DUP6 PUSH2 0x1905 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x777 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1586 PUSH2 0x1943 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x15DB PUSH2 0x103F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x15B6 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x777 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x227E PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1993 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x169A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1686 JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP4 SWAP5 POP POP POP POP DUP4 DUP2 LT ISZERO PUSH2 0x16B0 JUMPI DUP1 SWAP4 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x16CA JUMPI PUSH2 0x16CA PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1703 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x16F0 PUSH2 0x1C72 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x16E8 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP3 JUMPDEST PUSH2 0x171A DUP8 DUP6 PUSH2 0x21D0 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1801 JUMPI PUSH1 0xB PUSH1 0x0 DUP7 PUSH2 0x1731 PUSH1 0x1 DUP6 PUSH2 0x21D0 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1741 JUMPI PUSH2 0x1741 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x5 ADD SLOAD SWAP1 SWAP2 AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE DUP4 MLOAD DUP5 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x17D5 JUMPI PUSH2 0x17D5 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP1 PUSH2 0x17EB SWAP1 PUSH2 0x2150 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x17F9 SWAP1 PUSH2 0x2223 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1710 JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1860 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x18CA SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1A0B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2710 SWAP1 PUSH2 0x18FB SWAP1 DUP5 SWAP1 PUSH2 0xFFFF AND PUSH2 0x21E7 JUMP JUMPDEST PUSH2 0x777 SWAP2 SWAP1 PUSH2 0x223A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x193D SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x1893 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x19B0 SWAP2 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x19EB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A01 DUP7 DUP4 DUP4 DUP8 PUSH2 0x1AE0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A60 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B5E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1A81 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1A81 SWAP2 SWAP1 PUSH2 0x2206 JUMP JUMPDEST PUSH2 0x18CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B4C JUMPI DUP3 MLOAD PUSH2 0x1B45 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1B45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST POP DUP2 PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B56 DUP4 DUP4 PUSH2 0x1B6D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B56 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1B97 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1B7D JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DF SWAP2 SWAP1 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1BF8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1C14 SWAP2 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1C67 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1AE0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1CC1 PUSH2 0x1C72 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CE7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x777 DUP2 PUSH2 0x1CEC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1D66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D8C JUMPI PUSH2 0x1D8C PUSH2 0x1D1E JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1DB1 JUMPI PUSH2 0x1DB1 PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x1DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1DED JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x1DD4 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1E44 DUP2 PUSH2 0x1E16 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E54 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP6 ADD MSTORE DUP1 PUSH1 0x40 DUP5 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE POP POP PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0xAB7 DUP3 DUP5 PUSH2 0x1E65 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1EE7 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1EFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F98 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1F80 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x193D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FC1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x202A JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2018 DUP6 DUP4 MLOAD PUSH2 0x1FA9 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1FFC JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x204A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2055 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1801 JUMPI DUP4 MLOAD PUSH2 0x2094 DUP5 DUP3 MLOAD PUSH2 0x1E65 JUMP JUMPDEST DUP6 ADD MLOAD DUP1 MLOAD ISZERO ISZERO PUSH1 0xE0 DUP6 ADD MSTORE DUP6 ADD MLOAD ISZERO ISZERO PUSH2 0x100 DUP5 ADD MSTORE SWAP3 DUP5 ADD SWAP3 PUSH2 0x120 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x207F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x211E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2164 JUMPI PUSH2 0x2164 PUSH2 0x213A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x217E JUMPI PUSH2 0x217E PUSH2 0x213A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP1 PUSH2 0x219C JUMPI PUSH2 0x219C PUSH2 0x213A JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x21CB JUMPI PUSH2 0x21CB PUSH2 0x21A6 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x21E2 JUMPI PUSH2 0x21E2 PUSH2 0x213A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2201 JUMPI PUSH2 0x2201 PUSH2 0x213A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x777 DUP2 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2232 JUMPI PUSH2 0x2232 PUSH2 0x213A JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2249 JUMPI PUSH2 0x2249 PUSH2 0x21A6 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2260 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1F7D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x777 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FA9 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212204FB914 SDIV 0xC1 PUSH28 0xDB5AD62D8A106E09D7F765D0856ED1BC354F31E6EEF2E925A0286473 PUSH16 0x6C634300080C00330000000000000000 ","sourceMap":"685:14219:27:-:0;;;931:67;;;-1:-1:-1;;;;;;931:67:27;956:42;931:67;;;1237:66;1211:92;;1310:32;;;1560:19;-1:-1:-1;;;;;;1560:19:27;;;;;;1433:1;8970:29;;5217:286;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5299:14;;-1:-1:-1;;;;;5299:14:27;5599:32:3;;936::10;719:10:18;936:18:10;:32::i;:::-;1006:5:11;996:15;;-1:-1:-1;;;;996:15:11;;;-1:-1:-1;1821:22:12;;5369:14:27::1;::::0;5329:11:::1;:55:::0;;-1:-1:-1;;;;;5369:14:27;;::::1;-1:-1:-1::0;;;;;;5329:55:27;;::::1;;::::0;;5394:7:::1;:20:::0;;5404:10:::1;5394:20:::0;::::1;::::0;;;::::1;::::0;;5424:16:::1;:33:::0;;-1:-1:-1;;;;;;;;5424:33:27::1;-1:-1:-1::0;;;;;;;;5424:33:27;::::1;;;::::0;;5467:29:::1;5483:11:::0;5467:7:::1;:29::i;:::-;5217:286:::0;;685:14219;;2426:187:10;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:10;;;-1:-1:-1;;;;;;2534:17:10;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;6019:239:27:-;1094:13:10;:11;:13::i;:::-;6201:4:27::1;:12:::0;;-1:-1:-1;;;;;;6201:12:27::1;-1:-1:-1::0;;;;;6201:12:27;::::1;::::0;;::::1;::::0;;;6228:23:::1;::::0;628:51:30;;;6228:23:27::1;::::0;616:2:30;601:18;6228:23:27::1;;;;;;;6019:239:::0;:::o;1359:130:10:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:10;719:10:18;1422:23:10;1414:68;;;;-1:-1:-1;;;1414:68:10;;892:2:30;1414:68:10;;;874:21:30;;;911:18;;;904:30;970:34;950:18;;;943:62;1022:18;;1414:68:10;;;;;;;;1359:130::o;14:463:30:-;92:6;100;153:2;141:9;132:7;128:23;124:32;121:52;;;169:1;166;159:12;121:52;195:16;;-1:-1:-1;;;;;240:30:30;;230:41;;220:69;;285:1;282;275:12;220:69;358:2;343:18;;337:25;308:5;;-1:-1:-1;;;;;;393:33:30;;381:46;;371:74;;441:1;438;431:12;371:74;464:7;454:17;;;14:463;;;;;:::o;690:356::-;685:14219:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_1510":{"entryPoint":6667,"id":1510,"parameterSlots":2,"returnSlots":0},"@_checkOwner_813":{"entryPoint":3533,"id":813,"parameterSlots":0,"returnSlots":0},"@_getFees_5303":{"entryPoint":6351,"id":5303,"parameterSlots":2,"returnSlots":1},"@_getLastUserBets_5664":{"entryPoint":5691,"id":5664,"parameterSlots":2,"returnSlots":1},"@_getPayout_5800":{"entryPoint":4236,"id":5800,"parameterSlots":1,"returnSlots":1},"@_isGasToken_5390":{"entryPoint":null,"id":5390,"parameterSlots":1,"returnSlots":1},"@_msgSender_1901":{"entryPoint":null,"id":1901,"parameterSlots":0,"returnSlots":1},"@_newBet_5554":{"entryPoint":4252,"id":5554,"parameterSlots":3,"returnSlots":1},"@_nonReentrantAfter_1032":{"entryPoint":null,"id":1032,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_1024":{"entryPoint":6157,"id":1024,"parameterSlots":0,"returnSlots":0},"@_pause_962":{"entryPoint":5587,"id":962,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_935":{"entryPoint":4159,"id":935,"parameterSlots":0,"returnSlots":0},"@_requirePaused_946":{"entryPoint":6467,"id":946,"parameterSlots":0,"returnSlots":0},"@_revert_1888":{"entryPoint":7021,"id":1888,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_870":{"entryPoint":5422,"id":870,"parameterSlots":1,"returnSlots":0},"@_unpause_978":{"entryPoint":5502,"id":978,"parameterSlots":0,"returnSlots":0},"@bank_5074":{"entryPoint":null,"id":5074,"parameterSlots":0,"returnSlots":0},"@bets_5161":{"entryPoint":null,"id":5161,"parameterSlots":0,"returnSlots":0},"@coinTossBets_5207":{"entryPoint":null,"id":5207,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_6040":{"entryPoint":3623,"id":6040,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_1713":{"entryPoint":7063,"id":1713,"parameterSlots":4,"returnSlots":1},"@functionCall_1649":{"entryPoint":7006,"id":1649,"parameterSlots":3,"returnSlots":1},"@functionDelegateCall_1776":{"entryPoint":5654,"id":1776,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1805":{"entryPoint":6547,"id":1805,"parameterSlots":3,"returnSlots":1},"@getBalance_5856":{"entryPoint":null,"id":5856,"parameterSlots":0,"returnSlots":1},"@getBetData_5682":{"entryPoint":2087,"id":5682,"parameterSlots":1,"returnSlots":1},"@getBetStatus_5700":{"entryPoint":null,"id":5700,"parameterSlots":1,"returnSlots":1},"@getLastUserBets_6124":{"entryPoint":2749,"id":6124,"parameterSlots":2,"returnSlots":1},"@getTokenBalance_5894":{"entryPoint":1782,"id":5894,"parameterSlots":1,"returnSlots":1},"@hasPendingBets_5283":{"entryPoint":null,"id":5283,"parameterSlots":1,"returnSlots":1},"@isContract_1577":{"entryPoint":null,"id":1577,"parameterSlots":1,"returnSlots":1},"@multicall_1965":{"entryPoint":2504,"id":1965,"parameterSlots":2,"returnSlots":1},"@multiplier_5557":{"entryPoint":null,"id":5557,"parameterSlots":0,"returnSlots":0},"@owner_799":{"entryPoint":null,"id":799,"parameterSlots":0,"returnSlots":1},"@pause_6058":{"entryPoint":2462,"id":6058,"parameterSlots":0,"returnSlots":0},"@paused_923":{"entryPoint":null,"id":923,"parameterSlots":0,"returnSlots":1},"@rawFulfillRandomWords_103":{"entryPoint":1641,"id":103,"parameterSlots":2,"returnSlots":0},"@refundBet_5787":{"entryPoint":3056,"id":5787,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_827":{"entryPoint":2227,"id":827,"parameterSlots":0,"returnSlots":0},"@s_owner_5100":{"entryPoint":null,"id":5100,"parameterSlots":0,"returnSlots":0},"@s_randomWords_5096":{"entryPoint":null,"id":5096,"parameterSlots":0,"returnSlots":0},"@s_requestId_5098":{"entryPoint":null,"id":5098,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_1243":{"entryPoint":6405,"id":1243,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1216":{"entryPoint":6247,"id":1216,"parameterSlots":3,"returnSlots":0},"@setBank_5335":{"entryPoint":1549,"id":5335,"parameterSlots":1,"returnSlots":0},"@setHouseEdge_5374":{"entryPoint":2247,"id":5374,"parameterSlots":2,"returnSlots":0},"@tokens_5135":{"entryPoint":null,"id":5135,"parameterSlots":0,"returnSlots":0},"@transferOwnership_850":{"entryPoint":3415,"id":850,"parameterSlots":1,"returnSlots":0},"@updateMultiplier_5569":{"entryPoint":2214,"id":5569,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1844":{"entryPoint":6880,"id":1844,"parameterSlots":4,"returnSlots":1},"@wager_5844":{"entryPoint":1918,"id":5844,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint16":{"entryPoint":7881,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8247,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":7945,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8710,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_boolt_addresst_uint256":{"entryPoint":7716,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_contract$_IBankV2_$7313":{"entryPoint":7425,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7677,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":8382,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7476,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_bytes":{"entryPoint":8105,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_Bet":{"entryPoint":7781,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8782,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256__to_t_address_payable_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8149,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8291,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__to_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_contract$_IBankV2_$7313__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8810,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Bet_$5150_memory_ptr__to_t_struct$_Bet_$5150_memory_ptr__fromStack_reversed":{"entryPoint":7867,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":8429,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":8555,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":8762,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":8679,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8656,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":8061,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":8739,"id":null,"parameterSlots":1,"returnSlots":1},"decrement_t_uint64":{"entryPoint":8579,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":8528,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":8636,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":8506,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8614,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8407,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7454,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bool":{"entryPoint":7702,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_contract_IBankV2":{"entryPoint":7404,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18273:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"68:86:30","statements":[{"body":{"nodeType":"YulBlock","src":"132:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"144:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"134:6:30"},"nodeType":"YulFunctionCall","src":"134:12:30"},"nodeType":"YulExpressionStatement","src":"134:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"91:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"102:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"117:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"122:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"113:3:30"},"nodeType":"YulFunctionCall","src":"113:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"126:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"109:3:30"},"nodeType":"YulFunctionCall","src":"109:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"98:3:30"},"nodeType":"YulFunctionCall","src":"98:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"88:2:30"},"nodeType":"YulFunctionCall","src":"88:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"81:6:30"},"nodeType":"YulFunctionCall","src":"81:50:30"},"nodeType":"YulIf","src":"78:70:30"}]},"name":"validator_revert_contract_IBankV2","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"57:5:30","type":""}],"src":"14:140:30"},{"body":{"nodeType":"YulBlock","src":"245:186:30","statements":[{"body":{"nodeType":"YulBlock","src":"291:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"303:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"293:6:30"},"nodeType":"YulFunctionCall","src":"293:12:30"},"nodeType":"YulExpressionStatement","src":"293:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"266:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"275:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"262:3:30"},"nodeType":"YulFunctionCall","src":"262:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"287:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"258:3:30"},"nodeType":"YulFunctionCall","src":"258:32:30"},"nodeType":"YulIf","src":"255:52:30"},{"nodeType":"YulVariableDeclaration","src":"316:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"342:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"329:12:30"},"nodeType":"YulFunctionCall","src":"329:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"320:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"395:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"361:33:30"},"nodeType":"YulFunctionCall","src":"361:40:30"},"nodeType":"YulExpressionStatement","src":"361:40:30"},{"nodeType":"YulAssignment","src":"410:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"420:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"410:6:30"}]}]},"name":"abi_decode_tuple_t_contract$_IBankV2_$7313","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"211:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"222:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"234:6:30","type":""}],"src":"159:272:30"},{"body":{"nodeType":"YulBlock","src":"537:76:30","statements":[{"nodeType":"YulAssignment","src":"547:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"570:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"555:3:30"},"nodeType":"YulFunctionCall","src":"555:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"547:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"589:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"600:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"582:6:30"},"nodeType":"YulFunctionCall","src":"582:25:30"},"nodeType":"YulExpressionStatement","src":"582:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"506:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"517:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"528:4:30","type":""}],"src":"436:177:30"},{"body":{"nodeType":"YulBlock","src":"650:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"667:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"674:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"679:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"670:3:30"},"nodeType":"YulFunctionCall","src":"670:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"660:6:30"},"nodeType":"YulFunctionCall","src":"660:31:30"},"nodeType":"YulExpressionStatement","src":"660:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"707:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"710:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"700:6:30"},"nodeType":"YulFunctionCall","src":"700:15:30"},"nodeType":"YulExpressionStatement","src":"700:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"731:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"734:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"724:6:30"},"nodeType":"YulFunctionCall","src":"724:15:30"},"nodeType":"YulExpressionStatement","src":"724:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"618:127:30"},{"body":{"nodeType":"YulBlock","src":"862:1071:30","statements":[{"body":{"nodeType":"YulBlock","src":"908:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"917:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"920:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"910:6:30"},"nodeType":"YulFunctionCall","src":"910:12:30"},"nodeType":"YulExpressionStatement","src":"910:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"883:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"892:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"879:3:30"},"nodeType":"YulFunctionCall","src":"879:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"904:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"875:3:30"},"nodeType":"YulFunctionCall","src":"875:32:30"},"nodeType":"YulIf","src":"872:52:30"},{"nodeType":"YulAssignment","src":"933:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"956:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"943:12:30"},"nodeType":"YulFunctionCall","src":"943:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"933:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"975:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"985:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"979:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"996:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1027:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1038:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:30"},"nodeType":"YulFunctionCall","src":"1023:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1010:12:30"},"nodeType":"YulFunctionCall","src":"1010:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1000:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1051:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1061:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1055:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1106:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1115:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1118:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1108:6:30"},"nodeType":"YulFunctionCall","src":"1108:12:30"},"nodeType":"YulExpressionStatement","src":"1108:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1094:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1102:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1091:2:30"},"nodeType":"YulFunctionCall","src":"1091:14:30"},"nodeType":"YulIf","src":"1088:34:30"},{"nodeType":"YulVariableDeclaration","src":"1131:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1145:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1156:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1141:3:30"},"nodeType":"YulFunctionCall","src":"1141:22:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1135:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1211:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1220:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1223:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1213:6:30"},"nodeType":"YulFunctionCall","src":"1213:12:30"},"nodeType":"YulExpressionStatement","src":"1213:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1190:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1194:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:30"},"nodeType":"YulFunctionCall","src":"1186:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1201:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1182:3:30"},"nodeType":"YulFunctionCall","src":"1182:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1175:6:30"},"nodeType":"YulFunctionCall","src":"1175:35:30"},"nodeType":"YulIf","src":"1172:55:30"},{"nodeType":"YulVariableDeclaration","src":"1236:26:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1259:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1246:12:30"},"nodeType":"YulFunctionCall","src":"1246:16:30"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1240:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1285:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1287:16:30"},"nodeType":"YulFunctionCall","src":"1287:18:30"},"nodeType":"YulExpressionStatement","src":"1287:18:30"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1277:2:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1281:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1274:2:30"},"nodeType":"YulFunctionCall","src":"1274:10:30"},"nodeType":"YulIf","src":"1271:36:30"},{"nodeType":"YulVariableDeclaration","src":"1316:20:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1330:1:30","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"1333:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1326:3:30"},"nodeType":"YulFunctionCall","src":"1326:10:30"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1320:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1345:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1365:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1359:5:30"},"nodeType":"YulFunctionCall","src":"1359:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1349:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1377:56:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:30"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"1415:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1419:2:30","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1411:3:30"},"nodeType":"YulFunctionCall","src":"1411:11:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1428:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1424:3:30"},"nodeType":"YulFunctionCall","src":"1424:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1407:3:30"},"nodeType":"YulFunctionCall","src":"1407:25:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1395:3:30"},"nodeType":"YulFunctionCall","src":"1395:38:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1381:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1492:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1494:16:30"},"nodeType":"YulFunctionCall","src":"1494:18:30"},"nodeType":"YulExpressionStatement","src":"1494:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1451:10:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1463:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1448:2:30"},"nodeType":"YulFunctionCall","src":"1448:18:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1471:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1483:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1468:2:30"},"nodeType":"YulFunctionCall","src":"1468:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1445:2:30"},"nodeType":"YulFunctionCall","src":"1445:46:30"},"nodeType":"YulIf","src":"1442:72:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1530:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1534:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1523:6:30"},"nodeType":"YulFunctionCall","src":"1523:22:30"},"nodeType":"YulExpressionStatement","src":"1523:22:30"},{"nodeType":"YulVariableDeclaration","src":"1554:17:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1565:6:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1558:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1587:6:30"},{"name":"_4","nodeType":"YulIdentifier","src":"1595:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1580:6:30"},"nodeType":"YulFunctionCall","src":"1580:18:30"},"nodeType":"YulExpressionStatement","src":"1580:18:30"},{"nodeType":"YulAssignment","src":"1607:22:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1618:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1626:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1614:3:30"},"nodeType":"YulFunctionCall","src":"1614:15:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1607:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"1638:34:30","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1660:2:30"},{"name":"_5","nodeType":"YulIdentifier","src":"1664:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1656:3:30"},"nodeType":"YulFunctionCall","src":"1656:11:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1669:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:30"},"nodeType":"YulFunctionCall","src":"1652:20:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1642:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1704:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1713:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1716:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1706:6:30"},"nodeType":"YulFunctionCall","src":"1706:12:30"},"nodeType":"YulExpressionStatement","src":"1706:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1687:6:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1695:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1684:2:30"},"nodeType":"YulFunctionCall","src":"1684:19:30"},"nodeType":"YulIf","src":"1681:39:30"},{"nodeType":"YulVariableDeclaration","src":"1729:22:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1744:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1748:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1740:3:30"},"nodeType":"YulFunctionCall","src":"1740:11:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1733:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1816:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1837:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1855:3:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1842:12:30"},"nodeType":"YulFunctionCall","src":"1842:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1830:6:30"},"nodeType":"YulFunctionCall","src":"1830:30:30"},"nodeType":"YulExpressionStatement","src":"1830:30:30"},{"nodeType":"YulAssignment","src":"1873:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1884:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1889:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1880:3:30"},"nodeType":"YulFunctionCall","src":"1880:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1873:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1771:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1776:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1768:2:30"},"nodeType":"YulFunctionCall","src":"1768:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1784:23:30","statements":[{"nodeType":"YulAssignment","src":"1786:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1797:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1802:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1793:3:30"},"nodeType":"YulFunctionCall","src":"1793:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1786:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1764:3:30","statements":[]},"src":"1760:142:30"},{"nodeType":"YulAssignment","src":"1911:16:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1921:6:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1911:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"820:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"831:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"843:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"851:6:30","type":""}],"src":"750:1183:30"},{"body":{"nodeType":"YulBlock","src":"2008:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"2054:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2063:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2066:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2056:6:30"},"nodeType":"YulFunctionCall","src":"2056:12:30"},"nodeType":"YulExpressionStatement","src":"2056:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2029:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2038:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2025:3:30"},"nodeType":"YulFunctionCall","src":"2025:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2050:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2021:3:30"},"nodeType":"YulFunctionCall","src":"2021:32:30"},"nodeType":"YulIf","src":"2018:52:30"},{"nodeType":"YulAssignment","src":"2079:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2102:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2089:12:30"},"nodeType":"YulFunctionCall","src":"2089:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2079:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1974:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1985:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1997:6:30","type":""}],"src":"1938:180:30"},{"body":{"nodeType":"YulBlock","src":"2396:426:30","statements":[{"nodeType":"YulAssignment","src":"2406:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2418:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2429:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2414:3:30"},"nodeType":"YulFunctionCall","src":"2414:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2406:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2449:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2474:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2467:6:30"},"nodeType":"YulFunctionCall","src":"2467:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2460:6:30"},"nodeType":"YulFunctionCall","src":"2460:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2442:6:30"},"nodeType":"YulFunctionCall","src":"2442:41:30"},"nodeType":"YulExpressionStatement","src":"2442:41:30"},{"nodeType":"YulVariableDeclaration","src":"2492:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2515:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2506:3:30"},"nodeType":"YulFunctionCall","src":"2506:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"2519:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2502:3:30"},"nodeType":"YulFunctionCall","src":"2502:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2496:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2541:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2552:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2537:3:30"},"nodeType":"YulFunctionCall","src":"2537:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2561:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2569:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2557:3:30"},"nodeType":"YulFunctionCall","src":"2557:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2530:6:30"},"nodeType":"YulFunctionCall","src":"2530:43:30"},"nodeType":"YulExpressionStatement","src":"2530:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2593:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2604:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2589:3:30"},"nodeType":"YulFunctionCall","src":"2589:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2613:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2621:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2609:3:30"},"nodeType":"YulFunctionCall","src":"2609:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2582:6:30"},"nodeType":"YulFunctionCall","src":"2582:43:30"},"nodeType":"YulExpressionStatement","src":"2582:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2645:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2656:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2641:3:30"},"nodeType":"YulFunctionCall","src":"2641:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"2661:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2634:6:30"},"nodeType":"YulFunctionCall","src":"2634:34:30"},"nodeType":"YulExpressionStatement","src":"2634:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2688:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2699:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2684:3:30"},"nodeType":"YulFunctionCall","src":"2684:19:30"},{"name":"value4","nodeType":"YulIdentifier","src":"2705:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2677:6:30"},"nodeType":"YulFunctionCall","src":"2677:35:30"},"nodeType":"YulExpressionStatement","src":"2677:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2732:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2743:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2728:3:30"},"nodeType":"YulFunctionCall","src":"2728:19:30"},{"name":"value5","nodeType":"YulIdentifier","src":"2749:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2721:6:30"},"nodeType":"YulFunctionCall","src":"2721:35:30"},"nodeType":"YulExpressionStatement","src":"2721:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2776:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2787:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:30"},"nodeType":"YulFunctionCall","src":"2772:19:30"},{"arguments":[{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"2807:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2800:6:30"},"nodeType":"YulFunctionCall","src":"2800:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2793:6:30"},"nodeType":"YulFunctionCall","src":"2793:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2765:6:30"},"nodeType":"YulFunctionCall","src":"2765:51:30"},"nodeType":"YulExpressionStatement","src":"2765:51:30"}]},"name":"abi_encode_tuple_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__to_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2317:9:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2328:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2336:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2344:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2352:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2360:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2368:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2376:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2387:4:30","type":""}],"src":"2123:699:30"},{"body":{"nodeType":"YulBlock","src":"2897:186:30","statements":[{"body":{"nodeType":"YulBlock","src":"2943:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2952:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2945:6:30"},"nodeType":"YulFunctionCall","src":"2945:12:30"},"nodeType":"YulExpressionStatement","src":"2945:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2918:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2927:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2914:3:30"},"nodeType":"YulFunctionCall","src":"2914:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2939:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2910:3:30"},"nodeType":"YulFunctionCall","src":"2910:32:30"},"nodeType":"YulIf","src":"2907:52:30"},{"nodeType":"YulVariableDeclaration","src":"2968:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2994:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2981:12:30"},"nodeType":"YulFunctionCall","src":"2981:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2972:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3047:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"3013:33:30"},"nodeType":"YulFunctionCall","src":"3013:40:30"},"nodeType":"YulExpressionStatement","src":"3013:40:30"},{"nodeType":"YulAssignment","src":"3062:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3072:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3062:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2863:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2874:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2886:6:30","type":""}],"src":"2827:256:30"},{"body":{"nodeType":"YulBlock","src":"3130:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"3184:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3193:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3196:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3186:6:30"},"nodeType":"YulFunctionCall","src":"3186:12:30"},"nodeType":"YulExpressionStatement","src":"3186:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3153:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3174:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3167:6:30"},"nodeType":"YulFunctionCall","src":"3167:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3160:6:30"},"nodeType":"YulFunctionCall","src":"3160:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3150:2:30"},"nodeType":"YulFunctionCall","src":"3150:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3143:6:30"},"nodeType":"YulFunctionCall","src":"3143:40:30"},"nodeType":"YulIf","src":"3140:60:30"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3119:5:30","type":""}],"src":"3088:118:30"},{"body":{"nodeType":"YulBlock","src":"3312:358:30","statements":[{"body":{"nodeType":"YulBlock","src":"3358:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3367:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3370:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3360:6:30"},"nodeType":"YulFunctionCall","src":"3360:12:30"},"nodeType":"YulExpressionStatement","src":"3360:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3333:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3342:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3329:3:30"},"nodeType":"YulFunctionCall","src":"3329:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3354:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3325:3:30"},"nodeType":"YulFunctionCall","src":"3325:32:30"},"nodeType":"YulIf","src":"3322:52:30"},{"nodeType":"YulVariableDeclaration","src":"3383:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3409:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3396:12:30"},"nodeType":"YulFunctionCall","src":"3396:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3387:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3450:5:30"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"3428:21:30"},"nodeType":"YulFunctionCall","src":"3428:28:30"},"nodeType":"YulExpressionStatement","src":"3428:28:30"},{"nodeType":"YulAssignment","src":"3465:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3475:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"3489:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3521:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3532:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3517:3:30"},"nodeType":"YulFunctionCall","src":"3517:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3504:12:30"},"nodeType":"YulFunctionCall","src":"3504:32:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3493:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3579:7:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"3545:33:30"},"nodeType":"YulFunctionCall","src":"3545:42:30"},"nodeType":"YulExpressionStatement","src":"3545:42:30"},{"nodeType":"YulAssignment","src":"3596:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3606:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3596:6:30"}]},{"nodeType":"YulAssignment","src":"3622:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3649:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3660:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3645:3:30"},"nodeType":"YulFunctionCall","src":"3645:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3632:12:30"},"nodeType":"YulFunctionCall","src":"3632:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3622:6:30"}]}]},"name":"abi_decode_tuple_t_boolt_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3262:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3273:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3285:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3293:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3301:6:30","type":""}],"src":"3211:459:30"},{"body":{"nodeType":"YulBlock","src":"3770:92:30","statements":[{"nodeType":"YulAssignment","src":"3780:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3792:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3803:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3788:3:30"},"nodeType":"YulFunctionCall","src":"3788:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3780:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3822:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3847:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3840:6:30"},"nodeType":"YulFunctionCall","src":"3840:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3833:6:30"},"nodeType":"YulFunctionCall","src":"3833:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3815:6:30"},"nodeType":"YulFunctionCall","src":"3815:41:30"},"nodeType":"YulExpressionStatement","src":"3815:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3739:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3750:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3761:4:30","type":""}],"src":"3675:187:30"},{"body":{"nodeType":"YulBlock","src":"3914:506:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3931:3:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3956:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3950:5:30"},"nodeType":"YulFunctionCall","src":"3950:12:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3943:6:30"},"nodeType":"YulFunctionCall","src":"3943:20:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3936:6:30"},"nodeType":"YulFunctionCall","src":"3936:28:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3924:6:30"},"nodeType":"YulFunctionCall","src":"3924:41:30"},"nodeType":"YulExpressionStatement","src":"3924:41:30"},{"nodeType":"YulVariableDeclaration","src":"3974:43:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4004:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4011:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4000:3:30"},"nodeType":"YulFunctionCall","src":"4000:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3994:5:30"},"nodeType":"YulFunctionCall","src":"3994:23:30"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"3978:12:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4026:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4044:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4049:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4040:3:30"},"nodeType":"YulFunctionCall","src":"4040:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"4053:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4036:3:30"},"nodeType":"YulFunctionCall","src":"4036:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4030:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4075:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4080:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4071:3:30"},"nodeType":"YulFunctionCall","src":"4071:14:30"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"4091:12:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4105:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4087:3:30"},"nodeType":"YulFunctionCall","src":"4087:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4064:6:30"},"nodeType":"YulFunctionCall","src":"4064:45:30"},"nodeType":"YulExpressionStatement","src":"4064:45:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4129:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4134:4:30","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4125:3:30"},"nodeType":"YulFunctionCall","src":"4125:14:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4155:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4162:4:30","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4151:3:30"},"nodeType":"YulFunctionCall","src":"4151:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4145:5:30"},"nodeType":"YulFunctionCall","src":"4145:23:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4170:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4141:3:30"},"nodeType":"YulFunctionCall","src":"4141:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4118:6:30"},"nodeType":"YulFunctionCall","src":"4118:56:30"},"nodeType":"YulExpressionStatement","src":"4118:56:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4194:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4199:4:30","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4190:3:30"},"nodeType":"YulFunctionCall","src":"4190:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4216:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4223:4:30","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4212:3:30"},"nodeType":"YulFunctionCall","src":"4212:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4206:5:30"},"nodeType":"YulFunctionCall","src":"4206:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4183:6:30"},"nodeType":"YulFunctionCall","src":"4183:47:30"},"nodeType":"YulExpressionStatement","src":"4183:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4250:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4255:4:30","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4246:3:30"},"nodeType":"YulFunctionCall","src":"4246:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4272:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4279:4:30","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4268:3:30"},"nodeType":"YulFunctionCall","src":"4268:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4262:5:30"},"nodeType":"YulFunctionCall","src":"4262:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4239:6:30"},"nodeType":"YulFunctionCall","src":"4239:47:30"},"nodeType":"YulExpressionStatement","src":"4239:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4306:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4311:4:30","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4302:3:30"},"nodeType":"YulFunctionCall","src":"4302:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4328:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4335:4:30","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4324:3:30"},"nodeType":"YulFunctionCall","src":"4324:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4318:5:30"},"nodeType":"YulFunctionCall","src":"4318:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4295:6:30"},"nodeType":"YulFunctionCall","src":"4295:47:30"},"nodeType":"YulExpressionStatement","src":"4295:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4362:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4367:4:30","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4358:3:30"},"nodeType":"YulFunctionCall","src":"4358:14:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4398:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4405:4:30","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4394:3:30"},"nodeType":"YulFunctionCall","src":"4394:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4388:5:30"},"nodeType":"YulFunctionCall","src":"4388:23:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4381:6:30"},"nodeType":"YulFunctionCall","src":"4381:31:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4374:6:30"},"nodeType":"YulFunctionCall","src":"4374:39:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4351:6:30"},"nodeType":"YulFunctionCall","src":"4351:63:30"},"nodeType":"YulExpressionStatement","src":"4351:63:30"}]},"name":"abi_encode_struct_Bet","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3898:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3905:3:30","type":""}],"src":"3867:553:30"},{"body":{"nodeType":"YulBlock","src":"4568:92:30","statements":[{"nodeType":"YulAssignment","src":"4578:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4590:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4601:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4586:3:30"},"nodeType":"YulFunctionCall","src":"4586:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4578:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4636:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4644:9:30"}],"functionName":{"name":"abi_encode_struct_Bet","nodeType":"YulIdentifier","src":"4614:21:30"},"nodeType":"YulFunctionCall","src":"4614:40:30"},"nodeType":"YulExpressionStatement","src":"4614:40:30"}]},"name":"abi_encode_tuple_t_struct$_Bet_$5150_memory_ptr__to_t_struct$_Bet_$5150_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4537:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4548:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4559:4:30","type":""}],"src":"4425:235:30"},{"body":{"nodeType":"YulBlock","src":"4782:102:30","statements":[{"nodeType":"YulAssignment","src":"4792:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4804:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4815:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4800:3:30"},"nodeType":"YulFunctionCall","src":"4800:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4792:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4834:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4849:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4865:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4870:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4861:3:30"},"nodeType":"YulFunctionCall","src":"4861:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"4874:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4857:3:30"},"nodeType":"YulFunctionCall","src":"4857:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4845:3:30"},"nodeType":"YulFunctionCall","src":"4845:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4827:6:30"},"nodeType":"YulFunctionCall","src":"4827:51:30"},"nodeType":"YulExpressionStatement","src":"4827:51:30"}]},"name":"abi_encode_tuple_t_contract$_IBankV2_$7313__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4751:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4762:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4773:4:30","type":""}],"src":"4665:219:30"},{"body":{"nodeType":"YulBlock","src":"4975:338:30","statements":[{"body":{"nodeType":"YulBlock","src":"5021:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5030:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5033:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5023:6:30"},"nodeType":"YulFunctionCall","src":"5023:12:30"},"nodeType":"YulExpressionStatement","src":"5023:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4996:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5005:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4992:3:30"},"nodeType":"YulFunctionCall","src":"4992:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5017:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4988:3:30"},"nodeType":"YulFunctionCall","src":"4988:32:30"},"nodeType":"YulIf","src":"4985:52:30"},{"nodeType":"YulVariableDeclaration","src":"5046:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5072:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5059:12:30"},"nodeType":"YulFunctionCall","src":"5059:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5050:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5125:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"5091:33:30"},"nodeType":"YulFunctionCall","src":"5091:40:30"},"nodeType":"YulExpressionStatement","src":"5091:40:30"},{"nodeType":"YulAssignment","src":"5140:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"5150:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5140:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5164:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5196:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5207:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5192:3:30"},"nodeType":"YulFunctionCall","src":"5192:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5179:12:30"},"nodeType":"YulFunctionCall","src":"5179:32:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5168:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5265:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5274:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5277:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5267:6:30"},"nodeType":"YulFunctionCall","src":"5267:12:30"},"nodeType":"YulExpressionStatement","src":"5267:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5233:7:30"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5246:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"5255:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5242:3:30"},"nodeType":"YulFunctionCall","src":"5242:20:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5230:2:30"},"nodeType":"YulFunctionCall","src":"5230:33:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5223:6:30"},"nodeType":"YulFunctionCall","src":"5223:41:30"},"nodeType":"YulIf","src":"5220:61:30"},{"nodeType":"YulAssignment","src":"5290:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5300:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5290:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4933:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4944:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4956:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4964:6:30","type":""}],"src":"4889:424:30"},{"body":{"nodeType":"YulBlock","src":"5419:102:30","statements":[{"nodeType":"YulAssignment","src":"5429:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5441:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5452:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5437:3:30"},"nodeType":"YulFunctionCall","src":"5437:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5429:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5471:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5486:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5502:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5507:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5498:3:30"},"nodeType":"YulFunctionCall","src":"5498:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"5511:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5494:3:30"},"nodeType":"YulFunctionCall","src":"5494:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5482:3:30"},"nodeType":"YulFunctionCall","src":"5482:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5464:6:30"},"nodeType":"YulFunctionCall","src":"5464:51:30"},"nodeType":"YulExpressionStatement","src":"5464:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5388:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5399:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5410:4:30","type":""}],"src":"5318:203:30"},{"body":{"nodeType":"YulBlock","src":"5642:510:30","statements":[{"body":{"nodeType":"YulBlock","src":"5688:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5697:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5700:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5690:6:30"},"nodeType":"YulFunctionCall","src":"5690:12:30"},"nodeType":"YulExpressionStatement","src":"5690:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5663:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5672:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5659:3:30"},"nodeType":"YulFunctionCall","src":"5659:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5684:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5655:3:30"},"nodeType":"YulFunctionCall","src":"5655:32:30"},"nodeType":"YulIf","src":"5652:52:30"},{"nodeType":"YulVariableDeclaration","src":"5713:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5740:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5727:12:30"},"nodeType":"YulFunctionCall","src":"5727:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5717:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5759:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5769:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5763:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5814:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5823:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5826:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5816:6:30"},"nodeType":"YulFunctionCall","src":"5816:12:30"},"nodeType":"YulExpressionStatement","src":"5816:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5802:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5810:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5799:2:30"},"nodeType":"YulFunctionCall","src":"5799:14:30"},"nodeType":"YulIf","src":"5796:34:30"},{"nodeType":"YulVariableDeclaration","src":"5839:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5853:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5864:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5849:3:30"},"nodeType":"YulFunctionCall","src":"5849:22:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5843:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5919:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5928:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5931:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5921:6:30"},"nodeType":"YulFunctionCall","src":"5921:12:30"},"nodeType":"YulExpressionStatement","src":"5921:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5898:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"5902:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5894:3:30"},"nodeType":"YulFunctionCall","src":"5894:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5909:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5890:3:30"},"nodeType":"YulFunctionCall","src":"5890:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5883:6:30"},"nodeType":"YulFunctionCall","src":"5883:35:30"},"nodeType":"YulIf","src":"5880:55:30"},{"nodeType":"YulVariableDeclaration","src":"5944:30:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5971:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5958:12:30"},"nodeType":"YulFunctionCall","src":"5958:16:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5948:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6001:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6010:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6013:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6003:6:30"},"nodeType":"YulFunctionCall","src":"6003:12:30"},"nodeType":"YulExpressionStatement","src":"6003:12:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5989:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5997:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5986:2:30"},"nodeType":"YulFunctionCall","src":"5986:14:30"},"nodeType":"YulIf","src":"5983:34:30"},{"body":{"nodeType":"YulBlock","src":"6075:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6084:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6087:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6077:6:30"},"nodeType":"YulFunctionCall","src":"6077:12:30"},"nodeType":"YulExpressionStatement","src":"6077:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6040:2:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6048:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6051:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6044:3:30"},"nodeType":"YulFunctionCall","src":"6044:14:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6036:3:30"},"nodeType":"YulFunctionCall","src":"6036:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6061:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6032:3:30"},"nodeType":"YulFunctionCall","src":"6032:32:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6066:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6029:2:30"},"nodeType":"YulFunctionCall","src":"6029:45:30"},"nodeType":"YulIf","src":"6026:65:30"},{"nodeType":"YulAssignment","src":"6100:21:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6114:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"6118:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6110:3:30"},"nodeType":"YulFunctionCall","src":"6110:11:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6100:6:30"}]},{"nodeType":"YulAssignment","src":"6130:16:30","value":{"name":"length","nodeType":"YulIdentifier","src":"6140:6:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6130:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5600:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5611:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5623:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5631:6:30","type":""}],"src":"5526:626:30"},{"body":{"nodeType":"YulBlock","src":"6210:205:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6220:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6229:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6224:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6289:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6314:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"6319:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6310:3:30"},"nodeType":"YulFunctionCall","src":"6310:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6333:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"6338:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6329:3:30"},"nodeType":"YulFunctionCall","src":"6329:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6323:5:30"},"nodeType":"YulFunctionCall","src":"6323:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6303:6:30"},"nodeType":"YulFunctionCall","src":"6303:39:30"},"nodeType":"YulExpressionStatement","src":"6303:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6250:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"6253:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6247:2:30"},"nodeType":"YulFunctionCall","src":"6247:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6261:19:30","statements":[{"nodeType":"YulAssignment","src":"6263:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6272:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"6275:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6268:3:30"},"nodeType":"YulFunctionCall","src":"6268:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6263:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"6243:3:30","statements":[]},"src":"6239:113:30"},{"body":{"nodeType":"YulBlock","src":"6378:31:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6391:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"6396:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6387:3:30"},"nodeType":"YulFunctionCall","src":"6387:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"6405:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6380:6:30"},"nodeType":"YulFunctionCall","src":"6380:27:30"},"nodeType":"YulExpressionStatement","src":"6380:27:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6367:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"6370:6:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6364:2:30"},"nodeType":"YulFunctionCall","src":"6364:13:30"},"nodeType":"YulIf","src":"6361:48:30"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6188:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6193:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"6198:6:30","type":""}],"src":"6157:258:30"},{"body":{"nodeType":"YulBlock","src":"6469:208:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6479:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6499:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6493:5:30"},"nodeType":"YulFunctionCall","src":"6493:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6483:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6521:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"6526:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6514:6:30"},"nodeType":"YulFunctionCall","src":"6514:19:30"},"nodeType":"YulExpressionStatement","src":"6514:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6568:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"6575:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6564:3:30"},"nodeType":"YulFunctionCall","src":"6564:16:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6586:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6591:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6582:3:30"},"nodeType":"YulFunctionCall","src":"6582:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"6598:6:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6542:21:30"},"nodeType":"YulFunctionCall","src":"6542:63:30"},"nodeType":"YulExpressionStatement","src":"6542:63:30"},{"nodeType":"YulAssignment","src":"6614:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6629:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6642:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6650:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6638:3:30"},"nodeType":"YulFunctionCall","src":"6638:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6659:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6655:3:30"},"nodeType":"YulFunctionCall","src":"6655:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6634:3:30"},"nodeType":"YulFunctionCall","src":"6634:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6625:3:30"},"nodeType":"YulFunctionCall","src":"6625:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"6666:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6621:3:30"},"nodeType":"YulFunctionCall","src":"6621:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6614:3:30"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6446:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6453:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6461:3:30","type":""}],"src":"6420:257:30"},{"body":{"nodeType":"YulBlock","src":"6851:631:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6861:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6871:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6865:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6882:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6900:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6911:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6896:3:30"},"nodeType":"YulFunctionCall","src":"6896:18:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6886:6:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6930:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6941:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6923:6:30"},"nodeType":"YulFunctionCall","src":"6923:21:30"},"nodeType":"YulExpressionStatement","src":"6923:21:30"},{"nodeType":"YulVariableDeclaration","src":"6953:17:30","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"6964:6:30"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"6957:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6979:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6999:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6993:5:30"},"nodeType":"YulFunctionCall","src":"6993:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6983:6:30","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7022:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"7030:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7015:6:30"},"nodeType":"YulFunctionCall","src":"7015:22:30"},"nodeType":"YulExpressionStatement","src":"7015:22:30"},{"nodeType":"YulAssignment","src":"7046:25:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7057:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7068:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7053:3:30"},"nodeType":"YulFunctionCall","src":"7053:18:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7046:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"7080:53:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7102:9:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7117:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"7120:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7113:3:30"},"nodeType":"YulFunctionCall","src":"7113:14:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7098:3:30"},"nodeType":"YulFunctionCall","src":"7098:30:30"},{"kind":"number","nodeType":"YulLiteral","src":"7130:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:30"},"nodeType":"YulFunctionCall","src":"7094:39:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"7084:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7142:29:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7160:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7168:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7156:3:30"},"nodeType":"YulFunctionCall","src":"7156:15:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7146:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7180:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7189:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7184:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7248:205:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7269:3:30"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7282:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7290:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7278:3:30"},"nodeType":"YulFunctionCall","src":"7278:22:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7306:2:30","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7302:3:30"},"nodeType":"YulFunctionCall","src":"7302:7:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7274:3:30"},"nodeType":"YulFunctionCall","src":"7274:36:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7262:6:30"},"nodeType":"YulFunctionCall","src":"7262:49:30"},"nodeType":"YulExpressionStatement","src":"7262:49:30"},{"nodeType":"YulAssignment","src":"7324:49:30","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7357:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7351:5:30"},"nodeType":"YulFunctionCall","src":"7351:13:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"7366:6:30"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"7334:16:30"},"nodeType":"YulFunctionCall","src":"7334:39:30"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7324:6:30"}]},{"nodeType":"YulAssignment","src":"7386:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7400:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7408:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7396:3:30"},"nodeType":"YulFunctionCall","src":"7396:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7386:6:30"}]},{"nodeType":"YulAssignment","src":"7424:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7435:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7440:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7431:3:30"},"nodeType":"YulFunctionCall","src":"7431:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7424:3:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7210:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"7213:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7207:2:30"},"nodeType":"YulFunctionCall","src":"7207:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7221:18:30","statements":[{"nodeType":"YulAssignment","src":"7223:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7232:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"7235:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7228:3:30"},"nodeType":"YulFunctionCall","src":"7228:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7223:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"7203:3:30","statements":[]},"src":"7199:254:30"},{"nodeType":"YulAssignment","src":"7462:14:30","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"7470:6:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7462:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6820:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6831:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6842:4:30","type":""}],"src":"6682:800:30"},{"body":{"nodeType":"YulBlock","src":"7574:237:30","statements":[{"body":{"nodeType":"YulBlock","src":"7620:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7632:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7622:6:30"},"nodeType":"YulFunctionCall","src":"7622:12:30"},"nodeType":"YulExpressionStatement","src":"7622:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7595:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7604:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7591:3:30"},"nodeType":"YulFunctionCall","src":"7591:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7616:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7587:3:30"},"nodeType":"YulFunctionCall","src":"7587:32:30"},"nodeType":"YulIf","src":"7584:52:30"},{"nodeType":"YulVariableDeclaration","src":"7645:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7671:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7658:12:30"},"nodeType":"YulFunctionCall","src":"7658:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7649:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7724:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"7690:33:30"},"nodeType":"YulFunctionCall","src":"7690:40:30"},"nodeType":"YulExpressionStatement","src":"7690:40:30"},{"nodeType":"YulAssignment","src":"7739:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"7749:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7739:6:30"}]},{"nodeType":"YulAssignment","src":"7763:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7790:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7801:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7786:3:30"},"nodeType":"YulFunctionCall","src":"7786:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7773:12:30"},"nodeType":"YulFunctionCall","src":"7773:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7763:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7532:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7543:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7555:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7563:6:30","type":""}],"src":"7487:324:30"},{"body":{"nodeType":"YulBlock","src":"8033:735:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8043:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8053:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8047:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8064:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8082:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8093:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8078:3:30"},"nodeType":"YulFunctionCall","src":"8078:18:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8068:6:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8112:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8123:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8105:6:30"},"nodeType":"YulFunctionCall","src":"8105:21:30"},"nodeType":"YulExpressionStatement","src":"8105:21:30"},{"nodeType":"YulVariableDeclaration","src":"8135:17:30","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"8146:6:30"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"8139:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8161:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8181:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8175:5:30"},"nodeType":"YulFunctionCall","src":"8175:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8165:6:30","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8204:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"8212:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8197:6:30"},"nodeType":"YulFunctionCall","src":"8197:22:30"},"nodeType":"YulExpressionStatement","src":"8197:22:30"},{"nodeType":"YulAssignment","src":"8228:25:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8239:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8250:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8235:3:30"},"nodeType":"YulFunctionCall","src":"8235:18:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8228:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"8262:29:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8280:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8288:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8276:3:30"},"nodeType":"YulFunctionCall","src":"8276:15:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8266:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8300:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8309:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8304:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8368:374:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8382:23:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8398:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8392:5:30"},"nodeType":"YulFunctionCall","src":"8392:13:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8386:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8446:2:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8440:5:30"},"nodeType":"YulFunctionCall","src":"8440:9:30"},{"name":"pos","nodeType":"YulIdentifier","src":"8451:3:30"}],"functionName":{"name":"abi_encode_struct_Bet","nodeType":"YulIdentifier","src":"8418:21:30"},"nodeType":"YulFunctionCall","src":"8418:37:30"},"nodeType":"YulExpressionStatement","src":"8418:37:30"},{"nodeType":"YulVariableDeclaration","src":"8468:38:30","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8498:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8502:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8494:3:30"},"nodeType":"YulFunctionCall","src":"8494:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8488:5:30"},"nodeType":"YulFunctionCall","src":"8488:18:30"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8472:12:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8530:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8535:4:30","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8526:3:30"},"nodeType":"YulFunctionCall","src":"8526:14:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8562:12:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8556:5:30"},"nodeType":"YulFunctionCall","src":"8556:19:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8549:6:30"},"nodeType":"YulFunctionCall","src":"8549:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8542:6:30"},"nodeType":"YulFunctionCall","src":"8542:35:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8519:6:30"},"nodeType":"YulFunctionCall","src":"8519:59:30"},"nodeType":"YulExpressionStatement","src":"8519:59:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8602:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8607:3:30","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8598:3:30"},"nodeType":"YulFunctionCall","src":"8598:13:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8637:12:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8651:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8633:3:30"},"nodeType":"YulFunctionCall","src":"8633:21:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8627:5:30"},"nodeType":"YulFunctionCall","src":"8627:28:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8620:6:30"},"nodeType":"YulFunctionCall","src":"8620:36:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8613:6:30"},"nodeType":"YulFunctionCall","src":"8613:44:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8591:6:30"},"nodeType":"YulFunctionCall","src":"8591:67:30"},"nodeType":"YulExpressionStatement","src":"8591:67:30"},{"nodeType":"YulAssignment","src":"8671:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8682:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8687:6:30","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8678:3:30"},"nodeType":"YulFunctionCall","src":"8678:16:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8671:3:30"}]},{"nodeType":"YulAssignment","src":"8707:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8721:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8729:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8717:3:30"},"nodeType":"YulFunctionCall","src":"8717:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8707:6:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8330:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"8333:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8327:2:30"},"nodeType":"YulFunctionCall","src":"8327:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8341:18:30","statements":[{"nodeType":"YulAssignment","src":"8343:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8352:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"8355:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8348:3:30"},"nodeType":"YulFunctionCall","src":"8348:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8343:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"8323:3:30","statements":[]},"src":"8319:423:30"},{"nodeType":"YulAssignment","src":"8751:11:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"8759:3:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8751:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8002:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8013:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8024:4:30","type":""}],"src":"7816:952:30"},{"body":{"nodeType":"YulBlock","src":"8890:151:30","statements":[{"nodeType":"YulAssignment","src":"8900:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8912:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8923:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8908:3:30"},"nodeType":"YulFunctionCall","src":"8908:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8900:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8942:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8967:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8960:6:30"},"nodeType":"YulFunctionCall","src":"8960:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8953:6:30"},"nodeType":"YulFunctionCall","src":"8953:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8935:6:30"},"nodeType":"YulFunctionCall","src":"8935:41:30"},"nodeType":"YulExpressionStatement","src":"8935:41:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8996:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9007:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8992:3:30"},"nodeType":"YulFunctionCall","src":"8992:18:30"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9026:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9019:6:30"},"nodeType":"YulFunctionCall","src":"9019:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9012:6:30"},"nodeType":"YulFunctionCall","src":"9012:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8985:6:30"},"nodeType":"YulFunctionCall","src":"8985:50:30"},"nodeType":"YulExpressionStatement","src":"8985:50:30"}]},"name":"abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8851:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8862:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8870:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8881:4:30","type":""}],"src":"8773:268:30"},{"body":{"nodeType":"YulBlock","src":"9171:157:30","statements":[{"nodeType":"YulAssignment","src":"9181:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9193:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9204:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9189:3:30"},"nodeType":"YulFunctionCall","src":"9189:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9181:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9223:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9238:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9246:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9234:3:30"},"nodeType":"YulFunctionCall","src":"9234:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9216:6:30"},"nodeType":"YulFunctionCall","src":"9216:38:30"},"nodeType":"YulExpressionStatement","src":"9216:38:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9274:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9285:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9270:3:30"},"nodeType":"YulFunctionCall","src":"9270:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9294:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9302:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9290:3:30"},"nodeType":"YulFunctionCall","src":"9290:31:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9263:6:30"},"nodeType":"YulFunctionCall","src":"9263:59:30"},"nodeType":"YulExpressionStatement","src":"9263:59:30"}]},"name":"abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9132:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9143:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9151:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9162:4:30","type":""}],"src":"9046:282:30"},{"body":{"nodeType":"YulBlock","src":"9462:175:30","statements":[{"nodeType":"YulAssignment","src":"9472:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9484:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9495:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9480:3:30"},"nodeType":"YulFunctionCall","src":"9480:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9472:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"9507:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9525:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9530:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9521:3:30"},"nodeType":"YulFunctionCall","src":"9521:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"9534:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9517:3:30"},"nodeType":"YulFunctionCall","src":"9517:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9511:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9552:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9567:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9575:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9563:3:30"},"nodeType":"YulFunctionCall","src":"9563:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9545:6:30"},"nodeType":"YulFunctionCall","src":"9545:34:30"},"nodeType":"YulExpressionStatement","src":"9545:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9599:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9610:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9595:3:30"},"nodeType":"YulFunctionCall","src":"9595:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9619:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9627:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9615:3:30"},"nodeType":"YulFunctionCall","src":"9615:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9588:6:30"},"nodeType":"YulFunctionCall","src":"9588:43:30"},"nodeType":"YulExpressionStatement","src":"9588:43:30"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9423:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9434:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9442:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9453:4:30","type":""}],"src":"9333:304:30"},{"body":{"nodeType":"YulBlock","src":"9723:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"9769:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9778:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9781:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9771:6:30"},"nodeType":"YulFunctionCall","src":"9771:12:30"},"nodeType":"YulExpressionStatement","src":"9771:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9744:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9753:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9740:3:30"},"nodeType":"YulFunctionCall","src":"9740:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9765:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9736:3:30"},"nodeType":"YulFunctionCall","src":"9736:32:30"},"nodeType":"YulIf","src":"9733:52:30"},{"nodeType":"YulAssignment","src":"9794:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9810:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9804:5:30"},"nodeType":"YulFunctionCall","src":"9804:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9794:6:30"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9689:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9700:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9712:6:30","type":""}],"src":"9642:184:30"},{"body":{"nodeType":"YulBlock","src":"9982:178:30","statements":[{"nodeType":"YulAssignment","src":"9992:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10004:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10015:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10000:3:30"},"nodeType":"YulFunctionCall","src":"10000:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9992:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10034:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"10045:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10027:6:30"},"nodeType":"YulFunctionCall","src":"10027:25:30"},"nodeType":"YulExpressionStatement","src":"10027:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10072:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10083:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10068:3:30"},"nodeType":"YulFunctionCall","src":"10068:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"10088:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10061:6:30"},"nodeType":"YulFunctionCall","src":"10061:34:30"},"nodeType":"YulExpressionStatement","src":"10061:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10115:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10126:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10111:3:30"},"nodeType":"YulFunctionCall","src":"10111:18:30"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10145:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10138:6:30"},"nodeType":"YulFunctionCall","src":"10138:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10131:6:30"},"nodeType":"YulFunctionCall","src":"10131:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10104:6:30"},"nodeType":"YulFunctionCall","src":"10104:50:30"},"nodeType":"YulExpressionStatement","src":"10104:50:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9935:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9946:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9954:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9962:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9973:4:30","type":""}],"src":"9831:329:30"},{"body":{"nodeType":"YulBlock","src":"10264:89:30","statements":[{"nodeType":"YulAssignment","src":"10274:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10286:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10297:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10282:3:30"},"nodeType":"YulFunctionCall","src":"10282:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10274:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10316:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10331:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10339:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10327:3:30"},"nodeType":"YulFunctionCall","src":"10327:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10309:6:30"},"nodeType":"YulFunctionCall","src":"10309:38:30"},"nodeType":"YulExpressionStatement","src":"10309:38:30"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10233:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10244:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10255:4:30","type":""}],"src":"10165:188:30"},{"body":{"nodeType":"YulBlock","src":"10390:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10407:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10414:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10419:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10410:3:30"},"nodeType":"YulFunctionCall","src":"10410:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10400:6:30"},"nodeType":"YulFunctionCall","src":"10400:31:30"},"nodeType":"YulExpressionStatement","src":"10400:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10447:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10450:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10440:6:30"},"nodeType":"YulFunctionCall","src":"10440:15:30"},"nodeType":"YulExpressionStatement","src":"10440:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10471:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10474:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10464:6:30"},"nodeType":"YulFunctionCall","src":"10464:15:30"},"nodeType":"YulExpressionStatement","src":"10464:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10358:127:30"},{"body":{"nodeType":"YulBlock","src":"10584:427:30","statements":[{"nodeType":"YulVariableDeclaration","src":"10594:51:30","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"10633:11:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10620:12:30"},"nodeType":"YulFunctionCall","src":"10620:25:30"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"10598:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10734:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10743:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10746:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10736:6:30"},"nodeType":"YulFunctionCall","src":"10736:12:30"},"nodeType":"YulExpressionStatement","src":"10736:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10668:18:30"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10696:12:30"},"nodeType":"YulFunctionCall","src":"10696:14:30"},{"name":"base_ref","nodeType":"YulIdentifier","src":"10712:8:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10692:3:30"},"nodeType":"YulFunctionCall","src":"10692:29:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10727:2:30","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10723:3:30"},"nodeType":"YulFunctionCall","src":"10723:7:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10688:3:30"},"nodeType":"YulFunctionCall","src":"10688:43:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10664:3:30"},"nodeType":"YulFunctionCall","src":"10664:68:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10657:6:30"},"nodeType":"YulFunctionCall","src":"10657:76:30"},"nodeType":"YulIf","src":"10654:96:30"},{"nodeType":"YulVariableDeclaration","src":"10759:47:30","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"10777:8:30"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10787:18:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10773:3:30"},"nodeType":"YulFunctionCall","src":"10773:33:30"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"10763:6:30","type":""}]},{"nodeType":"YulAssignment","src":"10815:30:30","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"10838:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10825:12:30"},"nodeType":"YulFunctionCall","src":"10825:20:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10815:6:30"}]},{"body":{"nodeType":"YulBlock","src":"10888:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10897:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10900:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10890:6:30"},"nodeType":"YulFunctionCall","src":"10890:12:30"},"nodeType":"YulExpressionStatement","src":"10890:12:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10860:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10868:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10857:2:30"},"nodeType":"YulFunctionCall","src":"10857:30:30"},"nodeType":"YulIf","src":"10854:50:30"},{"nodeType":"YulAssignment","src":"10913:25:30","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"10925:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10933:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10921:3:30"},"nodeType":"YulFunctionCall","src":"10921:17:30"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"10913:4:30"}]},{"body":{"nodeType":"YulBlock","src":"10989:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10998:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11001:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10991:6:30"},"nodeType":"YulFunctionCall","src":"10991:12:30"},"nodeType":"YulExpressionStatement","src":"10991:12:30"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"10954:4:30"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10964:12:30"},"nodeType":"YulFunctionCall","src":"10964:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"10980:6:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10960:3:30"},"nodeType":"YulFunctionCall","src":"10960:27:30"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"10950:3:30"},"nodeType":"YulFunctionCall","src":"10950:38:30"},"nodeType":"YulIf","src":"10947:58:30"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"10541:8:30","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"10551:11:30","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"10567:4:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"10573:6:30","type":""}],"src":"10490:521:30"},{"body":{"nodeType":"YulBlock","src":"11048:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11065:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11072:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11077:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11068:3:30"},"nodeType":"YulFunctionCall","src":"11068:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11058:6:30"},"nodeType":"YulFunctionCall","src":"11058:31:30"},"nodeType":"YulExpressionStatement","src":"11058:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11105:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11108:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11098:6:30"},"nodeType":"YulFunctionCall","src":"11098:15:30"},"nodeType":"YulExpressionStatement","src":"11098:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11129:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11132:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11122:6:30"},"nodeType":"YulFunctionCall","src":"11122:15:30"},"nodeType":"YulExpressionStatement","src":"11122:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"11016:127:30"},{"body":{"nodeType":"YulBlock","src":"11195:88:30","statements":[{"body":{"nodeType":"YulBlock","src":"11226:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11228:16:30"},"nodeType":"YulFunctionCall","src":"11228:18:30"},"nodeType":"YulExpressionStatement","src":"11228:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11211:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11222:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11218:3:30"},"nodeType":"YulFunctionCall","src":"11218:6:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11208:2:30"},"nodeType":"YulFunctionCall","src":"11208:17:30"},"nodeType":"YulIf","src":"11205:43:30"},{"nodeType":"YulAssignment","src":"11257:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11268:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11275:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11264:3:30"},"nodeType":"YulFunctionCall","src":"11264:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11257:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11177:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11187:3:30","type":""}],"src":"11148:135:30"},{"body":{"nodeType":"YulBlock","src":"11336:80:30","statements":[{"body":{"nodeType":"YulBlock","src":"11363:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11365:16:30"},"nodeType":"YulFunctionCall","src":"11365:18:30"},"nodeType":"YulExpressionStatement","src":"11365:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11352:1:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11359:1:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11355:3:30"},"nodeType":"YulFunctionCall","src":"11355:6:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11349:2:30"},"nodeType":"YulFunctionCall","src":"11349:13:30"},"nodeType":"YulIf","src":"11346:39:30"},{"nodeType":"YulAssignment","src":"11394:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11405:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"11408:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11401:3:30"},"nodeType":"YulFunctionCall","src":"11401:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11394:3:30"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11319:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"11322:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11328:3:30","type":""}],"src":"11288:128:30"},{"body":{"nodeType":"YulBlock","src":"11467:147:30","statements":[{"nodeType":"YulVariableDeclaration","src":"11477:45:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11496:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11503:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11492:3:30"},"nodeType":"YulFunctionCall","src":"11492:30:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11481:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"11550:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11552:16:30"},"nodeType":"YulFunctionCall","src":"11552:18:30"},"nodeType":"YulExpressionStatement","src":"11552:18:30"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11541:7:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11534:6:30"},"nodeType":"YulFunctionCall","src":"11534:15:30"},"nodeType":"YulIf","src":"11531:41:30"},{"nodeType":"YulAssignment","src":"11581:27:30","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11592:7:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11605:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11601:3:30"},"nodeType":"YulFunctionCall","src":"11601:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11588:3:30"},"nodeType":"YulFunctionCall","src":"11588:20:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11581:3:30"}]}]},"name":"decrement_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11449:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11459:3:30","type":""}],"src":"11421:193:30"},{"body":{"nodeType":"YulBlock","src":"11793:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11810:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11821:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11803:6:30"},"nodeType":"YulFunctionCall","src":"11803:21:30"},"nodeType":"YulExpressionStatement","src":"11803:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11844:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11855:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11840:3:30"},"nodeType":"YulFunctionCall","src":"11840:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"11860:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11833:6:30"},"nodeType":"YulFunctionCall","src":"11833:30:30"},"nodeType":"YulExpressionStatement","src":"11833:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11883:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11894:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11879:3:30"},"nodeType":"YulFunctionCall","src":"11879:18:30"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"11899:34:30","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11872:6:30"},"nodeType":"YulFunctionCall","src":"11872:62:30"},"nodeType":"YulExpressionStatement","src":"11872:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11954:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11965:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11950:3:30"},"nodeType":"YulFunctionCall","src":"11950:18:30"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"11970:8:30","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11943:6:30"},"nodeType":"YulFunctionCall","src":"11943:36:30"},"nodeType":"YulExpressionStatement","src":"11943:36:30"},{"nodeType":"YulAssignment","src":"11988:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12000:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12011:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11996:3:30"},"nodeType":"YulFunctionCall","src":"11996:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11770:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11784:4:30","type":""}],"src":"11619:402:30"},{"body":{"nodeType":"YulBlock","src":"12200:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12217:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12228:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12210:6:30"},"nodeType":"YulFunctionCall","src":"12210:21:30"},"nodeType":"YulExpressionStatement","src":"12210:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12251:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12262:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12247:3:30"},"nodeType":"YulFunctionCall","src":"12247:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12267:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12240:6:30"},"nodeType":"YulFunctionCall","src":"12240:30:30"},"nodeType":"YulExpressionStatement","src":"12240:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12290:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12301:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12286:3:30"},"nodeType":"YulFunctionCall","src":"12286:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12306:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12279:6:30"},"nodeType":"YulFunctionCall","src":"12279:62:30"},"nodeType":"YulExpressionStatement","src":"12279:62:30"},{"nodeType":"YulAssignment","src":"12350:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12362:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12373:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12358:3:30"},"nodeType":"YulFunctionCall","src":"12358:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12350:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12177:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12191:4:30","type":""}],"src":"12026:356:30"},{"body":{"nodeType":"YulBlock","src":"12419:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12436:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12443:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12448:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12439:3:30"},"nodeType":"YulFunctionCall","src":"12439:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12429:6:30"},"nodeType":"YulFunctionCall","src":"12429:31:30"},"nodeType":"YulExpressionStatement","src":"12429:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12476:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12479:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12469:6:30"},"nodeType":"YulFunctionCall","src":"12469:15:30"},"nodeType":"YulExpressionStatement","src":"12469:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12500:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12503:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12493:6:30"},"nodeType":"YulFunctionCall","src":"12493:15:30"},"nodeType":"YulExpressionStatement","src":"12493:15:30"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"12387:127:30"},{"body":{"nodeType":"YulBlock","src":"12557:74:30","statements":[{"body":{"nodeType":"YulBlock","src":"12580:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"12582:16:30"},"nodeType":"YulFunctionCall","src":"12582:18:30"},"nodeType":"YulExpressionStatement","src":"12582:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12577:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12570:6:30"},"nodeType":"YulFunctionCall","src":"12570:9:30"},"nodeType":"YulIf","src":"12567:35:30"},{"nodeType":"YulAssignment","src":"12611:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12620:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12623:1:30"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"12616:3:30"},"nodeType":"YulFunctionCall","src":"12616:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"12611:1:30"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12542:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"12545:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"12551:1:30","type":""}],"src":"12519:112:30"},{"body":{"nodeType":"YulBlock","src":"12685:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"12707:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12709:16:30"},"nodeType":"YulFunctionCall","src":"12709:18:30"},"nodeType":"YulExpressionStatement","src":"12709:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12701:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12704:1:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12698:2:30"},"nodeType":"YulFunctionCall","src":"12698:8:30"},"nodeType":"YulIf","src":"12695:34:30"},{"nodeType":"YulAssignment","src":"12738:17:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12750:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12753:1:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12746:3:30"},"nodeType":"YulFunctionCall","src":"12746:9:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"12738:4:30"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12667:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"12670:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"12676:4:30","type":""}],"src":"12636:125:30"},{"body":{"nodeType":"YulBlock","src":"12967:262:30","statements":[{"nodeType":"YulAssignment","src":"12977:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12989:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13000:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12985:3:30"},"nodeType":"YulFunctionCall","src":"12985:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12977:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"13013:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13031:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13036:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13027:3:30"},"nodeType":"YulFunctionCall","src":"13027:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"13040:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13023:3:30"},"nodeType":"YulFunctionCall","src":"13023:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13017:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13058:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13073:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13081:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13069:3:30"},"nodeType":"YulFunctionCall","src":"13069:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13051:6:30"},"nodeType":"YulFunctionCall","src":"13051:34:30"},"nodeType":"YulExpressionStatement","src":"13051:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13105:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13116:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13101:3:30"},"nodeType":"YulFunctionCall","src":"13101:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13125:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13133:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13121:3:30"},"nodeType":"YulFunctionCall","src":"13121:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13094:6:30"},"nodeType":"YulFunctionCall","src":"13094:43:30"},"nodeType":"YulExpressionStatement","src":"13094:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13157:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13168:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13153:3:30"},"nodeType":"YulFunctionCall","src":"13153:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"13173:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13146:6:30"},"nodeType":"YulFunctionCall","src":"13146:34:30"},"nodeType":"YulExpressionStatement","src":"13146:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13200:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13211:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13196:3:30"},"nodeType":"YulFunctionCall","src":"13196:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"13216:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13189:6:30"},"nodeType":"YulFunctionCall","src":"13189:34:30"},"nodeType":"YulExpressionStatement","src":"13189:34:30"}]},"name":"abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256__to_t_address_payable_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12912:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12923:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12931:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12939:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12947:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12958:4:30","type":""}],"src":"12766:463:30"},{"body":{"nodeType":"YulBlock","src":"13407:238:30","statements":[{"nodeType":"YulAssignment","src":"13417:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13429:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13440:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13425:3:30"},"nodeType":"YulFunctionCall","src":"13425:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13417:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13460:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"13471:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13453:6:30"},"nodeType":"YulFunctionCall","src":"13453:25:30"},"nodeType":"YulExpressionStatement","src":"13453:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13498:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13509:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13494:3:30"},"nodeType":"YulFunctionCall","src":"13494:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"13514:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13487:6:30"},"nodeType":"YulFunctionCall","src":"13487:34:30"},"nodeType":"YulExpressionStatement","src":"13487:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13541:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13552:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13537:3:30"},"nodeType":"YulFunctionCall","src":"13537:18:30"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13571:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13564:6:30"},"nodeType":"YulFunctionCall","src":"13564:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13557:6:30"},"nodeType":"YulFunctionCall","src":"13557:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13530:6:30"},"nodeType":"YulFunctionCall","src":"13530:50:30"},"nodeType":"YulExpressionStatement","src":"13530:50:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13600:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13611:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13596:3:30"},"nodeType":"YulFunctionCall","src":"13596:18:30"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13630:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13623:6:30"},"nodeType":"YulFunctionCall","src":"13623:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13616:6:30"},"nodeType":"YulFunctionCall","src":"13616:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13589:6:30"},"nodeType":"YulFunctionCall","src":"13589:50:30"},"nodeType":"YulExpressionStatement","src":"13589:50:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13352:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13363:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13371:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13379:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13387:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13398:4:30","type":""}],"src":"13234:411:30"},{"body":{"nodeType":"YulBlock","src":"13824:166:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13841:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13852:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13834:6:30"},"nodeType":"YulFunctionCall","src":"13834:21:30"},"nodeType":"YulExpressionStatement","src":"13834:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13875:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13886:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13871:3:30"},"nodeType":"YulFunctionCall","src":"13871:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13891:2:30","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13864:6:30"},"nodeType":"YulFunctionCall","src":"13864:30:30"},"nodeType":"YulExpressionStatement","src":"13864:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13914:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13925:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13910:3:30"},"nodeType":"YulFunctionCall","src":"13910:18:30"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"13930:18:30","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13903:6:30"},"nodeType":"YulFunctionCall","src":"13903:46:30"},"nodeType":"YulExpressionStatement","src":"13903:46:30"},{"nodeType":"YulAssignment","src":"13958:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13970:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13981:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13966:3:30"},"nodeType":"YulFunctionCall","src":"13966:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13958:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13801:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13815:4:30","type":""}],"src":"13650:340:30"},{"body":{"nodeType":"YulBlock","src":"14047:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"14106:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14108:16:30"},"nodeType":"YulFunctionCall","src":"14108:18:30"},"nodeType":"YulExpressionStatement","src":"14108:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14078:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14071:6:30"},"nodeType":"YulFunctionCall","src":"14071:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14064:6:30"},"nodeType":"YulFunctionCall","src":"14064:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14086:1:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14097:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14093:3:30"},"nodeType":"YulFunctionCall","src":"14093:6:30"},{"name":"x","nodeType":"YulIdentifier","src":"14101:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14089:3:30"},"nodeType":"YulFunctionCall","src":"14089:14:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14083:2:30"},"nodeType":"YulFunctionCall","src":"14083:21:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14060:3:30"},"nodeType":"YulFunctionCall","src":"14060:45:30"},"nodeType":"YulIf","src":"14057:71:30"},{"nodeType":"YulAssignment","src":"14137:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14152:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"14155:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"14148:3:30"},"nodeType":"YulFunctionCall","src":"14148:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"14137:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14026:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"14029:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"14035:7:30","type":""}],"src":"13995:168:30"},{"body":{"nodeType":"YulBlock","src":"14246:167:30","statements":[{"body":{"nodeType":"YulBlock","src":"14292:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14301:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14304:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14294:6:30"},"nodeType":"YulFunctionCall","src":"14294:12:30"},"nodeType":"YulExpressionStatement","src":"14294:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14267:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"14276:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14263:3:30"},"nodeType":"YulFunctionCall","src":"14263:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"14288:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14259:3:30"},"nodeType":"YulFunctionCall","src":"14259:32:30"},"nodeType":"YulIf","src":"14256:52:30"},{"nodeType":"YulVariableDeclaration","src":"14317:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14336:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14330:5:30"},"nodeType":"YulFunctionCall","src":"14330:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14321:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14377:5:30"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"14355:21:30"},"nodeType":"YulFunctionCall","src":"14355:28:30"},"nodeType":"YulExpressionStatement","src":"14355:28:30"},{"nodeType":"YulAssignment","src":"14392:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"14402:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14392:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14212:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14223:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14235:6:30","type":""}],"src":"14168:245:30"},{"body":{"nodeType":"YulBlock","src":"14547:145:30","statements":[{"nodeType":"YulAssignment","src":"14557:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14569:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14580:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14565:3:30"},"nodeType":"YulFunctionCall","src":"14565:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14557:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14599:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14614:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14630:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14635:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14626:3:30"},"nodeType":"YulFunctionCall","src":"14626:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"14639:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14622:3:30"},"nodeType":"YulFunctionCall","src":"14622:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14610:3:30"},"nodeType":"YulFunctionCall","src":"14610:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14592:6:30"},"nodeType":"YulFunctionCall","src":"14592:51:30"},"nodeType":"YulExpressionStatement","src":"14592:51:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14663:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14674:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14659:3:30"},"nodeType":"YulFunctionCall","src":"14659:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"14679:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14652:6:30"},"nodeType":"YulFunctionCall","src":"14652:34:30"},"nodeType":"YulExpressionStatement","src":"14652:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14508:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14519:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14527:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14538:4:30","type":""}],"src":"14418:274:30"},{"body":{"nodeType":"YulBlock","src":"14902:335:30","statements":[{"nodeType":"YulAssignment","src":"14912:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14924:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14935:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14920:3:30"},"nodeType":"YulFunctionCall","src":"14920:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14912:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14955:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"14966:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14948:6:30"},"nodeType":"YulFunctionCall","src":"14948:25:30"},"nodeType":"YulExpressionStatement","src":"14948:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14993:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15004:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14989:3:30"},"nodeType":"YulFunctionCall","src":"14989:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15013:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15021:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15009:3:30"},"nodeType":"YulFunctionCall","src":"15009:31:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14982:6:30"},"nodeType":"YulFunctionCall","src":"14982:59:30"},"nodeType":"YulExpressionStatement","src":"14982:59:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15061:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15072:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15057:3:30"},"nodeType":"YulFunctionCall","src":"15057:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15081:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15089:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15077:3:30"},"nodeType":"YulFunctionCall","src":"15077:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15050:6:30"},"nodeType":"YulFunctionCall","src":"15050:47:30"},"nodeType":"YulExpressionStatement","src":"15050:47:30"},{"nodeType":"YulVariableDeclaration","src":"15106:20:30","value":{"kind":"number","nodeType":"YulLiteral","src":"15116:10:30","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15110:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15146:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15157:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15142:3:30"},"nodeType":"YulFunctionCall","src":"15142:18:30"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15166:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"15174:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15162:3:30"},"nodeType":"YulFunctionCall","src":"15162:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15135:6:30"},"nodeType":"YulFunctionCall","src":"15135:43:30"},"nodeType":"YulExpressionStatement","src":"15135:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15198:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15209:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15194:3:30"},"nodeType":"YulFunctionCall","src":"15194:19:30"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15219:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"15227:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15215:3:30"},"nodeType":"YulFunctionCall","src":"15215:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15187:6:30"},"nodeType":"YulFunctionCall","src":"15187:44:30"},"nodeType":"YulExpressionStatement","src":"15187:44:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14839:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14850:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14858:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14866:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14874:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14882:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14893:4:30","type":""}],"src":"14697:540:30"},{"body":{"nodeType":"YulBlock","src":"15289:89:30","statements":[{"body":{"nodeType":"YulBlock","src":"15316:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15318:16:30"},"nodeType":"YulFunctionCall","src":"15318:18:30"},"nodeType":"YulExpressionStatement","src":"15318:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15309:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15302:6:30"},"nodeType":"YulFunctionCall","src":"15302:13:30"},"nodeType":"YulIf","src":"15299:39:30"},{"nodeType":"YulAssignment","src":"15347:25:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15358:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15369:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15365:3:30"},"nodeType":"YulFunctionCall","src":"15365:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15354:3:30"},"nodeType":"YulFunctionCall","src":"15354:18:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15347:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15271:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15281:3:30","type":""}],"src":"15242:136:30"},{"body":{"nodeType":"YulBlock","src":"15557:181:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15574:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15585:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15567:6:30"},"nodeType":"YulFunctionCall","src":"15567:21:30"},"nodeType":"YulExpressionStatement","src":"15567:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15608:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15619:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15604:3:30"},"nodeType":"YulFunctionCall","src":"15604:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"15624:2:30","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15597:6:30"},"nodeType":"YulFunctionCall","src":"15597:30:30"},"nodeType":"YulExpressionStatement","src":"15597:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15647:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15658:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15643:3:30"},"nodeType":"YulFunctionCall","src":"15643:18:30"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"15663:33:30","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15636:6:30"},"nodeType":"YulFunctionCall","src":"15636:61:30"},"nodeType":"YulExpressionStatement","src":"15636:61:30"},{"nodeType":"YulAssignment","src":"15706:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15718:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15729:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15714:3:30"},"nodeType":"YulFunctionCall","src":"15714:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15706:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15534:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15548:4:30","type":""}],"src":"15383:355:30"},{"body":{"nodeType":"YulBlock","src":"15789:74:30","statements":[{"body":{"nodeType":"YulBlock","src":"15812:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"15814:16:30"},"nodeType":"YulFunctionCall","src":"15814:18:30"},"nodeType":"YulExpressionStatement","src":"15814:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15809:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15802:6:30"},"nodeType":"YulFunctionCall","src":"15802:9:30"},"nodeType":"YulIf","src":"15799:35:30"},{"nodeType":"YulAssignment","src":"15843:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15852:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"15855:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15848:3:30"},"nodeType":"YulFunctionCall","src":"15848:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"15843:1:30"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15774:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"15777:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"15783:1:30","type":""}],"src":"15743:120:30"},{"body":{"nodeType":"YulBlock","src":"16025:218:30","statements":[{"nodeType":"YulAssignment","src":"16035:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16047:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16058:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16043:3:30"},"nodeType":"YulFunctionCall","src":"16043:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16035:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"16070:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16088:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16093:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16084:3:30"},"nodeType":"YulFunctionCall","src":"16084:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"16097:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16080:3:30"},"nodeType":"YulFunctionCall","src":"16080:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16074:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16115:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16130:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"16138:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16126:3:30"},"nodeType":"YulFunctionCall","src":"16126:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16108:6:30"},"nodeType":"YulFunctionCall","src":"16108:34:30"},"nodeType":"YulExpressionStatement","src":"16108:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16162:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16173:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16158:3:30"},"nodeType":"YulFunctionCall","src":"16158:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16182:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"16190:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16178:3:30"},"nodeType":"YulFunctionCall","src":"16178:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16151:6:30"},"nodeType":"YulFunctionCall","src":"16151:43:30"},"nodeType":"YulExpressionStatement","src":"16151:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16214:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16225:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16210:3:30"},"nodeType":"YulFunctionCall","src":"16210:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"16230:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16203:6:30"},"nodeType":"YulFunctionCall","src":"16203:34:30"},"nodeType":"YulExpressionStatement","src":"16203:34:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15978:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15989:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15997:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16005:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16016:4:30","type":""}],"src":"15868:375:30"},{"body":{"nodeType":"YulBlock","src":"16422:170:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16439:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16450:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16432:6:30"},"nodeType":"YulFunctionCall","src":"16432:21:30"},"nodeType":"YulExpressionStatement","src":"16432:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16473:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16484:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16469:3:30"},"nodeType":"YulFunctionCall","src":"16469:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16489:2:30","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16462:6:30"},"nodeType":"YulFunctionCall","src":"16462:30:30"},"nodeType":"YulExpressionStatement","src":"16462:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16512:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16523:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16508:3:30"},"nodeType":"YulFunctionCall","src":"16508:18:30"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"16528:22:30","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16501:6:30"},"nodeType":"YulFunctionCall","src":"16501:50:30"},"nodeType":"YulExpressionStatement","src":"16501:50:30"},{"nodeType":"YulAssignment","src":"16560:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16572:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16583:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16568:3:30"},"nodeType":"YulFunctionCall","src":"16568:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16560:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16399:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16413:4:30","type":""}],"src":"16248:344:30"},{"body":{"nodeType":"YulBlock","src":"16734:137:30","statements":[{"nodeType":"YulVariableDeclaration","src":"16744:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16764:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16758:5:30"},"nodeType":"YulFunctionCall","src":"16758:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16748:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16806:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"16814:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16802:3:30"},"nodeType":"YulFunctionCall","src":"16802:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"16821:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"16826:6:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"16780:21:30"},"nodeType":"YulFunctionCall","src":"16780:53:30"},"nodeType":"YulExpressionStatement","src":"16780:53:30"},{"nodeType":"YulAssignment","src":"16842:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16853:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"16858:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16849:3:30"},"nodeType":"YulFunctionCall","src":"16849:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16842:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16710:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16715:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16726:3:30","type":""}],"src":"16597:274:30"},{"body":{"nodeType":"YulBlock","src":"17050:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17067:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17078:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17060:6:30"},"nodeType":"YulFunctionCall","src":"17060:21:30"},"nodeType":"YulExpressionStatement","src":"17060:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17101:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17112:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17097:3:30"},"nodeType":"YulFunctionCall","src":"17097:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17117:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17090:6:30"},"nodeType":"YulFunctionCall","src":"17090:30:30"},"nodeType":"YulExpressionStatement","src":"17090:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17140:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17151:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17136:3:30"},"nodeType":"YulFunctionCall","src":"17136:18:30"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"17156:34:30","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17129:6:30"},"nodeType":"YulFunctionCall","src":"17129:62:30"},"nodeType":"YulExpressionStatement","src":"17129:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17211:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17222:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17207:3:30"},"nodeType":"YulFunctionCall","src":"17207:18:30"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"17227:12:30","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17200:6:30"},"nodeType":"YulFunctionCall","src":"17200:40:30"},"nodeType":"YulExpressionStatement","src":"17200:40:30"},{"nodeType":"YulAssignment","src":"17249:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17261:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17272:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17257:3:30"},"nodeType":"YulFunctionCall","src":"17257:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17249:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17027:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17041:4:30","type":""}],"src":"16876:406:30"},{"body":{"nodeType":"YulBlock","src":"17461:179:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17478:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17489:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17471:6:30"},"nodeType":"YulFunctionCall","src":"17471:21:30"},"nodeType":"YulExpressionStatement","src":"17471:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17512:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17523:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17508:3:30"},"nodeType":"YulFunctionCall","src":"17508:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17528:2:30","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17501:6:30"},"nodeType":"YulFunctionCall","src":"17501:30:30"},"nodeType":"YulExpressionStatement","src":"17501:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17551:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17562:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17547:3:30"},"nodeType":"YulFunctionCall","src":"17547:18:30"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"17567:31:30","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17540:6:30"},"nodeType":"YulFunctionCall","src":"17540:59:30"},"nodeType":"YulExpressionStatement","src":"17540:59:30"},{"nodeType":"YulAssignment","src":"17608:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17620:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17631:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17616:3:30"},"nodeType":"YulFunctionCall","src":"17616:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17608:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17438:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17452:4:30","type":""}],"src":"17287:353:30"},{"body":{"nodeType":"YulBlock","src":"17766:98:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17783:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17794:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17776:6:30"},"nodeType":"YulFunctionCall","src":"17776:21:30"},"nodeType":"YulExpressionStatement","src":"17776:21:30"},{"nodeType":"YulAssignment","src":"17806:52:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17831:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17843:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17854:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17839:3:30"},"nodeType":"YulFunctionCall","src":"17839:18:30"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17814:16:30"},"nodeType":"YulFunctionCall","src":"17814:44:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17806:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17735:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17746:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17757:4:30","type":""}],"src":"17645:219:30"},{"body":{"nodeType":"YulBlock","src":"18043:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18060:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18071:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18053:6:30"},"nodeType":"YulFunctionCall","src":"18053:21:30"},"nodeType":"YulExpressionStatement","src":"18053:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18094:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18105:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18090:3:30"},"nodeType":"YulFunctionCall","src":"18090:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18110:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18083:6:30"},"nodeType":"YulFunctionCall","src":"18083:30:30"},"nodeType":"YulExpressionStatement","src":"18083:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18133:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18144:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18129:3:30"},"nodeType":"YulFunctionCall","src":"18129:18:30"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"18149:34:30","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18122:6:30"},"nodeType":"YulFunctionCall","src":"18122:62:30"},"nodeType":"YulExpressionStatement","src":"18122:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18204:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18215:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18200:3:30"},"nodeType":"YulFunctionCall","src":"18200:18:30"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"18220:8:30","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18193:6:30"},"nodeType":"YulFunctionCall","src":"18193:36:30"},"nodeType":"YulExpressionStatement","src":"18193:36:30"},{"nodeType":"YulAssignment","src":"18238:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18250:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18261:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18246:3:30"},"nodeType":"YulFunctionCall","src":"18246:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18238:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18020:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18034:4:30","type":""}],"src":"17869:402:30"}]},"contents":"{\n    { }\n    function validator_revert_contract_IBankV2(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IBankV2_$7313(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__to_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, iszero(iszero(value0)))\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), iszero(iszero(value6)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_boolt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_IBankV2(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_struct_Bet(value, pos)\n    {\n        mstore(pos, iszero(iszero(mload(value))))\n        let memberValue0 := mload(add(value, 0x20))\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(pos, 0x20), and(memberValue0, _1))\n        mstore(add(pos, 0x40), and(mload(add(value, 0x40)), _1))\n        mstore(add(pos, 0x60), mload(add(value, 0x60)))\n        mstore(add(pos, 0x80), mload(add(value, 0x80)))\n        mstore(add(pos, 0xa0), mload(add(value, 0xa0)))\n        mstore(add(pos, 0xc0), iszero(iszero(mload(add(value, 0xc0)))))\n    }\n    function abi_encode_tuple_t_struct$_Bet_$5150_memory_ptr__to_t_struct$_Bet_$5150_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        abi_encode_struct_Bet(value0, headStart)\n    }\n    function abi_encode_tuple_t_contract$_IBankV2_$7313__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint16(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, 0xffff))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FullCoinTossBet_$5196_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _2 := mload(srcPtr)\n            abi_encode_struct_Bet(mload(_2), pos)\n            let memberValue0 := mload(add(_2, _1))\n            mstore(add(pos, 0xe0), iszero(iszero(mload(memberValue0))))\n            mstore(add(pos, 256), iszero(iszero(mload(add(memberValue0, _1)))))\n            pos := add(pos, 0x0120)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function decrement_t_uint64(value) -> ret\n    {\n        let value_1 := and(value, 0xffffffffffffffff)\n        if iszero(value_1) { panic_error_0x11() }\n        ret := add(value_1, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256__to_t_address_payable_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bool_t_bool__to_t_uint256_t_uint256_t_bool_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        let _1 := 0xffffffff\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"57":[{"length":32,"start":1652},{"length":32,"start":1718}]},"linkReferences":{},"object":"6080604052600436106101815760003560e01c8063715018a6116100d1578063c2fb579f1161008a578063e397824011610064578063e397824014610553578063e486033914610573578063e89e106a146105d7578063f2fde38b146105ed57600080fd5b8063c2fb579f146104b6578063e051ece9146104e3578063e1fdb4b41461053357600080fd5b8063715018a6146103e957806376cdb03b146103fe57806378bcde22146104365780638456cb59146104565780638da5cb5b1461046b578063ac9650d81461048957600080fd5b80633aecd0e31161013e5780635bfe1630116101185780635bfe16301461034a5780635c975abb146103775780635ffe61461461039657806361f14f11146103b657600080fd5b80633aecd0e3146102c057806350462ea0146102e0578063594043fd146102f357600080fd5b8063090d23b91461018657806312065fe0146101a85780631b3ed722146101ca5780631d3c7b91146101e05780631fe543e3146101f657806322af00fa14610216575b600080fd5b34801561019257600080fd5b506101a66101a1366004611d01565b61060d565b005b3480156101b457600080fd5b50475b6040519081526020015b60405180910390f35b3480156101d657600080fd5b506101b7600e5481565b3480156101ec57600080fd5b506101b760075481565b34801561020257600080fd5b506101a6610211366004611d34565b610669565b34801561022257600080fd5b5061027b610231366004611dfd565b600b6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff808616966101009096046001600160a01b0390811696951694911687565b6040805197151588526001600160a01b03968716602089015294909516938601939093526060850191909152608084015260a0830152151560c082015260e0016101c1565b3480156102cc57600080fd5b506101b76102db366004611d01565b6106f6565b6101a66102ee366004611e24565b61077e565b3480156102ff57600080fd5b5061033a61030e366004611d01565b6001600160a01b03166000908152600a60205260409020546201000090046001600160401b0316151590565b60405190151581526020016101c1565b34801561035657600080fd5b5061036a610365366004611dfd565b610827565b6040516101c19190611ebb565b34801561038357600080fd5b50600054600160a01b900460ff1661033a565b3480156103a257600080fd5b506101a66103b1366004611dfd565b6108a6565b3480156103c257600080fd5b5061033a6103d1366004611dfd565b6000908152600b602052604090206005015460ff1690565b3480156103f557600080fd5b506101a66108b3565b34801561040a57600080fd5b5060025461041e906001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561044257600080fd5b506101a6610451366004611ec9565b6108c7565b34801561046257600080fd5b506101a661099e565b34801561047757600080fd5b506000546001600160a01b031661041e565b34801561049557600080fd5b506104a96104a4366004611f09565b6109c8565b6040516101c19190611fd5565b3480156104c257600080fd5b506104d66104d1366004612037565b610abd565b6040516101c19190612063565b3480156104ef57600080fd5b5061051c6104fe366004611dfd565b600d6020526000908152604090205460ff8082169161010090041682565b6040805192151583529015156020830152016101c1565b34801561053f57600080fd5b506101a661054e366004611dfd565b610bf0565b34801561055f57600080fd5b5060095461041e906001600160a01b031681565b34801561057f57600080fd5b506105b561058e366004611d01565b600a6020526000908152604090205461ffff8116906201000090046001600160401b031682565b6040805161ffff90931683526001600160401b039091166020830152016101c1565b3480156105e357600080fd5b506101b760085481565b3480156105f957600080fd5b506101a6610608366004611d01565b610d57565b610615610dcd565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb2612440679060200160405180910390a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e85760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6106f28282610e27565b5050565b6000806001600160a01b03831661070f57504792915050565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077791906120be565b9392505050565b61078661103f565b600061079d838361079861271061108c565b61109c565b606081810180516000908152600d6020908152604091829020805460ff19168a1515908117909155828601518287015194516080880151855191825293810193909352928201529394506001600160a01b03908116939116917f388b4fad58a4c74ad944d05888d8e83b64e28a3a71e0381a02c7d98440c63ac3910160405180910390a350505050565b61082f611c72565b506000908152600b6020908152604091829020825160e081018452815460ff808216151583526001600160a01b03610100909204821694830194909452600183015416938101939093526002810154606084015260038101546080840152600481015460a08401526005015416151560c082015290565b6108ae610dcd565b600e55565b6108bb610dcd565b6108c5600061152e565b565b6108cf610dcd565b6101908161ffff1611156108f657604051631c2d5dd360e21b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260409020546201000090046001600160401b03161561093c5760405163055212b760e51b815260040160405180910390fd5b6001600160a01b0382166000818152600a6020908152604091829020805461ffff191661ffff861690811790915591519182527f7dfd3ecb8ac83242184c019f85ca408558f2ac0a5a19af6be2a4aee697eac812910160405180910390a25050565b6109a6610dcd565b600054600160a01b900460ff16156109c0576108c561157e565b6108c56115d3565b6060816001600160401b038111156109e2576109e2611d1e565b604051908082528060200260200182016040528015610a1557816020015b6060815260200190600190039081610a005790505b50905060005b82811015610ab557610a8530858584818110610a3957610a396120d7565b9050602002810190610a4b91906120ed565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061161692505050565b828281518110610a9757610a976120d7565b60200260200101819052508080610aad90612150565b915050610a1b565b505b92915050565b60606000610acb848461163b565b9050600081516001600160401b03811115610ae857610ae8611d1e565b604051908082528060200260200182016040528015610b2157816020015b610b0e611cae565b815260200190600190039081610b065790505b50905060005b8251811015610be7576040518060400160405280848381518110610b4d57610b4d6120d7565b60200260200101518152602001600d6000868581518110610b7057610b706120d7565b60209081029190910181015160600151825281810192909252604090810160002081518083019092525460ff808216151583526101009091041615159181019190915290528251839083908110610bc957610bc96120d7565b60200260200101819052508080610bdf90612150565b915050610b27565b50949350505050565b610bf861180d565b6000818152600b60205260409020805460ff16151560011415610c2e576040516310d5f2bd60e11b815260040160405180910390fd5b6004810154610c3e90601e61216b565b421015610c5e576040516303de361f60e11b815260040160405180910390fd5b60018101546001600160a01b03166000908152600a6020526040902080546201000090046001600160401b0316816002610c9783612183565b82546001600160401b039182166101009390930a928302919092021990911617905550815460ff1916600190811783558201546001600160a01b0316610d1e57815460038301546040516101009092046001600160a01b0316916108fc82150291906000818181858888f19350505050158015610d18573d6000803e3d6000fd5b50610d49565b815460038301546001840154610d49926001600160a01b039182169261010090910490911690611867565b5050610d5460018055565b50565b610d5f610dcd565b6001600160a01b038116610dc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106df565b610d548161152e565b6000546001600160a01b031633146108c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106df565b6000828152600d60209081526040808320600b909252822083519192909160029085908390610e5857610e586120d7565b6020026020010151610e6a91906121bc565b6040805180820190915260008082526001602083015291925090818360028110610e9657610e966120d7565b6020020151855461ff00198116610100831515908102918217895592935060ff91821691161715151415610fa9578354600160ff199182168117808755600587018054909316821790925585015460038601546001600160a01b03918216926101009004909116906000610f098261108c565b9050806000610f1886856118cf565b90506000610f2682846121d0565b600254604051631f61502360e01b81526001600160a01b0389811660048301528a811660248301526044820184905260648201869052929350911690631f61502390608401600060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b5050505050505050505050610fc2565b835460ff19908116600117855560058501805490911690555b6001840154845460028601546003870154885460408051938452602084019290925260ff161515828201528415156060830152516001600160a01b0393841693610100909304909216917f61a9f4ed6fa1d9a386035ef6d352d6e5ff07bd93eb58025400302b462eb9b0639181900360800190a350505050505050565b600054600160a01b900460ff16156108c55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106df565b6000600e5482610ab791906121e7565b6110a4611c72565b6110ac61103f565b6110b461180d565b6001600160a01b038481166000818152600a602052604090819020600254915163cbe230c360e01b8152600481019390935292169063cbe230c390602401602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111339190612206565b15806111425750805461ffff16155b156111605760405163c455905560e01b815260040160405180910390fd5b60025460405163f6b2a2f160e01b81526001600160a01b038781166004830181905233939015928892600092169063f6b2a2f190602401602060405180830381865afa1580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d891906120be565b9050808210156111fd576040516289563d60e21b8152600481018290526024016106df565b6002546040516313c59cef60e11b81526001600160a01b038b81166004830152602482018a9052600092169063278b39de90604401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127391906120be565b9050808311156112c85783156112c4576001600160a01b0385166108fc61129a83866121d0565b6040518115909202916000818181858888f193505050501580156112c2573d6000803e3d6000fd5b505b8092505b50506003546005546002546006546040516305d3b1d360e41b81526004810193909352600160a01b9091046001600160401b03166024830152640100000000810461ffff16604483015263ffffffff808216606484015266010000000000009091041660848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906120be565b60088190555060006040518060e00160405280600015158152602001856001600160a01b031681526020018a6001600160a01b031681526020016008548152602001838152602001428152602001600015158152509050600c6000856001600160a01b03166001600160a01b03168152602001908152602001600020600854908060018154018082558091505060019003906000526020600020016000909190919091505580600b6000600854815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff0219169083151502179055509050508261151f5760025461151f906001600160a01b038b81169187911685611905565b94505050505061077760018055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611586611943565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6115db61103f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115b63390565b6060610777838360405180606001604052806027815260200161227e60279139611993565b6001600160a01b0382166000908152600c6020908152604080832080548251818502810185019093528083526060949383018282801561169a57602002820191906000526020600020905b815481526020019060010190808311611686575b50508351939450505050838110156116b0578093505b6000846001600160401b038111156116ca576116ca611d1e565b60405190808252806020026020018201604052801561170357816020015b6116f0611c72565b8152602001906001900390816116e85790505b5090508415611804576000825b61171a87856121d0565b81111561180157600b6000866117316001856121d0565b81518110611741576117416120d7565b6020908102919091018101518252818101929092526040908101600020815160e081018352815460ff808216151583526001600160a01b03610100909204821695830195909552600183015416928101929092526002810154606083015260038101546080830152600481015460a083015260050154909116151560c082015283518490849081106117d5576117d56120d7565b602002602001018190525081806117eb90612150565b92505080806117f990612223565b915050611710565b50505b95945050505050565b600260015414156118605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106df565b6002600155565b6040516001600160a01b0383166024820152604481018290526118ca90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a0b565b505050565b6001600160a01b0382166000908152600a6020526040812054612710906118fb90849061ffff166121e7565b610777919061223a565b6040516001600160a01b038085166024830152831660448201526064810182905261193d9085906323b872dd60e01b90608401611893565b50505050565b600054600160a01b900460ff166108c55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106df565b6060600080856001600160a01b0316856040516119b0919061224e565b600060405180830381855af49150503d80600081146119eb576040519150601f19603f3d011682016040523d82523d6000602084013e6119f0565b606091505b5091509150611a0186838387611ae0565b9695505050505050565b6000611a60826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b5e9092919063ffffffff16565b9050805160001480611a81575080806020019051810190611a819190612206565b6118ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106df565b60608315611b4c578251611b45576001600160a01b0385163b611b455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106df565b5081611b56565b611b568383611b6d565b949350505050565b6060611b568484600085611b97565b815115611b7d5781518083602001fd5b8060405162461bcd60e51b81526004016106df919061226a565b606082471015611bf85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106df565b600080866001600160a01b03168587604051611c14919061224e565b60006040518083038185875af1925050503d8060008114611c51576040519150601f19603f3d011682016040523d82523d6000602084013e611c56565b606091505b5091509150611c6787838387611ae0565b979650505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060400160405280611cc1611c72565b8152602001611ce760405180604001604052806000151581526020016000151581525090565b905290565b6001600160a01b0381168114610d5457600080fd5b600060208284031215611d1357600080fd5b813561077781611cec565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611d4757600080fd5b823591506020808401356001600160401b0380821115611d6657600080fd5b818601915086601f830112611d7a57600080fd5b813581811115611d8c57611d8c611d1e565b8060051b604051601f19603f83011681018181108582111715611db157611db1611d1e565b604052918252848201925083810185019189831115611dcf57600080fd5b938501935b82851015611ded57843584529385019392850192611dd4565b8096505050505050509250929050565b600060208284031215611e0f57600080fd5b5035919050565b8015158114610d5457600080fd5b600080600060608486031215611e3957600080fd5b8335611e4481611e16565b92506020840135611e5481611cec565b929592945050506040919091013590565b805115158252602081015160018060a01b0380821660208501528060408401511660408501525050606081015160608301526080810151608083015260a081015160a083015260c0810151151560c08301525050565b60e08101610ab78284611e65565b60008060408385031215611edc57600080fd5b8235611ee781611cec565b9150602083013561ffff81168114611efe57600080fd5b809150509250929050565b60008060208385031215611f1c57600080fd5b82356001600160401b0380821115611f3357600080fd5b818501915085601f830112611f4757600080fd5b813581811115611f5657600080fd5b8660208260051b8501011115611f6b57600080fd5b60209290920196919550909350505050565b60005b83811015611f98578181015183820152602001611f80565b8381111561193d5750506000910152565b60008151808452611fc1816020860160208601611f7d565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561202a57603f19888603018452612018858351611fa9565b94509285019290850190600101611ffc565b5092979650505050505050565b6000806040838503121561204a57600080fd5b823561205581611cec565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015611801578351612094848251611e65565b8501518051151560e08501528501511515610100840152928401926101209092019160010161207f565b6000602082840312156120d057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261210457600080fd5b8301803591506001600160401b0382111561211e57600080fd5b60200191503681900382131561213357600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156121645761216461213a565b5060010190565b6000821982111561217e5761217e61213a565b500190565b60006001600160401b0382168061219c5761219c61213a565b6000190192915050565b634e487b7160e01b600052601260045260246000fd5b6000826121cb576121cb6121a6565b500690565b6000828210156121e2576121e261213a565b500390565b60008160001904831182151516156122015761220161213a565b500290565b60006020828403121561221857600080fd5b815161077781611e16565b6000816122325761223261213a565b506000190190565b600082612249576122496121a6565b500490565b60008251612260818460208701611f7d565b9190910192915050565b6020815260006107776020830184611fa956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204fb91405c17bdb5ad62d8a106e09d7f765d0856ed1bc354f31e6eef2e925a02864736f6c634300080c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x181 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xC2FB579F GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE3978240 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE3978240 EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xE89E106A EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC2FB579F EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0xE051ECE9 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xE1FDB4B4 EQ PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x76CDB03B EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x78BCDE22 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x5BFE1630 GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x5BFE1630 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0x5FFE6146 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x61F14F11 EQ PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x50462EA0 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x594043FD EQ PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90D23B9 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x1B3ED722 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x1D3C7B91 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x22AF00FA EQ PUSH2 0x216 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D34 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x231 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 SWAP1 SWAP6 ADD SLOAD PUSH1 0xFF DUP1 DUP7 AND SWAP7 PUSH2 0x100 SWAP1 SWAP7 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP7 SWAP6 AND SWAP5 SWAP2 AND DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE SWAP5 SWAP1 SWAP6 AND SWAP4 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1E24 JUMP JUMPDEST PUSH2 0x77E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33A PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x36A PUSH2 0x365 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1EBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x33A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0x8A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33A PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x8B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x41E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC9 JUMP JUMPDEST PUSH2 0x8C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x99E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x41E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A9 PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1FD5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D6 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2037 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x2063 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51C PUSH2 0x4FE CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0xBF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x41E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B5 PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D01 JUMP JUMPDEST PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x615 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x10F5824683D64A0712038F2244E046B174A1CC57FBB8556BFDA5FFB261244067 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x6E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F2 DUP3 DUP3 PUSH2 0xE27 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x70F JUMPI POP SELFBALANCE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x753 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x777 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x786 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79D DUP4 DUP4 PUSH2 0x798 PUSH2 0x2710 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x109C JUMP JUMPDEST PUSH1 0x60 DUP2 DUP2 ADD DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP11 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 DUP7 ADD MLOAD DUP3 DUP8 ADD MLOAD SWAP5 MLOAD PUSH1 0x80 DUP9 ADD MLOAD DUP6 MLOAD SWAP2 DUP3 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP3 ADD MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP2 AND SWAP2 PUSH32 0x388B4FAD58A4C74AD944D05888D8E83B64E28A3A71E0381A02C7D98440C63AC3 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x82F PUSH2 0x1C72 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8AE PUSH2 0xDCD JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0x8BB PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x8C5 PUSH1 0x0 PUSH2 0x152E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8CF PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x190 DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1C2D5DD3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO PUSH2 0x93C JUMPI PUSH1 0x40 MLOAD PUSH4 0x55212B7 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7DFD3ECB8AC83242184C019F85CA408558F2AC0A5A19AF6BE2A4AEE697EAC812 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x9A6 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x8C5 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x8C5 PUSH2 0x15D3 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E2 JUMPI PUSH2 0x9E2 PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA15 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA00 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAB5 JUMPI PUSH2 0xA85 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xA39 JUMPI PUSH2 0xA39 PUSH2 0x20D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xA4B SWAP2 SWAP1 PUSH2 0x20ED JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1616 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA97 JUMPI PUSH2 0xA97 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xAAD SWAP1 PUSH2 0x2150 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA1B JUMP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xACB DUP5 DUP5 PUSH2 0x163B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAE8 JUMPI PUSH2 0xAE8 PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB21 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xB0E PUSH2 0x1CAE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB06 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xBE7 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB4D JUMPI PUSH2 0xB4D PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xD PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB70 JUMPI PUSH2 0xB70 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 MSTORE DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xBC9 JUMPI PUSH2 0xBC9 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xBDF SWAP1 PUSH2 0x2150 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB27 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBF8 PUSH2 0x180D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xC2E JUMPI PUSH1 0x40 MLOAD PUSH4 0x10D5F2BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SLOAD PUSH2 0xC3E SWAP1 PUSH1 0x1E PUSH2 0x216B JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DE361F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH1 0x2 PUSH2 0xC97 DUP4 PUSH2 0x2183 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 AND PUSH2 0x100 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP3 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP DUP2 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP4 SSTORE DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD1E JUMPI DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x100 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x8FC DUP3 ISZERO MUL SWAP2 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xD18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD49 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0xD49 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x100 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH2 0x1867 JUMP JUMPDEST POP POP PUSH2 0xD54 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD5F PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH2 0xD54 DUP2 PUSH2 0x152E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP4 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x2 SWAP1 DUP6 SWAP1 DUP4 SWAP1 PUSH2 0xE58 JUMPI PUSH2 0xE58 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE6A SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP2 DUP4 PUSH1 0x2 DUP2 LT PUSH2 0xE96 JUMPI PUSH2 0xE96 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP6 SLOAD PUSH2 0xFF00 NOT DUP2 AND PUSH2 0x100 DUP4 ISZERO ISZERO SWAP1 DUP2 MUL SWAP2 DUP3 OR DUP10 SSTORE SWAP3 SWAP4 POP PUSH1 0xFF SWAP2 DUP3 AND SWAP2 AND OR ISZERO ISZERO EQ ISZERO PUSH2 0xFA9 JUMPI DUP4 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR DUP1 DUP8 SSTORE PUSH1 0x5 DUP8 ADD DUP1 SLOAD SWAP1 SWAP4 AND DUP3 OR SWAP1 SWAP3 SSTORE DUP6 ADD SLOAD PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x100 SWAP1 DIV SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 PUSH2 0xF09 DUP3 PUSH2 0x108C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 PUSH2 0xF18 DUP7 DUP6 PUSH2 0x18CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF26 DUP3 DUP5 PUSH2 0x21D0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1F615023 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x1F615023 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP PUSH2 0xFC2 JUMP JUMPDEST DUP4 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 OR DUP6 SSTORE PUSH1 0x5 DUP6 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP5 SLOAD PUSH1 0x2 DUP7 ADD SLOAD PUSH1 0x3 DUP8 ADD SLOAD DUP9 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF AND ISZERO ISZERO DUP3 DUP3 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 PUSH2 0x100 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP2 PUSH32 0x61A9F4ED6FA1D9A386035EF6D352D6E5FF07BD93EB58025400302B462EB9B063 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SLOAD DUP3 PUSH2 0xAB7 SWAP2 SWAP1 PUSH2 0x21E7 JUMP JUMPDEST PUSH2 0x10A4 PUSH2 0x1C72 JUMP JUMPDEST PUSH2 0x10AC PUSH2 0x103F JUMP JUMPDEST PUSH2 0x10B4 PUSH2 0x180D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 SLOAD SWAP2 MLOAD PUSH4 0xCBE230C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND SWAP1 PUSH4 0xCBE230C3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x110F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1133 SWAP2 SWAP1 PUSH2 0x2206 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1142 JUMPI POP DUP1 SLOAD PUSH2 0xFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x1160 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC4559055 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF6B2A2F1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD DUP2 SWAP1 MSTORE CALLER SWAP4 SWAP1 ISZERO SWAP3 DUP9 SWAP3 PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xF6B2A2F1 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11D8 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT ISZERO PUSH2 0x11FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x89563D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x13C59CEF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x278B39DE SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1273 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x12C8 JUMPI DUP4 ISZERO PUSH2 0x12C4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x8FC PUSH2 0x129A DUP4 DUP7 PUSH2 0x21D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x12C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP1 SWAP3 POP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x5 SLOAD PUSH1 0x2 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH5 0x100000000 DUP2 DIV PUSH2 0xFFFF AND PUSH1 0x44 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x64 DUP5 ADD MSTORE PUSH7 0x1000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1364 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1388 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH1 0xC PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 SLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP1 PUSH1 0xB PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP3 PUSH2 0x151F JUMPI PUSH1 0x2 SLOAD PUSH2 0x151F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP2 DUP8 SWAP2 AND DUP6 PUSH2 0x1905 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x777 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1586 PUSH2 0x1943 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x15DB PUSH2 0x103F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x15B6 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x777 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x227E PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1993 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x169A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1686 JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP4 SWAP5 POP POP POP POP DUP4 DUP2 LT ISZERO PUSH2 0x16B0 JUMPI DUP1 SWAP4 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x16CA JUMPI PUSH2 0x16CA PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1703 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x16F0 PUSH2 0x1C72 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x16E8 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP3 JUMPDEST PUSH2 0x171A DUP8 DUP6 PUSH2 0x21D0 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1801 JUMPI PUSH1 0xB PUSH1 0x0 DUP7 PUSH2 0x1731 PUSH1 0x1 DUP6 PUSH2 0x21D0 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1741 JUMPI PUSH2 0x1741 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x5 ADD SLOAD SWAP1 SWAP2 AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE DUP4 MLOAD DUP5 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x17D5 JUMPI PUSH2 0x17D5 PUSH2 0x20D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP1 PUSH2 0x17EB SWAP1 PUSH2 0x2150 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x17F9 SWAP1 PUSH2 0x2223 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1710 JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1860 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x18CA SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1A0B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2710 SWAP1 PUSH2 0x18FB SWAP1 DUP5 SWAP1 PUSH2 0xFFFF AND PUSH2 0x21E7 JUMP JUMPDEST PUSH2 0x777 SWAP2 SWAP1 PUSH2 0x223A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x193D SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x1893 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x19B0 SWAP2 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x19EB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A01 DUP7 DUP4 DUP4 DUP8 PUSH2 0x1AE0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A60 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B5E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1A81 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1A81 SWAP2 SWAP1 PUSH2 0x2206 JUMP JUMPDEST PUSH2 0x18CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B4C JUMPI DUP3 MLOAD PUSH2 0x1B45 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1B45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6DF JUMP JUMPDEST POP DUP2 PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B56 DUP4 DUP4 PUSH2 0x1B6D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B56 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1B97 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1B7D JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DF SWAP2 SWAP1 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1BF8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1C14 SWAP2 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1C67 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1AE0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1CC1 PUSH2 0x1C72 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CE7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x777 DUP2 PUSH2 0x1CEC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1D66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D8C JUMPI PUSH2 0x1D8C PUSH2 0x1D1E JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1DB1 JUMPI PUSH2 0x1DB1 PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x1DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1DED JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x1DD4 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1E44 DUP2 PUSH2 0x1E16 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E54 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP6 ADD MSTORE DUP1 PUSH1 0x40 DUP5 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE POP POP PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0xAB7 DUP3 DUP5 PUSH2 0x1E65 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1EE7 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1EFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F98 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1F80 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x193D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FC1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1F7D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x202A JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2018 DUP6 DUP4 MLOAD PUSH2 0x1FA9 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1FFC JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x204A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2055 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1801 JUMPI DUP4 MLOAD PUSH2 0x2094 DUP5 DUP3 MLOAD PUSH2 0x1E65 JUMP JUMPDEST DUP6 ADD MLOAD DUP1 MLOAD ISZERO ISZERO PUSH1 0xE0 DUP6 ADD MSTORE DUP6 ADD MLOAD ISZERO ISZERO PUSH2 0x100 DUP5 ADD MSTORE SWAP3 DUP5 ADD SWAP3 PUSH2 0x120 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x207F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x211E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2164 JUMPI PUSH2 0x2164 PUSH2 0x213A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x217E JUMPI PUSH2 0x217E PUSH2 0x213A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP1 PUSH2 0x219C JUMPI PUSH2 0x219C PUSH2 0x213A JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x21CB JUMPI PUSH2 0x21CB PUSH2 0x21A6 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x21E2 JUMPI PUSH2 0x21E2 PUSH2 0x213A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2201 JUMPI PUSH2 0x2201 PUSH2 0x213A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x777 DUP2 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2232 JUMPI PUSH2 0x2232 PUSH2 0x213A JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2249 JUMPI PUSH2 0x2249 PUSH2 0x21A6 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2260 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1F7D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x777 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FA9 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212204FB914 SDIV 0xC1 PUSH28 0xDB5AD62D8A106E09D7F765D0856ED1BC354F31E6EEF2E925A0286473 PUSH16 0x6C634300080C00330000000000000000 ","sourceMap":"685:14219:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6019:239;;;;;;;;;;-1:-1:-1;6019:239:27;;;;;:::i;:::-;;:::i;:::-;;11911:97;;;;;;;;;;-1:-1:-1;11980:21:27;11911:97;;;582:25:30;;;570:2;555:18;11911:97:27;;;;;;;;8970:29;;;;;;;;;;;;;;;;1586:28;;;;;;;;;;;;;;;;6618:256:3;;;;;;;;;;-1:-1:-1;6618:256:3;;;;;:::i;:::-;;:::i;2771:35:27:-;;;;;;;;;;-1:-1:-1;2771:35:27;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2771:35:27;;;;;;;;;;;;;;;2467:14:30;;2460:22;2442:41;;-1:-1:-1;;;;;2557:15:30;;;2552:2;2537:18;;2530:43;2609:15;;;;2589:18;;;2582:43;;;;2656:2;2641:18;;2634:34;;;;2699:3;2684:19;;2677:35;2510:3;2728:19;;2721:35;2800:14;2793:22;2787:3;2772:19;;2765:51;2429:3;2414:19;2771:35:27;2123:699:30;12241:287:27;;;;;;;;;;-1:-1:-1;12241:287:27;;;;;:::i;:::-;;:::i;11588:317::-;;;;;;:::i;:::-;;:::i;5621:121::-;;;;;;;;;;-1:-1:-1;5621:121:27;;;;;:::i;:::-;-1:-1:-1;;;;;5704:13:27;5681:4;5704:13;;;:6;:13;;;;;:26;;;;-1:-1:-1;;;;;5704:26:27;:31;;;5621:121;;;;3840:14:30;;3833:22;3815:41;;3803:2;3788:18;5621:121:27;3675:187:30;10067:138:27;;;;;;;;;;-1:-1:-1;10067:138:27;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1615:84:11:-;;;;;;;;;;-1:-1:-1;1662:4:11;1685:7;-1:-1:-1;;;1685:7:11;;;;1615:84;;9006:97:27;;;;;;;;;;-1:-1:-1;9006:97:27;;;;;:::i;:::-;;:::i;10211:143::-;;;;;;;;;;-1:-1:-1;10211:143:27;;;;;:::i;:::-;10266:11;10308:8;;;:4;:8;;;;;10333:14;;;;;;10211:143;1824:101:10;;;;;;;;;;;;;:::i;831:19:27:-;;;;;;;;;;-1:-1:-1;831:19:27;;;;-1:-1:-1;;;;;831:19:27;;;;;;-1:-1:-1;;;;;4845:32:30;;;4827:51;;4815:2;4800:18;831:19:27;4665:219:30;6470:342:27;;;;;;;;;;-1:-1:-1;6470:342:27;;;;;:::i;:::-;;:::i;14004:140::-;;;;;;;;;;;;;:::i;1201:85:10:-;;;;;;;;;;-1:-1:-1;1247:7:10;1273:6;-1:-1:-1;;;;;1273:6:10;1201:85;;470:308:19;;;;;;;;;;-1:-1:-1;470:308:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;14342:560:27:-;;;;;;;;;;-1:-1:-1;14342:560:27;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4267:51::-;;;;;;;;;;-1:-1:-1;4267:51:27;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;8960:14:30;;8953:22;8935:41;;9019:14;;9012:22;9007:2;8992:18;;8985:50;8908:18;4267:51:27;8773:268:30;10472:603:27;;;;;;;;;;-1:-1:-1;10472:603:27;;;;;:::i;:::-;;:::i;1652:22::-;;;;;;;;;;-1:-1:-1;1652:22:27;;;;-1:-1:-1;;;;;1652:22:27;;;2354:39;;;;;;;;;;-1:-1:-1;2354:39:27;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2354:39:27;;;;;;;9246:6:30;9234:19;;;9216:38;;-1:-1:-1;;;;;9290:31:30;;;9285:2;9270:18;;9263:59;9189:18;2354:39:27;9046:282:30;1620:26:27;;;;;;;;;;;;;;;;2074:198:10;;;;;;;;;;-1:-1:-1;2074:198:10;;;;;:::i;:::-;;:::i;6019:239:27:-;1094:13:10;:11;:13::i;:::-;6201:4:27::1;:12:::0;;-1:-1:-1;;;;;;6201:12:27::1;-1:-1:-1::0;;;;;6201:12:27;::::1;::::0;;::::1;::::0;;;6228:23:::1;::::0;4827:51:30;;;6228:23:27::1;::::0;4815:2:30;4800:18;6228:23:27::1;;;;;;;6019:239:::0;:::o;6618:256:3:-;6717:10;-1:-1:-1;;;;;6731:14:3;6717:28;;6713:109;;6762:53;;-1:-1:-1;;;6762:53:3;;6788:10;6762:53;;;9545:34:30;-1:-1:-1;;;;;6800:14:3;9615:15:30;9595:18;;;9588:43;9480:18;;6762:53:3;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;12241:287:27:-;12302:7;;-1:-1:-1;;;;;7060:19:27;;12347:175;;-1:-1:-1;12403:21:27;;12241:287;-1:-1:-1;;12241:287:27:o;12347:175::-;12473:38;;-1:-1:-1;;;12473:38:27;;12505:4;12473:38;;;4827:51:30;-1:-1:-1;;;;;12473:23:27;;;;;4800:18:30;;12473:38:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12462:49;12241:287;-1:-1:-1;;;12241:287:27:o;11588:317::-;1239:19:11;:17;:19::i;:::-;11721:14:27::1;11738:46;11746:5;11753:11;11766:17;11777:5;11766:10;:17::i;:::-;11738:7;:46::i;:::-;11808:6;::::0;;::::1;::::0;;11795:20:::1;::::0;;;:12:::1;:20;::::0;;;;;;;;:32;;-1:-1:-1;;11795:32:27::1;::::0;::::1;;::::0;;::::1;::::0;;;11870:9;;::::1;::::0;11860:8;;::::1;::::0;11852:6;;11881:10:::1;::::0;::::1;::::0;11843:55;;10027:25:30;;;10068:18;;;10061:34;;;;10111:18;;;10104:50;11808:6:27;;-1:-1:-1;;;;;;11843:55:27;;::::1;::::0;;::::1;::::0;::::1;::::0;10000:18:30;11843:55:27::1;;;;;;;11711:194;11588:317:::0;;;:::o;10067:138::-;10120:18;;:::i;:::-;-1:-1:-1;10150:16:27;10169:8;;;:4;:8;;;;;;;;;10187:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10187:11:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10067:138::o;9006:97::-;1094:13:10;:11;:13::i;:::-;9077:10:27::1;:19:::0;9006:97::o;1824:101:10:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;6470:342:27:-;1094:13:10;:11;:13::i;:::-;6570:3:27::1;6558:9;:15;;;6554:73;;;6596:20;;-1:-1:-1::0;;;6596:20:27::1;;;;;;;;;;;6554:73;-1:-1:-1::0;;;;;5704:13:27;;5681:4;5704:13;;;:6;:13;;;;;:26;;;;-1:-1:-1;;;;;5704:26:27;:31;6636:80:::1;;6684:21;;-1:-1:-1::0;;;6684:21:27::1;;;;;;;;;;;6636:80;-1:-1:-1::0;;;;;6725:13:27;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;;:35;;-1:-1:-1;;6725:35:27::1;;::::0;::::1;::::0;;::::1;::::0;;;6775:30;;10309:38:30;;;6775:30:27::1;::::0;10282:18:30;6775:30:27::1;;;;;;;6470:342:::0;;:::o;14004:140::-;1094:13:10;:11;:13::i;:::-;1662:4:11;1685:7;-1:-1:-1;;;1685:7:11;;;;14050:88:27::1;;;14078:10;:8;:10::i;14050:88::-;14119:8;:6;:8::i;470:308:19:-:0;538:22;594:4;-1:-1:-1;;;;;582:24:19;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:34;;621:9;616:132;636:15;;;616:132;;;685:52;722:4;729;;734:1;729:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;685:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:28:19;;-1:-1:-1;;;685:52:19:i;:::-;672:7;680:1;672:10;;;;;;;;:::i;:::-;;;;;;:65;;;;653:3;;;;;:::i;:::-;;;;616:132;;;;470:308;;;;;:::o;14342:560:27:-;14448:24;14488:21;14512:34;14529:4;14535:10;14512:16;:34::i;:::-;14488:58;;14556:41;14635:8;:15;-1:-1:-1;;;;;14600:60:27;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;14556:104;;14675:9;14670:193;14690:8;:15;14686:1;:19;14670:193;;;14748:104;;;;;;;;14781:8;14790:1;14781:11;;;;;;;;:::i;:::-;;;;;;;14748:104;;;;14810:12;:28;14823:8;14832:1;14823:11;;;;;;;;:::i;:::-;;;;;;;;;;;;:14;;;14810:28;;;;;;;;;;;;;-1:-1:-1;14810:28:27;14748:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14726:19;;:16;;14743:1;;14726:19;;;;;;:::i;:::-;;;;;;:126;;;;14707:3;;;;;:::i;:::-;;;;14670:193;;;-1:-1:-1;14879:16:27;14342:560;-1:-1:-1;;;;14342:560:27:o;10472:603::-;2261:21:12;:19;:21::i;:::-;10535:15:27::1;10553:8:::0;;;:4:::1;:8;::::0;;;;10575:12;;::::1;;:20;;:12:::0;:20:::1;10571:167;;;10618:15;;-1:-1:-1::0;;;10618:15:27::1;;;;;;;;;;;10571:167;10672:13;::::0;::::1;::::0;:18:::1;::::0;10688:2:::1;10672:18;:::i;:::-;10654:15;:36;10650:88;;;10713:14;;-1:-1:-1::0;;;10713:14:27::1;;;;;;;;;;;10650:88;10777:9;::::0;::::1;::::0;-1:-1:-1;;;;;10777:9:27::1;10748:19;10770:17:::0;;;:6:::1;:17;::::0;;;;10797:20;;;;::::1;-1:-1:-1::0;;;;;10797:20:27::1;10770:17:::0;10797:18:::1;:20;::::0;::::1;:::i;:::-;::::0;;-1:-1:-1;;;;;10797:20:27;;::::1;;::::0;;;::::1;::::0;;::::1;::::0;;;::::1;;::::0;;::::1;;::::0;;-1:-1:-1;10828:19:27;;-1:-1:-1;;10828:19:27::1;-1:-1:-1::0;10828:19:27;;::::1;::::0;;10898:9;::::1;::::0;-1:-1:-1;;;;;10898:9:27::1;10894:175;;10945:8:::0;;10964:10:::1;::::0;::::1;::::0;10937:38:::1;::::0;10945:8:::1;::::0;;::::1;-1:-1:-1::0;;;;;10945:8:27::1;::::0;10937:38:::1;::::0;::::1;;::::0;10964:10;10945:8:::1;10937:38:::0;10945:8;10937:38;10964:10;10945:8;10937:38;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;10894:175;;;11037:8:::0;;11047:10:::1;::::0;::::1;::::0;11037:8:::1;11013:9:::0;::::1;::::0;11006:52:::1;::::0;-1:-1:-1;;;;;11013:9:27;;::::1;::::0;11037:8:::1;::::0;;::::1;::::0;;::::1;::::0;11006:30:::1;:52::i;:::-;10525:550;;2303:20:12::0;1716:1;2809:22;;2629:209;2303:20;10472:603:27;:::o;2074:198:10:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:10;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:10;;11821:2:30;2154:73:10::1;::::0;::::1;11803:21:30::0;11860:2;11840:18;;;11833:30;11899:34;11879:18;;;11872:62;-1:-1:-1;;;11950:18:30;;;11943:36;11996:19;;2154:73:10::1;11619:402:30::0;2154:73:10::1;2237:28;2256:8;2237:18;:28::i;1359:130::-:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:10;719:10:18;1422:23:10;1414:68;;;;-1:-1:-1;;;1414:68:10;;12228:2:30;1414:68:10;;;12210:21:30;;;12247:18;;;12240:30;12306:34;12286:18;;;12279:62;12358:18;;1414:68:10;12026:356:30;12534:1407:27;12670:31;12704:16;;;:12;:16;;;;;;;;12748:4;:8;;;;;12783:14;;12704:16;;12748:8;;12800:1;;12783:11;;12670:31;;12783:14;;;;:::i;:::-;;;;;;;:18;;;;:::i;:::-;12812:40;;;;;;;;;:24;:40;;;;;;;;12766:35;;-1:-1:-1;12812:40:27;;12766:35;12884:17;;;;;;;:::i;:::-;;;;;12911:35;;-1:-1:-1;;12911:35:27;;;;;;;;;;;;;;12884:17;;-1:-1:-1;12911:35:27;12979:16;;;;;;12961:34;;;12957:779;;;13011:19;;13026:4;-1:-1:-1;;13011:19:27;;;;;;;;13044:13;;;:20;;;;;;;;;;13094:9;;;13182:10;;;;-1:-1:-1;;;;;13094:9:27;;;;13011:19;13140:8;;;;;;-1:-1:-1;13300:21:27;13182:10;13300;:21::i;:::-;13283:38;-1:-1:-1;13283:38:27;13335:14;13393:26;13402:5;13409:9;13393:8;:26::i;:::-;13373:46;-1:-1:-1;13434:20:27;13457:18;13373:46;13457:6;:18;:::i;:::-;13590:4;;:49;;-1:-1:-1;;;13590:49:27;;-1:-1:-1;;;;;13069:15:30;;;13590:49:27;;;13051:34:30;13121:15;;;13101:18;;;13094:43;13153:18;;;13146:34;;;13196:18;;;13189:34;;;13434:41:27;;-1:-1:-1;13590:4:27;;;:11;;12985:19:30;;13590:49:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12997:654;;;;;;;12957:779;;;13671:19;;-1:-1:-1;;13671:19:27;;;13686:4;13671:19;;;13704:13;;;:21;;;;;;;12957:779;13811:9;;;;13789:8;;13769:6;;;;13834:10;;;;13858:16;;13751:183;;;13453:25:30;;;13509:2;13494:18;;13487:34;;;;13858:16:27;;13564:14:30;13557:22;13537:18;;;13530:50;13623:14;;13616:22;13611:2;13596:18;;13589:50;13751:183:27;-1:-1:-1;;;;;13811:9:27;;;;;13789:8;;;;;;;13751:183;;;;;13440:3:30;13751:183:27;;;12660:1281;;;;;12534:1407;;:::o;1767:106:11:-;1662:4;1685:7;-1:-1:-1;;;1685:7:11;;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:11;;13852:2:30;1828:38:11;;;13834:21:30;13891:2;13871:18;;;13864:30;-1:-1:-1;;;13910:18:30;;;13903:46;13966:18;;1828:38:11;13650:340:30;11241:116:27;11302:7;11340:10;;11328:9;:22;;;;:::i;7092:1872::-;7242:10;;:::i;:::-;1239:19:11;:17;:19::i;:::-;2261:21:12::1;:19;:21::i;:::-;-1:-1:-1::0;;;;;7286:20:27;;::::2;7264:19;7286:20:::0;;;:6:::2;:20;::::0;;;;;;7333:4:::2;::::0;:33;;-1:-1:-1;;;7333:33:27;;::::2;::::0;::::2;4827:51:30::0;;;;7286:20:27;7333:4:::2;::::0;:19:::2;::::0;4800:18:30;;7333:33:27::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:42;::::0;:66:::2;;-1:-1:-1::0;7379:15:27;;::::2;;:20:::0;7333:66:::2;7316:142;;;7431:16;;-1:-1:-1::0;;;7431:16:27::2;;;;;;;;;;;7316:142;7636:4;::::0;:34:::2;::::0;-1:-1:-1;;;7636:34:27;;-1:-1:-1;;;;;7521:26:27;;::::2;7636:34;::::0;::::2;4827:51:30::0;;;7483:10:27::2;::::0;7521:26;;;7577:11;;7468:12:::2;::::0;7636:4:::2;::::0;:20:::2;::::0;4800:18:30;;7636:34:27::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7613:57;;7700:12;7688:9;:24;7684:101;;;7739:31;::::0;-1:-1:-1;;;7739:31:27;;::::2;::::0;::::2;582:25:30::0;;;555:18;;7739:31:27::2;436:177:30::0;7684:101:27::2;7822:4;::::0;:41:::2;::::0;-1:-1:-1;;;7822:41:27;;-1:-1:-1;;;;;14610:32:30;;;7822:41:27::2;::::0;::::2;14592:51:30::0;14659:18;;;14652:34;;;7799:20:27::2;::::0;7822:4:::2;::::0;:20:::2;::::0;14565:18:30;;7822:41:27::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7799:64;;7893:12;7881:9;:24;7877:209;;;7929:10;7925:105;;;-1:-1:-1::0;;;;;7963:22:27;::::2;:48;7986:24;7998:12:::0;7986:9;:24:::2;:::i;:::-;7963:48;::::0;;::::2;::::0;;::::2;::::0;::::2;::::0;;;;;;::::2;;;;;;;;;;;;;::::0;::::2;;;;;;7925:105;8059:12;8047:24;;7877:209;-1:-1:-1::0;;8120:11:27::2;::::0;8164:7:::2;::::0;8185:16:::2;::::0;8215:20:::2;::::0;8120:177:::2;::::0;-1:-1:-1;;;8120:177:27;;8215:20:::2;8120:177:::0;::::2;14948:25:30::0;;;;-1:-1:-1;;;8185:16:27;;::::2;-1:-1:-1::0;;;;;8185:16:27::2;14989:18:30::0;;;14982:59;8215:20:27;;::::2;;;15057:18:30::0;;;15050:47;8249:16:27::2;::::0;;::::2;15142:18:30::0;;;15135:43;8279:8:27;;;::::2;;15194:19:30::0;;;15187:44;-1:-1:-1;;;;;8120:11:27;;::::2;::::0;:30:::2;::::0;14920:19:30;;8120:177:27::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8106:11;:191;;;;8308:17;8328:198;;;;;;;;8345:5;8328:198;;;;;;8372:4;-1:-1:-1::0;;;;;8328:198:27::2;;;;;8391:12;-1:-1:-1::0;;;;;8328:198:27::2;;;;;8417:11;;8328:198;;;;8442:9;8328:198;;;;8465:15;8328:198;;;;8494:5;8328:198;;;;::::0;8308:218:::2;;8536:9;:15;8546:4;-1:-1:-1::0;;;;;8536:15:27::2;-1:-1:-1::0;;;;;8536:15:27::2;;;;;;;;;;;;8557:11;;8536:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8599:6;8579:4;:17;8584:11;;8579:17;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;8579:26:27::2;;;;;-1:-1:-1::0;;;;;8579:26:27::2;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;8579:26:27::2;;;;;-1:-1:-1::0;;;;;8579:26:27::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8662:10;8657:277;;8773:4;::::0;8688:131:::2;::::0;-1:-1:-1;;;;;8688:37:27;;::::2;::::0;8743:4;;8773::::2;8796:9:::0;8688:37:::2;:131::i;:::-;8951:6:::0;-1:-1:-1;;;;;2303:20:12::1;1716:1:::0;2809:22;;2629:209;2426:187:10;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:10;;;-1:-1:-1;;;;;;2534:17:10;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;2433:117:11:-;1486:16;:14;:16::i;:::-;2501:5:::1;2491:15:::0;;-1:-1:-1;;;;2491:15:11::1;::::0;;2521:22:::1;719:10:18::0;2530:12:11::1;2521:22;::::0;-1:-1:-1;;;;;4845:32:30;;;4827:51;;4815:2;4800:18;2521:22:11::1;;;;;;;2433:117::o:0;2186:115::-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;;;2245:14:11::1;-1:-1:-1::0;;;2245:14:11::1;::::0;;2274:20:::1;2281:12;719:10:18::0;;640:96;6674:198:17;6757:12;6788:77;6809:6;6817:4;6788:77;;;;;;;;;;;;;;;;;:20;:77::i;9387:674:27:-;-1:-1:-1;;;;;9553:15:27;;9522:28;9553:15;;;:9;:15;;;;;;;;9522:46;;;;;;;;;;;;;;;;;9494:12;;9522:28;:46;;9553:15;9522:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9599:18:27;;9522:46;;-1:-1:-1;;;;9632:23:27;;;9628:77;;;9684:10;9671:23;;9628:77;9715:21;9749:10;-1:-1:-1;;;;;9739:21:27;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;9715:45:27;-1:-1:-1;9774:15:27;;9770:259;;9805:21;9857:10;9840:179;9873:23;9886:10;9873;:23;:::i;:::-;9869:1;:27;9840:179;;;9947:4;:24;9952:11;9964:5;9968:1;9964;:5;:::i;:::-;9952:18;;;;;;;;:::i;:::-;;;;;;;;;;;;9947:24;;;;;;;;;;;;;-1:-1:-1;9947:24:27;9921:50;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9921:50:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;;:8;;9930:13;;9921:23;;;;;;:::i;:::-;;;;;;:50;;;;9989:15;;;;;:::i;:::-;;;;9898:3;;;;;:::i;:::-;;;;9840:179;;;;9791:238;9770:259;10046:8;9387:674;-1:-1:-1;;;;;9387:674:27:o;2336:287:12:-;1759:1;2468:7;;:19;;2460:63;;;;-1:-1:-1;;;2460:63:12;;15585:2:30;2460:63:12;;;15567:21:30;15624:2;15604:18;;;15597:30;15663:33;15643:18;;;15636:61;15714:18;;2460:63:12;15383:355:30;2460:63:12;1759:1;2598:7;:18;2336:287::o;941:175:16:-;1050:58;;-1:-1:-1;;;;;14610:32:30;;1050:58:16;;;14592:51:30;14659:18;;;14652:34;;;1023:86:16;;1043:5;;-1:-1:-1;;;1073:23:16;14565:18:30;;1050:58:16;;;;-1:-1:-1;;1050:58:16;;;;;;;;;;;;;;-1:-1:-1;;;;;1050:58:16;-1:-1:-1;;;;;;1050:58:16;;;;;;;;;;1023:19;:86::i;:::-;941:175;;;:::o;5748:174:27:-;-1:-1:-1;;;;;5874:13:27;;5843:7;5874:13;;;:6;:13;;;;;:23;5910:5;;5874:32;;5900:6;;5874:23;;:32;:::i;:::-;5873:42;;;;:::i;1355:203:16:-;1482:68;;-1:-1:-1;;;;;16126:15:30;;;1482:68:16;;;16108:34:30;16178:15;;16158:18;;;16151:43;16210:18;;;16203:34;;;1455:96:16;;1475:5;;-1:-1:-1;;;1505:27:16;16043:18:30;;1482:68:16;15868:375:30;1455:96:16;1355:203;;;;:::o;1945:106:11:-;1662:4;1685:7;-1:-1:-1;;;1685:7:11;;;;2003:41;;;;-1:-1:-1;;;2003:41:11;;16450:2:30;2003:41:11;;;16432:21:30;16489:2;16469:18;;;16462:30;-1:-1:-1;;;16508:18:30;;;16501:50;16568:18;;2003:41:11;16248:344:30;7058:325:17;7199:12;7224;7238:23;7265:6;-1:-1:-1;;;;;7265:19:17;7285:4;7265:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7223:67;;;;7307:69;7334:6;7342:7;7351:10;7363:12;7307:26;:69::i;:::-;7300:76;7058:325;-1:-1:-1;;;;;;7058:325:17:o;5173:642:16:-;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;-1:-1:-1;;;;;5618:27:16;;;:69;;;;;:::i;:::-;5592:95;;5705:10;:17;5726:1;5705:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5697:111;;;;-1:-1:-1;;;5697:111:16;;17078:2:30;5697:111:16;;;17060:21:30;17117:2;17097:18;;;17090:30;17156:34;17136:18;;;17129:62;-1:-1:-1;;;17207:18:30;;;17200:40;17257:19;;5697:111:16;16876:406:30;7671:628:17;7851:12;7879:7;7875:418;;;7906:17;;7902:286;;-1:-1:-1;;;;;1702:19:17;;;8113:60;;;;-1:-1:-1;;;8113:60:17;;17489:2:30;8113:60:17;;;17471:21:30;17528:2;17508:18;;;17501:30;17567:31;17547:18;;;17540:59;17616:18;;8113:60:17;17287:353:30;8113:60:17;-1:-1:-1;8208:10:17;8201:17;;7875:418;8249:33;8257:10;8269:12;8249:7;:33::i;:::-;7671:628;;;;;;:::o;4108:223::-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;8821:540::-;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:17;;;;;;;;:::i;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;-1:-1:-1;;;5354:81:17;;18071:2:30;5354:81:17;;;18053:21:30;18110:2;18090:18;;;18083:30;18149:34;18129:18;;;18122:62;-1:-1:-1;;;18200:18:30;;;18193:36;18246:19;;5354:81:17;17869:402:30;5354:81:17;5446:12;5460:23;5487:6;-1:-1:-1;;;;;5487:11:17;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:17:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:140:30:-;-1:-1:-1;;;;;98:31:30;;88:42;;78:70;;144:1;141;134:12;159:272;234:6;287:2;275:9;266:7;262:23;258:32;255:52;;;303:1;300;293:12;255:52;342:9;329:23;361:40;395:5;361:40;:::i;618:127::-;679:10;674:3;670:20;667:1;660:31;710:4;707:1;700:15;734:4;731:1;724:15;750:1183;843:6;851;904:2;892:9;883:7;879:23;875:32;872:52;;;920:1;917;910:12;872:52;956:9;943:23;933:33;;985:2;1038;1027:9;1023:18;1010:32;-1:-1:-1;;;;;1102:2:30;1094:6;1091:14;1088:34;;;1118:1;1115;1108:12;1088:34;1156:6;1145:9;1141:22;1131:32;;1201:7;1194:4;1190:2;1186:13;1182:27;1172:55;;1223:1;1220;1213:12;1172:55;1259:2;1246:16;1281:2;1277;1274:10;1271:36;;;1287:18;;:::i;:::-;1333:2;1330:1;1326:10;1365:2;1359:9;1428:2;1424:7;1419:2;1415;1411:11;1407:25;1399:6;1395:38;1483:6;1471:10;1468:22;1463:2;1451:10;1448:18;1445:46;1442:72;;;1494:18;;:::i;:::-;1530:2;1523:22;1580:18;;;1614:15;;;;-1:-1:-1;1656:11:30;;;1652:20;;;1684:19;;;1681:39;;;1716:1;1713;1706:12;1681:39;1740:11;;;;1760:142;1776:6;1771:3;1768:15;1760:142;;;1842:17;;1830:30;;1793:12;;;;1880;;;;1760:142;;;1921:6;1911:16;;;;;;;;750:1183;;;;;:::o;1938:180::-;1997:6;2050:2;2038:9;2029:7;2025:23;2021:32;2018:52;;;2066:1;2063;2056:12;2018:52;-1:-1:-1;2089:23:30;;1938:180;-1:-1:-1;1938:180:30:o;3088:118::-;3174:5;3167:13;3160:21;3153:5;3150:32;3140:60;;3196:1;3193;3186:12;3211:459;3285:6;3293;3301;3354:2;3342:9;3333:7;3329:23;3325:32;3322:52;;;3370:1;3367;3360:12;3322:52;3409:9;3396:23;3428:28;3450:5;3428:28;:::i;:::-;3475:5;-1:-1:-1;3532:2:30;3517:18;;3504:32;3545:42;3504:32;3545:42;:::i;:::-;3211:459;;3606:7;;-1:-1:-1;;;3660:2:30;3645:18;;;;3632:32;;3211:459::o;3867:553::-;3956:5;3950:12;3943:20;3936:28;3931:3;3924:41;4011:4;4004:5;4000:16;3994:23;4053:1;4049;4044:3;4040:11;4036:19;4105:2;4091:12;4087:21;4080:4;4075:3;4071:14;4064:45;4170:2;4162:4;4155:5;4151:16;4145:23;4141:32;4134:4;4129:3;4125:14;4118:56;;;4223:4;4216:5;4212:16;4206:23;4199:4;4194:3;4190:14;4183:47;4279:4;4272:5;4268:16;4262:23;4255:4;4250:3;4246:14;4239:47;4335:4;4328:5;4324:16;4318:23;4311:4;4306:3;4302:14;4295:47;4405:4;4398:5;4394:16;4388:23;4381:31;4374:39;4367:4;4362:3;4358:14;4351:63;3867:553;;:::o;4425:235::-;4601:3;4586:19;;4614:40;4590:9;4636:6;4614:40;:::i;4889:424::-;4956:6;4964;5017:2;5005:9;4996:7;4992:23;4988:32;4985:52;;;5033:1;5030;5023:12;4985:52;5072:9;5059:23;5091:40;5125:5;5091:40;:::i;:::-;5150:5;-1:-1:-1;5207:2:30;5192:18;;5179:32;5255:6;5242:20;;5230:33;;5220:61;;5277:1;5274;5267:12;5220:61;5300:7;5290:17;;;4889:424;;;;;:::o;5526:626::-;5623:6;5631;5684:2;5672:9;5663:7;5659:23;5655:32;5652:52;;;5700:1;5697;5690:12;5652:52;5740:9;5727:23;-1:-1:-1;;;;;5810:2:30;5802:6;5799:14;5796:34;;;5826:1;5823;5816:12;5796:34;5864:6;5853:9;5849:22;5839:32;;5909:7;5902:4;5898:2;5894:13;5890:27;5880:55;;5931:1;5928;5921:12;5880:55;5971:2;5958:16;5997:2;5989:6;5986:14;5983:34;;;6013:1;6010;6003:12;5983:34;6066:7;6061:2;6051:6;6048:1;6044:14;6040:2;6036:23;6032:32;6029:45;6026:65;;;6087:1;6084;6077:12;6026:65;6118:2;6110:11;;;;;6140:6;;-1:-1:-1;5526:626:30;;-1:-1:-1;;;;5526:626:30:o;6157:258::-;6229:1;6239:113;6253:6;6250:1;6247:13;6239:113;;;6329:11;;;6323:18;6310:11;;;6303:39;6275:2;6268:10;6239:113;;;6370:6;6367:1;6364:13;6361:48;;;-1:-1:-1;;6405:1:30;6387:16;;6380:27;6157:258::o;6420:257::-;6461:3;6499:5;6493:12;6526:6;6521:3;6514:19;6542:63;6598:6;6591:4;6586:3;6582:14;6575:4;6568:5;6564:16;6542:63;:::i;:::-;6659:2;6638:15;-1:-1:-1;;6634:29:30;6625:39;;;;6666:4;6621:50;;6420:257;-1:-1:-1;;6420:257:30:o;6682:800::-;6842:4;6871:2;6911;6900:9;6896:18;6941:2;6930:9;6923:21;6964:6;6999;6993:13;7030:6;7022;7015:22;7068:2;7057:9;7053:18;7046:25;;7130:2;7120:6;7117:1;7113:14;7102:9;7098:30;7094:39;7080:53;;7168:2;7160:6;7156:15;7189:1;7199:254;7213:6;7210:1;7207:13;7199:254;;;7306:2;7302:7;7290:9;7282:6;7278:22;7274:36;7269:3;7262:49;7334:39;7366:6;7357;7351:13;7334:39;:::i;:::-;7324:49;-1:-1:-1;7431:12:30;;;;7396:15;;;;7235:1;7228:9;7199:254;;;-1:-1:-1;7470:6:30;;6682:800;-1:-1:-1;;;;;;;6682:800:30:o;7487:324::-;7555:6;7563;7616:2;7604:9;7595:7;7591:23;7587:32;7584:52;;;7632:1;7629;7622:12;7584:52;7671:9;7658:23;7690:40;7724:5;7690:40;:::i;:::-;7749:5;7801:2;7786:18;;;;7773:32;;-1:-1:-1;;;7487:324:30:o;7816:952::-;8053:2;8105:21;;;8175:13;;8078:18;;;8197:22;;;8024:4;;8053:2;8276:15;;;;8250:2;8235:18;;;8024:4;8319:423;8333:6;8330:1;8327:13;8319:423;;;8398:6;8392:13;8418:37;8451:3;8446:2;8440:9;8418:37;:::i;:::-;8494:11;;8488:18;8556:19;;8549:27;8542:35;8535:4;8526:14;;8519:59;8633:21;;8627:28;8620:36;8613:44;8607:3;8598:13;;8591:67;8717:15;;;;8687:6;8678:16;;;;8355:1;8348:9;8319:423;;9642:184;9712:6;9765:2;9753:9;9744:7;9740:23;9736:32;9733:52;;;9781:1;9778;9771:12;9733:52;-1:-1:-1;9804:16:30;;9642:184;-1:-1:-1;9642:184:30:o;10358:127::-;10419:10;10414:3;10410:20;10407:1;10400:31;10450:4;10447:1;10440:15;10474:4;10471:1;10464:15;10490:521;10567:4;10573:6;10633:11;10620:25;10727:2;10723:7;10712:8;10696:14;10692:29;10688:43;10668:18;10664:68;10654:96;;10746:1;10743;10736:12;10654:96;10773:33;;10825:20;;;-1:-1:-1;;;;;;10857:30:30;;10854:50;;;10900:1;10897;10890:12;10854:50;10933:4;10921:17;;-1:-1:-1;10964:14:30;10960:27;;;10950:38;;10947:58;;;11001:1;10998;10991:12;10947:58;10490:521;;;;;:::o;11016:127::-;11077:10;11072:3;11068:20;11065:1;11058:31;11108:4;11105:1;11098:15;11132:4;11129:1;11122:15;11148:135;11187:3;-1:-1:-1;;11208:17:30;;11205:43;;;11228:18;;:::i;:::-;-1:-1:-1;11275:1:30;11264:13;;11148:135::o;11288:128::-;11328:3;11359:1;11355:6;11352:1;11349:13;11346:39;;;11365:18;;:::i;:::-;-1:-1:-1;11401:9:30;;11288:128::o;11421:193::-;11459:3;-1:-1:-1;;;;;11496:5:30;11492:30;11541:7;11531:41;;11552:18;;:::i;:::-;-1:-1:-1;;11588:20:30;;11421:193;-1:-1:-1;;11421:193:30:o;12387:127::-;12448:10;12443:3;12439:20;12436:1;12429:31;12479:4;12476:1;12469:15;12503:4;12500:1;12493:15;12519:112;12551:1;12577;12567:35;;12582:18;;:::i;:::-;-1:-1:-1;12616:9:30;;12519:112::o;12636:125::-;12676:4;12704:1;12701;12698:8;12695:34;;;12709:18;;:::i;:::-;-1:-1:-1;12746:9:30;;12636:125::o;13995:168::-;14035:7;14101:1;14097;14093:6;14089:14;14086:1;14083:21;14078:1;14071:9;14064:17;14060:45;14057:71;;;14108:18;;:::i;:::-;-1:-1:-1;14148:9:30;;13995:168::o;14168:245::-;14235:6;14288:2;14276:9;14267:7;14263:23;14259:32;14256:52;;;14304:1;14301;14294:12;14256:52;14336:9;14330:16;14355:28;14377:5;14355:28;:::i;15242:136::-;15281:3;15309:5;15299:39;;15318:18;;:::i;:::-;-1:-1:-1;;;15354:18:30;;15242:136::o;15743:120::-;15783:1;15809;15799:35;;15814:18;;:::i;:::-;-1:-1:-1;15848:9:30;;15743:120::o;16597:274::-;16726:3;16764:6;16758:13;16780:53;16826:6;16821:3;16814:4;16806:6;16802:17;16780:53;:::i;:::-;16849:16;;;;;16597:274;-1:-1:-1;;16597:274:30:o;17645:219::-;17794:2;17783:9;17776:21;17757:4;17814:44;17854:2;17843:9;17839:18;17831:6;17814:44;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1784400","executionCost":"infinite","totalCost":"infinite"},"external":{"bank()":"2382","bets(uint256)":"13353","coinTossBets(uint256)":"2564","getBalance()":"218","getBetData(uint256)":"13729","getBetStatus(uint256)":"2567","getLastUserBets(address,uint256)":"infinite","getTokenBalance(address)":"infinite","hasPendingBets(address)":"2662","multicall(bytes[])":"infinite","multiplier()":"2352","owner()":"2442","pause()":"infinite","paused()":"2388","rawFulfillRandomWords(uint256,uint256[])":"infinite","refundBet(uint256)":"infinite","renounceOwnership()":"infinite","s_owner()":"2381","s_randomWords()":"2374","s_requestId()":"2372","setBank(address)":"27806","setHouseEdge(address,uint16)":"30626","tokens(address)":"2668","transferOwnership(address)":"infinite","updateMultiplier(uint256)":"24577","wager(bool,address,uint256)":"infinite"},"internal":{"_getFees(address,uint256)":"2384","_getLastUserBets(address,uint256)":"infinite","_getPayout(uint256)":"2233","_isGasToken(address)":"infinite","_newBet(address,uint256,uint256)":"infinite","fulfillRandomWords(uint256,uint256[] memory)":"infinite","getMultiplier()":"infinite"}},"methodIdentifiers":{"bank()":"76cdb03b","bets(uint256)":"22af00fa","coinTossBets(uint256)":"e051ece9","getBalance()":"12065fe0","getBetData(uint256)":"5bfe1630","getBetStatus(uint256)":"61f14f11","getLastUserBets(address,uint256)":"c2fb579f","getTokenBalance(address)":"3aecd0e3","hasPendingBets(address)":"594043fd","multicall(bytes[])":"ac9650d8","multiplier()":"1b3ed722","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","refundBet(uint256)":"e1fdb4b4","renounceOwnership()":"715018a6","s_owner()":"e3978240","s_randomWords()":"1d3c7b91","s_requestId()":"e89e106a","setBank(address)":"090d23b9","setHouseEdge(address,uint16)":"78bcde22","tokens(address)":"e4860339","transferOwnership(address)":"f2fde38b","updateMultiplier(uint256)":"5ffe6146","wager(bool,address,uint256)":"50462ea0"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveHouseEdge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPendingBet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasPendingBets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"UnderMinBetAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongGasValueToCoverFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainlinkVRFCost\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rolled\",\"type\":\"bool\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"SetHouseEdge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBankV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"betStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinTossBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rolled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"betStatus\",\"type\":\"bool\"}],\"internalType\":\"struct CoinTossV5.Bet\",\"name\":\"betData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getLastUserBets\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"betStatus\",\"type\":\"bool\"}],\"internalType\":\"struct CoinTossV5.Bet\",\"name\":\"bet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rolled\",\"type\":\"bool\"}],\"internalType\":\"struct CoinTossV5.CoinTossBet\",\"name\":\"coinTossBet\",\"type\":\"tuple\"}],\"internalType\":\"struct CoinTossV5.FullCoinTossBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPendingBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBankV2\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"setHouseEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"pendingCount\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"wager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"UnderMinBetAmount(uint256)\":[{\"params\":{\"minBetAmount\":\"Bet amount.\"}}]},\"events\":{\"BetRefunded(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"Number of tokens refunded.\",\"chainlinkVRFCost\":\"The Chainlink VRF cost refunded to player.\",\"id\":\"The bet ID.\",\"user\":\"Address of the gamer.\"}},\"PlaceBet(uint256,address,address,uint256,bool)\":{\"params\":{\"amount\":\"The bet amount.\",\"face\":\"The chosen coin face.\",\"id\":\"The bet ID.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"Roll(uint256,address,address,uint256,bool,bool)\":{\"params\":{\"amount\":\"The bet amount.\",\"face\":\"The chosen coin face.\",\"id\":\"The bet ID.\",\"rolled\":\"The rolled coin face.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"SetBank(address)\":{\"params\":{\"bank\":\"Address of the bank contract.\"}},\"SetHouseEdge(address,uint16)\":{\"params\":{\"houseEdge\":\"House edge rate.\",\"token\":\"Address of the token.\"}}},\"kind\":\"dev\",\"methods\":{\"getLastUserBets(address,uint256)\":{\"params\":{\"dataLength\":\"The amount of bets to return.\",\"user\":\"Address of the gamer.\"},\"returns\":{\"_0\":\"A list of Coin Toss bet.\"}},\"getTokenBalance(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"The amount of token available for profits.\"}},\"hasPendingBets(address)\":{\"returns\":{\"_0\":\"Whether the token has pending bets.\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refundBet(uint256)\":{\"params\":{\"id\":\"The Bet ID.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBank(address)\":{\"params\":{\"_bank\":\"Address of the Bank contract.\"}},\"setHouseEdge(address,uint16)\":{\"details\":\"The house edge rate couldn't exceed 4%.\",\"params\":{\"houseEdge\":\"House edge rate.\",\"token\":\"Address of the token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wager(bool,address,uint256)\":{\"params\":{\"face\":\"The chosen color number from the struct .\",\"token\":\"Address of the token.\",\"tokenAmount\":\"The number of tokens bet.\"}}},\"stateVariables\":{\"coinTossBets\":{\"details\":\"Coin faces: true = Tails, false = Heads.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotFulfilled()\":[{\"notice\":\"Bet isn't resolved yet.\"}],\"NotPendingBet()\":[{\"notice\":\"Bet provided doesn't exist or was already resolved.\"}],\"UnderMinBetAmount(uint256)\":[{\"notice\":\"Insufficient bet amount.\"}]},\"events\":{\"BetRefunded(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted after the bet amount is transfered to the user.\"},\"PlaceBet(uint256,address,address,uint256,bool)\":{\"notice\":\"Emitted after a bet is placed.\"},\"Roll(uint256,address,address,uint256,bool,bool)\":{\"notice\":\"Emitted after a bet is rolled.\"},\"SetBank(address)\":{\"notice\":\"Emitted after the bank is set.\"},\"SetHouseEdge(address,uint16)\":{\"notice\":\"Emitted after the house edge is set for a token.\"}},\"kind\":\"user\",\"methods\":{\"bets(uint256)\":{\"notice\":\"Maps bets IDs to Bet information.\"},\"coinTossBets(uint256)\":{\"notice\":\"Maps bets IDs to chosen and rolled coin faces.\"},\"getLastUserBets(address,uint256)\":{\"notice\":\"Gets the list of the last user bets.\"},\"getTokenBalance(address)\":{\"notice\":\"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance.\"},\"hasPendingBets(address)\":{\"notice\":\"Returns whether the token has pending bets.\"},\"pause()\":{\"notice\":\"Pauses the contract to disable new bets.\"},\"refundBet(uint256)\":{\"notice\":\"Refunds the bet to the user if the Chainlink VRF callback failed.\"},\"setBank(address)\":{\"notice\":\"Sets the Bank contract.\"},\"setHouseEdge(address,uint16)\":{\"notice\":\"Sets the game house edge rate for a specific token.\"},\"tokens(address)\":{\"notice\":\"Maps tokens addresses to token configuration.\"},\"wager(bool,address,uint256)\":{\"notice\":\"Creates a new bet and stores the chosen coin face.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoinToss.sol\":\"CoinTossV5\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"},\"contracts/CoinToss.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport {IBankV2} from \\\"./interface/IBankV2.sol\\\";\\n\\n// import {WalletV2} from \\\"./WalletV2.sol\\\";\\n\\ncontract CoinTossV5 is\\n    VRFConsumerBaseV2,\\n    Ownable,\\n    Pausable,\\n    Multicall,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    IBankV2 public bank;\\n\\n    uint64 s_subscriptionId;\\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    address vrfCoordinator = 0xbd13f08b8352A3635218ab9418E340c60d6Eb418;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 keyHash =\\n        0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4;\\n\\n    uint32 callbackGasLimit = 200000;\\n\\n    // The default is 3, but you can set this higher.\\n    uint16 requestConfirmations = 3;\\n\\n    // For this example, retrieve 2 random values in one request.\\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n    uint32 numWords = 2;\\n\\n    uint256 public s_randomWords;\\n    uint256 public s_requestId;\\n    address public s_owner;\\n\\n    /// @notice Emitted after the bank is set.\\n    /// @param bank Address of the bank contract.\\n    event SetBank(address bank);\\n    /// @notice Emitted after the house edge is set for a token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    event SetHouseEdge(address indexed token, uint16 houseEdge);\\n\\n    error ExcessiveHouseEdge();\\n    error ForbiddenToken();\\n    error WrongGasValueToCoverFee();\\n    error AccessDenied();\\n    error InvalidAddress();\\n    error TokenHasPendingBets();\\n\\n    struct Token {\\n        uint16 houseEdge;\\n        uint64 pendingCount;\\n    }\\n    /// @notice Maps tokens addresses to token configuration.\\n    mapping(address => Token) public tokens;\\n\\n    struct Bet {\\n        bool resolved;\\n        address payable user;\\n        address token;\\n        uint256 id;\\n        uint256 amount;\\n        uint256 blockTime;\\n        bool betStatus;\\n        // uint256 payout;\\n    }\\n\\n    // Fee struct\\n    struct Fee {\\n        uint256 betAmountFee;\\n        uint256 ProfitFee;\\n    }\\n\\n    /// @notice Maps bets IDs to Bet information.\\n    mapping(uint256 => Bet) public bets;\\n\\n    /// @notice Maps users addrejsses to bets IDs\\n    mapping(address => uint256[]) internal _userBets;\\n\\n    /// @notice Emitted after the bet amount is transfered to the user.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param amount Number of tokens refunded.\\n    /// @param chainlinkVRFCost The Chainlink VRF cost refunded to player.\\n    event BetRefunded(\\n        uint256 id,\\n        address user,\\n        uint256 amount,\\n        uint256 chainlinkVRFCost\\n    );\\n\\n    /// @notice Insufficient bet amount.\\n    /// @param minBetAmount Bet amount.\\n    error UnderMinBetAmount(uint256 minBetAmount);\\n\\n    /// @notice Bet isn't resolved yet.\\n    error NotFulfilled();\\n\\n    /// @notice Bet provided doesn't exist or was already resolved.\\n    error NotPendingBet();\\n\\n    // Coin toss\\n    /// @notice Full coin toss bet information struct.\\n    /// @param bet The Bet struct information.\\n    /// @param diceBet The Coin Toss bet struct information.\\n    /// @dev Used to package bet information for the front-end.\\n    struct FullCoinTossBet {\\n        Bet bet;\\n        CoinTossBet coinTossBet;\\n    }\\n\\n    /// @notice Coin Toss bet information struct.\\n    /// @param face The chosen coin face.\\n    /// @param rolled The rolled coin face.\\n    struct CoinTossBet {\\n        bool face;\\n        bool rolled;\\n    }\\n\\n    /// @notice Maps bets IDs to chosen and rolled coin faces.\\n    /// @dev Coin faces: true = Tails, false = Heads.\\n    mapping(uint256 => CoinTossBet) public coinTossBets;\\n\\n    /// @notice Emitted after a bet is placed.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param face The chosen coin face.\\n    event PlaceBet(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        bool face\\n    );\\n\\n    /// @notice Emitted after a bet is rolled.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param face The chosen coin face.\\n    /// @param rolled The rolled coin face.\\n    event Roll(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        bool face,\\n        bool rolled\\n        // uint256 payout\\n    );\\n\\n    // Ends heref\\n\\n    constructor(uint64 subscriptionId, address bankAddress)\\n        VRFConsumerBaseV2(vrfCoordinator)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_owner = msg.sender;\\n        s_subscriptionId = subscriptionId;\\n        setBank(IBankV2(bankAddress));\\n    }\\n\\n    /// @notice Returns whether the token has pending bets.\\n    /// @return Whether the token has pending bets.\\n    function hasPendingBets(address token) public view returns (bool) {\\n        return tokens[token].pendingCount != 0;\\n    }\\n\\n    function _getFees(address token, uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (tokens[token].houseEdge * amount) / 10000;\\n    }\\n\\n    /// @notice Sets the Bank contract.\\n    /// @param _bank Address of the Bank contract.\\n    function setBank(IBankV2 _bank) public onlyOwner {\\n        if (address(_bank) == address(0)) {\\n            // revert InvalidAddress();\\n            // return false;\\n        }\\n        bank = _bank;\\n        emit SetBank(address(_bank));\\n    }\\n\\n    /// @notice Sets the game house edge rate for a specific token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    /// @dev The house edge rate couldn't exceed 4%.\\n    function setHouseEdge(address token, uint16 houseEdge) external onlyOwner {\\n        if (houseEdge > 400) {\\n            revert ExcessiveHouseEdge();\\n        }\\n        if (hasPendingBets(token)) {\\n            revert TokenHasPendingBets();\\n        }\\n        tokens[token].houseEdge = houseEdge;\\n        emit SetHouseEdge(token, houseEdge);\\n    }\\n\\n    /// @notice Check if the token has the 0x address.\\n    /// @param token Address of the token.\\n    /// @return Whether the token's address is the 0x address.\\n    function _isGasToken(address token) private pure returns (bool) {\\n        return token == address(0);\\n    }\\n\\n    function _newBet(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        uint256 multi\\n    ) internal whenNotPaused nonReentrant returns (Bet memory) {\\n        Token storage token = tokens[tokenAddress];\\n        if (\\n            bank.isAllowedToken(tokenAddress) == false || token.houseEdge == 0\\n        ) {\\n            revert ForbiddenToken();\\n        }\\n\\n        address user = msg.sender;\\n        bool isGasToken = tokenAddress == address(0);\\n        uint256 betAmount = tokenAmount;\\n\\n        {\\n            uint256 minBetAmount = bank.getMinBetAmount(tokenAddress);\\n            if (betAmount < minBetAmount) {\\n                revert UnderMinBetAmount(minBetAmount);\\n            }\\n\\n            uint256 maxBetAmount = bank.getMaxBetAmount(tokenAddress, multi);\\n            if (betAmount > maxBetAmount) {\\n                if (isGasToken) {\\n                    payable(user).transfer(betAmount - maxBetAmount);\\n                }\\n                betAmount = maxBetAmount;\\n            }\\n        }\\n\\n        s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        Bet memory newBet = Bet(\\n            false,\\n            payable(user),\\n            tokenAddress,\\n            s_requestId,\\n            betAmount,\\n            block.timestamp,\\n            false\\n            // 0\\n        );\\n        _userBets[user].push(s_requestId);\\n        bets[s_requestId] = newBet;\\n\\n        // If ERC20, transfer the tokens\\n        if (!isGasToken) {\\n            IERC20(tokenAddress).safeTransferFrom(\\n                user,\\n                address(bank),\\n                betAmount\\n            );\\n            // tokens goes to either this contract or bank\\n            // might change to address(this)\\n        }\\n\\n        return newBet;\\n    }\\n\\n    uint256 public multiplier = 3;\\n\\n    function updateMultiplier(uint256 amount) external onlyOwner {\\n        multiplier = amount;\\n    }\\n\\n    function getMultiplier() private view returns (uint256) {\\n        return multiplier;\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Bet.\\n    function _getLastUserBets(address user, uint256 dataLength)\\n        internal\\n        view\\n        returns (Bet[] memory)\\n    {\\n        uint256[] memory userBetsIds = _userBets[user];\\n        uint256 betsLength = userBetsIds.length;\\n\\n        if (betsLength < dataLength) {\\n            dataLength = betsLength;\\n        }\\n\\n        Bet[] memory userBets = new Bet[](dataLength);\\n        if (dataLength != 0) {\\n            uint256 userBetsIndex;\\n            for (uint256 i = betsLength; i > betsLength - dataLength; i--) {\\n                userBets[userBetsIndex] = bets[userBetsIds[i - 1]];\\n                userBetsIndex++;\\n            }\\n        }\\n\\n        return userBets;\\n    }\\n\\n    function getBetData(uint256 id) public view returns (Bet memory betData) {\\n        Bet storage data = bets[id];\\n        return data;\\n    }\\n\\n    function getBetStatus(uint256 id) public view returns (bool status) {\\n        Bet storage data = bets[id];\\n        return data.betStatus;\\n    }\\n\\n    /// @notice Refunds the bet to the user if the Chainlink VRF callback failed.\\n    /// @param id The Bet ID.\\n    function refundBet(uint256 id) external nonReentrant {\\n        Bet storage bet = bets[id];\\n        if (bet.resolved == true) {\\n            revert NotPendingBet();\\n        } else if (block.timestamp < bet.blockTime + 30) {\\n            revert NotFulfilled();\\n        }\\n\\n        Token storage token = tokens[bet.token];\\n        token.pendingCount--;\\n\\n        bet.resolved = true;\\n        // bet.payout = bet.amount;\\n\\n        if (bet.token == address(0)) {\\n            payable(bet.user).transfer(bet.amount);\\n        } else {\\n            IERC20(bet.token).safeTransfer(bet.user, bet.amount);\\n        }\\n    }\\n\\n    // Coin toss start here\\n    /// @notice Calculates the target payout amount.\\n    /// @param betAmount Bet amount.\\n    /// @return The target payout amount.\\n    function _getPayout(uint256 betAmount) private view returns (uint256) {\\n        return betAmount * multiplier;\\n    }\\n\\n    /// @notice Creates a new bet and stores the chosen coin face.\\n    /// @param face The chosen color number from the struct .\\n    /// @param token Address of the token.\\n    /// @param tokenAmount The number of tokens bet.\\n    function wager(\\n        bool face,\\n        address token,\\n        uint256 tokenAmount\\n    ) external payable whenNotPaused {\\n        Bet memory bet = _newBet(token, tokenAmount, _getPayout(10000));\\n\\n        coinTossBets[bet.id].face = face;\\n\\n        emit PlaceBet(bet.id, bet.user, bet.token, bet.amount, face);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Gets the token's balance.\\n    /// The token's house edge allocation amounts are subtracted from the balance.\\n    /// @param token Address of the token.\\n    /// @return The amount of token available for profits.\\n    function getTokenBalance(address token) public view returns (uint256) {\\n        uint256 tokenBal;\\n        if (_isGasToken(token)) {\\n            return tokenBal = address(this).balance;\\n        } else {\\n            return tokenBal = IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 id, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        CoinTossBet storage coinTossBet = coinTossBets[id];\\n        Bet storage bet = bets[id];\\n        uint256 roller = randomWords[0] % 2;\\n\\n        bool[2] memory coinSides = [false, true];\\n        bool rolledCoinSide = coinSides[roller];\\n        coinTossBet.rolled = rolledCoinSide;\\n\\n        if (rolledCoinSide == coinTossBet.face) {\\n            bet.resolved = true;\\n            bet.betStatus = true;\\n            address token = bet.token;\\n            address payable user = bet.user;\\n            uint256 betAmount = bet.amount;\\n\\n            // processPayouts(bet, bet.betStatus, _getPayout(bet.amount));\\n\\n            uint256 payout = _getPayout(betAmount);\\n            uint256 profit = payout;\\n\\n            uint256 profitFee = _getFees(token, betAmount);\\n\\n            uint256 profitPayout = profit - profitFee;\\n\\n            // Transfer the payout from the bank, the bet amount fee to the bank, and account fees.\\n            bank.payout(user, token, profitPayout, profitFee);\\n\\n        } else {\\n            bet.resolved = true;\\n            bet.betStatus = false;\\n        }\\n\\n        emit Roll(\\n            bet.id,\\n            bet.user,\\n            bet.token,\\n            bet.amount,\\n            coinTossBet.face,\\n            rolledCoinSide\\n            // payout\\n        );\\n    }\\n\\n    /// @notice Pauses the contract to disable new bets.\\n    function pause() external onlyOwner {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Coin Toss bet.\\n    function getLastUserBets(address user, uint256 dataLength)\\n        external\\n        view\\n        returns (FullCoinTossBet[] memory)\\n    {\\n        Bet[] memory lastBets = _getLastUserBets(user, dataLength);\\n        FullCoinTossBet[] memory lastCoinTossBets = new FullCoinTossBet[](\\n            lastBets.length\\n        );\\n        for (uint256 i; i < lastBets.length; i++) {\\n            lastCoinTossBets[i] = FullCoinTossBet(\\n                lastBets[i],\\n                coinTossBets[lastBets[i].id]\\n            );\\n        }\\n        return lastCoinTossBets;\\n    }\\n}\",\"keccak256\":\"0x196c419ae376c27c35f960e9a696992f5886ed5dea385d22d619641976a4a2f8\",\"license\":\"MIT\"},\"contracts/interface/IBankV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/// @notice Minimal interface for Bank.\\n/// @author Romuald Hog.\\ninterface IBankV2 {\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param token Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address token) external view returns (bool);\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address payable user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees\\n    ) external payable;\\n\\n    /// @notice Accounts a loss bet.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    function cashIn(address tokenAddress, uint256 amount) external payable;\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Harvests tokens dividends.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function harvestDividends()\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    /// @notice Get the available tokens dividends amounts.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function getDividends()\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n\\n    function getTokenOwner(address token) external view returns (address);\\n\\n    function getMinBetAmount(address token) external view returns (uint256);\\n}\",\"keccak256\":\"0x4170b0a886dba886bd243c3df535a85defd0ded9c06f01748168dd891d429bb1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":766,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":889,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":990,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":5074,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"bank","offset":0,"slot":"2","type":"t_contract(IBankV2)7313"},{"astId":5076,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"s_subscriptionId","offset":20,"slot":"2","type":"t_uint64"},{"astId":5079,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"COORDINATOR","offset":0,"slot":"3","type":"t_contract(VRFCoordinatorV2Interface)219"},{"astId":5082,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"vrfCoordinator","offset":0,"slot":"4","type":"t_address"},{"astId":5085,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"keyHash","offset":0,"slot":"5","type":"t_bytes32"},{"astId":5088,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"callbackGasLimit","offset":0,"slot":"6","type":"t_uint32"},{"astId":5091,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"requestConfirmations","offset":4,"slot":"6","type":"t_uint16"},{"astId":5094,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"numWords","offset":6,"slot":"6","type":"t_uint32"},{"astId":5096,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"s_randomWords","offset":0,"slot":"7","type":"t_uint256"},{"astId":5098,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"s_requestId","offset":0,"slot":"8","type":"t_uint256"},{"astId":5100,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"s_owner","offset":0,"slot":"9","type":"t_address"},{"astId":5135,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"tokens","offset":0,"slot":"10","type":"t_mapping(t_address,t_struct(Token)5129_storage)"},{"astId":5161,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"bets","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_struct(Bet)5150_storage)"},{"astId":5167,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"_userBets","offset":0,"slot":"12","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":5207,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"coinTossBets","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_struct(CoinTossBet)5201_storage)"},{"astId":5557,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"multiplier","offset":0,"slot":"14","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IBankV2)7313":{"encoding":"inplace","label":"contract IBankV2","numberOfBytes":"20"},"t_contract(VRFCoordinatorV2Interface)219":{"encoding":"inplace","label":"contract VRFCoordinatorV2Interface","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_address,t_struct(Token)5129_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CoinTossV5.Token)","numberOfBytes":"32","value":"t_struct(Token)5129_storage"},"t_mapping(t_uint256,t_struct(Bet)5150_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CoinTossV5.Bet)","numberOfBytes":"32","value":"t_struct(Bet)5150_storage"},"t_mapping(t_uint256,t_struct(CoinTossBet)5201_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CoinTossV5.CoinTossBet)","numberOfBytes":"32","value":"t_struct(CoinTossBet)5201_storage"},"t_struct(Bet)5150_storage":{"encoding":"inplace","label":"struct CoinTossV5.Bet","members":[{"astId":5137,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"resolved","offset":0,"slot":"0","type":"t_bool"},{"astId":5139,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"user","offset":1,"slot":"0","type":"t_address_payable"},{"astId":5141,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":5143,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"id","offset":0,"slot":"2","type":"t_uint256"},{"astId":5145,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"amount","offset":0,"slot":"3","type":"t_uint256"},{"astId":5147,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"blockTime","offset":0,"slot":"4","type":"t_uint256"},{"astId":5149,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"betStatus","offset":0,"slot":"5","type":"t_bool"}],"numberOfBytes":"192"},"t_struct(CoinTossBet)5201_storage":{"encoding":"inplace","label":"struct CoinTossV5.CoinTossBet","members":[{"astId":5198,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"face","offset":0,"slot":"0","type":"t_bool"},{"astId":5200,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"rolled","offset":1,"slot":"0","type":"t_bool"}],"numberOfBytes":"32"},"t_struct(Token)5129_storage":{"encoding":"inplace","label":"struct CoinTossV5.Token","members":[{"astId":5126,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"houseEdge","offset":0,"slot":"0","type":"t_uint16"},{"astId":5128,"contract":"contracts/CoinToss.sol:CoinTossV5","label":"pendingCount","offset":2,"slot":"0","type":"t_uint64"}],"numberOfBytes":"32"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"errors":{"NotFulfilled()":[{"notice":"Bet isn't resolved yet."}],"NotPendingBet()":[{"notice":"Bet provided doesn't exist or was already resolved."}],"UnderMinBetAmount(uint256)":[{"notice":"Insufficient bet amount."}]},"events":{"BetRefunded(uint256,address,uint256,uint256)":{"notice":"Emitted after the bet amount is transfered to the user."},"PlaceBet(uint256,address,address,uint256,bool)":{"notice":"Emitted after a bet is placed."},"Roll(uint256,address,address,uint256,bool,bool)":{"notice":"Emitted after a bet is rolled."},"SetBank(address)":{"notice":"Emitted after the bank is set."},"SetHouseEdge(address,uint16)":{"notice":"Emitted after the house edge is set for a token."}},"kind":"user","methods":{"bets(uint256)":{"notice":"Maps bets IDs to Bet information."},"coinTossBets(uint256)":{"notice":"Maps bets IDs to chosen and rolled coin faces."},"getLastUserBets(address,uint256)":{"notice":"Gets the list of the last user bets."},"getTokenBalance(address)":{"notice":"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance."},"hasPendingBets(address)":{"notice":"Returns whether the token has pending bets."},"pause()":{"notice":"Pauses the contract to disable new bets."},"refundBet(uint256)":{"notice":"Refunds the bet to the user if the Chainlink VRF callback failed."},"setBank(address)":{"notice":"Sets the Bank contract."},"setHouseEdge(address,uint16)":{"notice":"Sets the game house edge rate for a specific token."},"tokens(address)":{"notice":"Maps tokens addresses to token configuration."},"wager(bool,address,uint256)":{"notice":"Creates a new bet and stores the chosen coin face."}},"version":1}}},"contracts/Dice.sol":{"DiceV4":{"abi":[{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"bankAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"uint8","name":"minCap","type":"uint8"},{"internalType":"uint8","name":"maxCap","type":"uint8"}],"name":"CapNotInRange","type":"error"},{"inputs":[],"name":"ExcessiveHouseEdge","type":"error"},{"inputs":[],"name":"ForbiddenToken","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"NotFulfilled","type":"error"},{"inputs":[],"name":"NotPendingBet","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"TokenHasPendingBets","type":"error"},{"inputs":[{"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"name":"UnderMinBetAmount","type":"error"},{"inputs":[],"name":"WrongGasValueToCoverFee","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"chainlinkVRFCost","type":"uint256"}],"name":"BetRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"cap","type":"uint8"}],"name":"PlaceBet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"cap","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rolled","type":"uint8"}],"name":"Roll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"bank","type":"address"}],"name":"SetBank","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint16","name":"houseEdge","type":"uint16"}],"name":"SetHouseEdge","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"bank","outputs":[{"internalType":"contract IBankV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"bets","outputs":[{"internalType":"bool","name":"resolved","type":"bool"},{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"blockTime","type":"uint256"},{"internalType":"bool","name":"betStatus","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"diceBets","outputs":[{"internalType":"uint8","name":"cap","type":"uint8"},{"internalType":"uint8","name":"rolled","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getBetData","outputs":[{"components":[{"internalType":"bool","name":"resolved","type":"bool"},{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"blockTime","type":"uint256"},{"internalType":"bool","name":"betStatus","type":"bool"}],"internalType":"struct DiceV4.Bet","name":"betData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getBetStatus","outputs":[{"internalType":"bool","name":"status","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"dataLength","type":"uint256"}],"name":"getLastUserBets","outputs":[{"components":[{"components":[{"internalType":"bool","name":"resolved","type":"bool"},{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"blockTime","type":"uint256"},{"internalType":"bool","name":"betStatus","type":"bool"}],"internalType":"struct DiceV4.Bet","name":"bet","type":"tuple"},{"components":[{"internalType":"uint8","name":"cap","type":"uint8"},{"internalType":"uint8","name":"rolled","type":"uint8"}],"internalType":"struct DiceV4.DiceBet","name":"diceBet","type":"tuple"}],"internalType":"struct DiceV4.FullDiceBet[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"hasPendingBets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"multiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"refundBet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"s_owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_randomWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_requestId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IBankV2","name":"_bank","type":"address"}],"name":"setBank","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint16","name":"houseEdge","type":"uint16"}],"name":"setHouseEdge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokens","outputs":[{"internalType":"uint16","name":"houseEdge","type":"uint16"},{"internalType":"uint64","name":"pendingCount","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"updateMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"cap","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"wager","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"errors":{"CapNotInRange(uint8,uint8)":[{"params":{"maxCap":"The maximum cap.","minCap":"The minimum cap."}}],"UnderMinBetAmount(uint256)":[{"params":{"minBetAmount":"Bet amount."}}]},"events":{"BetRefunded(uint256,address,uint256,uint256)":{"params":{"amount":"Number of tokens refunded.","chainlinkVRFCost":"The Chainlink VRF cost refunded to player.","id":"The bet ID.","user":"Address of the gamer."}},"PlaceBet(uint256,address,address,uint256,uint8)":{"params":{"amount":"The bet amount.","cap":"The chosen coin face.","id":"The bet ID.","token":"Address of the token.","user":"Address of the gamer."}},"Roll(uint256,address,address,uint256,uint8,uint8)":{"params":{"amount":"The bet amount.","cap":"The chosen dice number.","id":"The bet ID.","rolled":"The rolled dice number.","token":"Address of the token.","user":"Address of the gamer."}},"SetBank(address)":{"params":{"bank":"Address of the bank contract."}},"SetHouseEdge(address,uint16)":{"params":{"houseEdge":"House edge rate.","token":"Address of the token."}}},"kind":"dev","methods":{"getLastUserBets(address,uint256)":{"params":{"dataLength":"The amount of bets to return.","user":"Address of the gamer."},"returns":{"_0":"A list of Dice bet."}},"getTokenBalance(address)":{"params":{"token":"Address of the token."},"returns":{"_0":"The amount of token available for profits."}},"hasPendingBets(address)":{"returns":{"_0":"Whether the token has pending bets."}},"multicall(bytes[])":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Receives and executes a batch of function calls on this contract."},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"refundBet(uint256)":{"params":{"id":"The Bet ID."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setBank(address)":{"params":{"_bank":"Address of the Bank contract."}},"setHouseEdge(address,uint16)":{"details":"The house edge rate couldn't exceed 4%.","params":{"houseEdge":"House edge rate.","token":"Address of the token."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"wager(uint8,address,uint256)":{"params":{"cap":"The chosen number .","token":"Address of the token.","tokenAmount":"The number of tokens bet."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_6364":{"entryPoint":null,"id":6364,"parameterSlots":2,"returnSlots":0},"@_68":{"entryPoint":null,"id":68,"parameterSlots":1,"returnSlots":0},"@_782":{"entryPoint":null,"id":782,"parameterSlots":0,"returnSlots":0},"@_898":{"entryPoint":null,"id":898,"parameterSlots":0,"returnSlots":0},"@_998":{"entryPoint":null,"id":998,"parameterSlots":0,"returnSlots":0},"@_checkOwner_813":{"entryPoint":478,"id":813,"parameterSlots":0,"returnSlots":0},"@_msgSender_1901":{"entryPoint":null,"id":1901,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_870":{"entryPoint":304,"id":870,"parameterSlots":1,"returnSlots":0},"@owner_799":{"entryPoint":null,"id":799,"parameterSlots":0,"returnSlots":1},"@setBank_6412":{"entryPoint":384,"id":6412,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_uint64t_address_fromMemory":{"entryPoint":575,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1048:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"111:366:30","statements":[{"body":{"nodeType":"YulBlock","src":"157:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"166:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"169:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"159:6:30"},"nodeType":"YulFunctionCall","src":"159:12:30"},"nodeType":"YulExpressionStatement","src":"159:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"132:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"141:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"128:3:30"},"nodeType":"YulFunctionCall","src":"128:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"153:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"124:3:30"},"nodeType":"YulFunctionCall","src":"124:32:30"},"nodeType":"YulIf","src":"121:52:30"},{"nodeType":"YulVariableDeclaration","src":"182:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"201:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"195:5:30"},"nodeType":"YulFunctionCall","src":"195:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"186:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"273:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"282:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"285:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"275:6:30"},"nodeType":"YulFunctionCall","src":"275:12:30"},"nodeType":"YulExpressionStatement","src":"275:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"233:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"244:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"259:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"263:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"255:3:30"},"nodeType":"YulFunctionCall","src":"255:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"267:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"251:3:30"},"nodeType":"YulFunctionCall","src":"251:18:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"240:3:30"},"nodeType":"YulFunctionCall","src":"240:30:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"230:2:30"},"nodeType":"YulFunctionCall","src":"230:41:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:30"},"nodeType":"YulFunctionCall","src":"223:49:30"},"nodeType":"YulIf","src":"220:69:30"},{"nodeType":"YulAssignment","src":"298:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"308:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"298:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"322:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"347:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"358:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"343:3:30"},"nodeType":"YulFunctionCall","src":"343:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"337:5:30"},"nodeType":"YulFunctionCall","src":"337:25:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"326:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"429:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"441:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"431:6:30"},"nodeType":"YulFunctionCall","src":"431:12:30"},"nodeType":"YulExpressionStatement","src":"431:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"384:7:30"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"397:7:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"414:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"419:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"410:3:30"},"nodeType":"YulFunctionCall","src":"410:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"423:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"406:3:30"},"nodeType":"YulFunctionCall","src":"406:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"393:3:30"},"nodeType":"YulFunctionCall","src":"393:33:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"381:2:30"},"nodeType":"YulFunctionCall","src":"381:46:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"374:6:30"},"nodeType":"YulFunctionCall","src":"374:54:30"},"nodeType":"YulIf","src":"371:74:30"},{"nodeType":"YulAssignment","src":"454:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"464:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"454:6:30"}]}]},"name":"abi_decode_tuple_t_uint64t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"69:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"80:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"92:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"100:6:30","type":""}],"src":"14:463:30"},{"body":{"nodeType":"YulBlock","src":"583:102:30","statements":[{"nodeType":"YulAssignment","src":"593:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"605:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"616:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"601:3:30"},"nodeType":"YulFunctionCall","src":"601:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"593:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"635:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"650:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"666:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"671:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"662:3:30"},"nodeType":"YulFunctionCall","src":"662:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"675:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"658:3:30"},"nodeType":"YulFunctionCall","src":"658:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"646:3:30"},"nodeType":"YulFunctionCall","src":"646:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"628:6:30"},"nodeType":"YulFunctionCall","src":"628:51:30"},"nodeType":"YulExpressionStatement","src":"628:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"552:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"563:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"574:4:30","type":""}],"src":"482:203:30"},{"body":{"nodeType":"YulBlock","src":"864:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"881:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"892:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"874:6:30"},"nodeType":"YulFunctionCall","src":"874:21:30"},"nodeType":"YulExpressionStatement","src":"874:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"915:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"926:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"911:3:30"},"nodeType":"YulFunctionCall","src":"911:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"931:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"904:6:30"},"nodeType":"YulFunctionCall","src":"904:30:30"},"nodeType":"YulExpressionStatement","src":"904:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"965:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"950:3:30"},"nodeType":"YulFunctionCall","src":"950:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"970:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"943:6:30"},"nodeType":"YulFunctionCall","src":"943:62:30"},"nodeType":"YulExpressionStatement","src":"943:62:30"},{"nodeType":"YulAssignment","src":"1014:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1026:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1037:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1022:3:30"},"nodeType":"YulFunctionCall","src":"1022:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1014:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"841:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"855:4:30","type":""}],"src":"690:356:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint64t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(64, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0xBD13F08B8352A3635218AB9418E340C60D6EB418 OR DUP2 SSTORE PUSH32 0x121A143066E0F2F08B620784AF77CCCB35C6242460B4A8EE251B4B416ABAEBD4 PUSH1 0x4 SSTORE PUSH1 0x5 DUP1 SLOAD PUSH7 0x2000300030D40 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0xF SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x25D9 CODESIZE SUB DUP1 PUSH3 0x25D9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x9C SWAP2 PUSH3 0x23F JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH3 0xB6 CALLER PUSH3 0x130 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP1 SSTORE PUSH1 0x3 SLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x8 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH9 0x10000000000000000 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH3 0x128 DUP2 PUSH3 0x180 JUMP JUMPDEST POP POP PUSH3 0x294 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x18A PUSH3 0x1DE JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x10F5824683D64A0712038F2244E046B174A1CC57FBB8556BFDA5FFB261244067 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x23D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2322 PUSH3 0x2B7 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x677 ADD MSTORE PUSH2 0x6B9 ADD MSTORE PUSH2 0x2322 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x181 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61F14F11 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xAC9650D8 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE3978240 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE3978240 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0xE89E106A EQ PUSH2 0x5DA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xC2FB579F EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xE1FDB4B4 EQ PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61F14F11 EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x76CDB03B EQ PUSH2 0x451 JUMPI DUP1 PUSH4 0x78BCDE22 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x594043FD GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x594043FD EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x5BFE1630 EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x5FFE6146 EQ PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x4031E85B EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x42258ECA EQ PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90D23B9 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x1B3ED722 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x1D3C7B91 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x22AF00FA EQ PUSH2 0x216 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH2 0x610 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x66C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x231 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 SWAP1 SWAP6 ADD SLOAD PUSH1 0xFF DUP1 DUP7 AND SWAP7 PUSH2 0x100 SWAP1 SWAP7 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP7 SWAP6 AND SWAP5 SWAP2 AND DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE SWAP5 SWAP1 SWAP6 AND SWAP4 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1E3B JUMP JUMPDEST PUSH2 0x781 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32C PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BD PUSH2 0x3B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH2 0x867 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1ED8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x38D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH2 0x8E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x8F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x471 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x907 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x9DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x471 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4FC PUSH2 0x4F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F26 JUMP JUMPDEST PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1FF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x529 PUSH2 0x524 CALLDATASIZE PUSH1 0x4 PUSH2 0x2054 JUMP JUMPDEST PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x2080 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x551 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH2 0xC2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x471 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B8 PUSH2 0x591 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH2 0xD93 JUMP JUMPDEST PUSH2 0x618 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x10F5824683D64A0712038F2244E046B174A1CC57FBB8556BFDA5FFB261244067 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F5 DUP3 DUP3 PUSH2 0xE63 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x712 JUMPI POP SELFBALANCE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x756 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77A SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x789 PUSH2 0x1056 JUMP JUMPDEST PUSH1 0xFF DUP4 AND ISZERO DUP1 PUSH2 0x79C JUMPI POP PUSH1 0x63 DUP4 PUSH1 0xFF AND GT JUMPDEST ISZERO PUSH2 0x7C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A4B39A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x63 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7DC DUP4 DUP4 PUSH2 0x7D7 PUSH2 0x2710 DUP9 PUSH2 0x10A3 JUMP JUMPDEST PUSH2 0x10C8 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP2 ADD DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF DUP12 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 DUP7 ADD MLOAD DUP3 DUP8 ADD MLOAD SWAP5 MLOAD PUSH1 0x80 DUP9 ADD MLOAD DUP6 MLOAD SWAP2 DUP3 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP3 ADD MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP2 AND SWAP2 PUSH32 0x7BC15B06F5A3547B8FC8EB36E2C45F4B3385D615FBA6158C797E5AA279DCF748 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x86F PUSH2 0x1C95 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0xE09 JUMP JUMPDEST PUSH1 0xF SSTORE JUMP JUMPDEST PUSH2 0x8FB PUSH2 0xE09 JUMP JUMPDEST PUSH2 0x905 PUSH1 0x0 PUSH2 0x155B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x90F PUSH2 0xE09 JUMP JUMPDEST PUSH2 0x190 DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x936 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1C2D5DD3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO PUSH2 0x97C JUMPI PUSH1 0x40 MLOAD PUSH4 0x55212B7 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7DFD3ECB8AC83242184C019F85CA408558F2AC0A5A19AF6BE2A4AEE697EAC812 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x9E6 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xA00 JUMPI PUSH2 0x905 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x905 PUSH2 0x1600 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA55 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA40 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAF5 JUMPI PUSH2 0xAC5 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xA79 JUMPI PUSH2 0xA79 PUSH2 0x20F7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xA8B SWAP2 SWAP1 PUSH2 0x210D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1643 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAD7 JUMPI PUSH2 0xAD7 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xAED SWAP1 PUSH2 0x2170 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA5B JUMP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xB0B DUP5 DUP5 PUSH2 0x1668 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB28 JUMPI PUSH2 0xB28 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB61 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xB4E PUSH2 0x1CD1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB46 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB8D JUMPI PUSH2 0xB8D PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xC PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBB0 JUMPI PUSH2 0xBB0 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH1 0xFF DUP1 DUP3 AND DUP4 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 MSTORE DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xC05 JUMPI PUSH2 0xC05 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xC1B SWAP1 PUSH2 0x2170 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB67 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xC34 PUSH2 0x183A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x10D5F2BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SLOAD PUSH2 0xC7A SWAP1 PUSH1 0x1E PUSH2 0x218B JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0xC9A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DE361F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH1 0x2 PUSH2 0xCD3 DUP4 PUSH2 0x21A3 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 AND PUSH2 0x100 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP3 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP DUP2 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP4 SSTORE DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD5A JUMPI DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x100 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x8FC DUP3 ISZERO MUL SWAP2 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xD54 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD85 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0xD85 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x100 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH2 0x1894 JUMP JUMPDEST POP POP PUSH2 0xD90 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD9B PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x155B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x905 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP4 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x64 SWAP1 DUP6 SWAP1 DUP4 SWAP1 PUSH2 0xE94 JUMPI PUSH2 0xE94 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xEA6 SWAP2 SWAP1 PUSH2 0x21DC JUMP JUMPDEST PUSH2 0xEB1 SWAP1 PUSH1 0x1 PUSH2 0x218B JUMP JUMPDEST DUP4 SLOAD PUSH1 0xFF DUP1 DUP4 AND PUSH2 0x100 DUP2 MUL PUSH2 0xFF00 NOT DUP5 AND DUP2 OR DUP9 SSTORE SWAP4 SWAP5 POP SWAP3 DUP2 AND SWAP2 AND OR LT ISZERO PUSH2 0xFC3 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR DUP1 DUP6 SSTORE PUSH1 0x5 DUP6 ADD DUP1 SLOAD SWAP1 SWAP4 AND DUP3 OR SWAP1 SWAP3 SSTORE DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH2 0x100 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 SWAP1 PUSH2 0xF23 SWAP1 DUP4 SWAP1 PUSH1 0xFF AND PUSH2 0x10A3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 PUSH2 0xF32 DUP7 DUP6 PUSH2 0x18FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF40 DUP3 DUP5 PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1F615023 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x1F615023 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFB3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP PUSH2 0xFDC JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 OR DUP4 SSTORE PUSH1 0x5 DUP4 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD DUP7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF SWAP1 DUP2 AND DUP4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 PUSH2 0x100 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP2 PUSH32 0x9B488C9D2F317852722D0866BC6ACDA97E4E9DE6B986918E8A7143CD697437E1 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x905 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B0 DUP3 PUSH1 0x64 PUSH2 0x2207 JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x10BE DUP5 PUSH1 0x64 PUSH2 0x222A JUMP JUMPDEST PUSH2 0x77A SWAP2 SWAP1 PUSH2 0x2249 JUMP JUMPDEST PUSH2 0x10D0 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x10D8 PUSH2 0x1056 JUMP JUMPDEST PUSH2 0x10E0 PUSH2 0x183A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x9 SLOAD SWAP2 MLOAD PUSH4 0xCBE230C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND SWAP1 PUSH4 0xCBE230C3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x115F SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x116E JUMPI POP DUP1 SLOAD PUSH2 0xFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x118C JUMPI PUSH1 0x40 MLOAD PUSH4 0xC4559055 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF6B2A2F1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD DUP2 SWAP1 MSTORE CALLER SWAP4 SWAP1 ISZERO SWAP3 DUP9 SWAP3 PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xF6B2A2F1 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1204 SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT ISZERO PUSH2 0x1229 JUMPI PUSH1 0x40 MLOAD PUSH3 0x89563D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x13C59CEF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x278B39DE SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x127B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x129F SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x12F4 JUMPI DUP4 ISZERO PUSH2 0x12F0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x8FC PUSH2 0x12C6 DUP4 DUP7 PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x12EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP1 SWAP3 POP JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE SWAP3 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH5 0x100000000 DUP2 DIV PUSH2 0xFFFF AND PUSH1 0x44 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x64 DUP5 ADD MSTORE PUSH7 0x1000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x84 DUP3 ADD MSTORE PUSH9 0x10000000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13B5 SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD NUMBER DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH1 0xB PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 SLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP1 PUSH1 0xA PUSH1 0x0 PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP3 PUSH2 0x154C JUMPI PUSH1 0x9 SLOAD PUSH2 0x154C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP2 DUP8 SWAP2 AND DUP6 PUSH2 0x1928 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x77A PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x15B3 PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1608 PUSH2 0x1056 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x15E3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x77A DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22C6 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x19B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x16C7 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x16B3 JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP4 SWAP5 POP POP POP POP DUP4 DUP2 LT ISZERO PUSH2 0x16DD JUMPI DUP1 SWAP4 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x16F7 JUMPI PUSH2 0x16F7 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1730 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x171D PUSH2 0x1C95 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1715 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 ISZERO PUSH2 0x1831 JUMPI PUSH1 0x0 DUP3 JUMPDEST PUSH2 0x1747 DUP8 DUP6 PUSH2 0x21F0 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x182E JUMPI PUSH1 0xA PUSH1 0x0 DUP7 PUSH2 0x175E PUSH1 0x1 DUP6 PUSH2 0x21F0 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x176E JUMPI PUSH2 0x176E PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x5 ADD SLOAD SWAP1 SWAP2 AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE DUP4 MLOAD DUP5 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1802 JUMPI PUSH2 0x1802 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP1 PUSH2 0x1818 SWAP1 PUSH2 0x2170 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x1826 SWAP1 PUSH2 0x227F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x173D JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x188D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x18F7 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1A2E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2710 SWAP1 PUSH2 0x10BE SWAP1 DUP5 SWAP1 PUSH2 0xFFFF AND PUSH2 0x222A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1960 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x18C0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x905 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x19D3 SWAP2 SWAP1 PUSH2 0x2296 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A0E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A13 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A24 DUP7 DUP4 DUP4 DUP8 PUSH2 0x1B03 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A83 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B81 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1AA4 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1AA4 SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0x18F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B6F JUMPI DUP3 MLOAD PUSH2 0x1B68 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST POP DUP2 PUSH2 0x1B79 JUMP JUMPDEST PUSH2 0x1B79 DUP4 DUP4 PUSH2 0x1B90 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B79 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1BBA JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1BA0 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x22B2 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1C1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1C37 SWAP2 SWAP1 PUSH2 0x2296 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C74 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C79 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1C8A DUP8 DUP4 DUP4 DUP8 PUSH2 0x1B03 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1CE4 PUSH2 0x1C95 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D0C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x77A DUP2 PUSH2 0x1D11 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1DB1 JUMPI PUSH2 0x1DB1 PUSH2 0x1D43 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1DD6 JUMPI PUSH2 0x1DD6 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x1DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1E12 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x1DF9 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1E61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E71 DUP2 PUSH2 0x1D11 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP6 ADD MSTORE DUP1 PUSH1 0x40 DUP5 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE POP POP PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0xAF7 DUP3 DUP5 PUSH2 0x1E82 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1F04 DUP2 PUSH2 0x1D11 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FB5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1F9D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1960 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FDE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2047 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2035 DUP6 DUP4 MLOAD PUSH2 0x1FC6 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2019 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2072 DUP2 PUSH2 0x1D11 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x182E JUMPI DUP4 MLOAD PUSH2 0x20B1 DUP5 DUP3 MLOAD PUSH2 0x1E82 JUMP JUMPDEST DUP6 ADD MLOAD DUP1 MLOAD PUSH1 0xFF SWAP1 DUP2 AND PUSH1 0xE0 DUP7 ADD MSTORE SWAP1 DUP7 ADD MLOAD AND PUSH2 0x100 DUP5 ADD MSTORE SWAP3 DUP5 ADD SWAP3 PUSH2 0x120 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x209C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x213E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2184 JUMPI PUSH2 0x2184 PUSH2 0x215A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x219E JUMPI PUSH2 0x219E PUSH2 0x215A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP1 PUSH2 0x21BC JUMPI PUSH2 0x21BC PUSH2 0x215A JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x21EB JUMPI PUSH2 0x21EB PUSH2 0x21C6 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2202 JUMPI PUSH2 0x2202 PUSH2 0x215A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 DUP3 LT ISZERO PUSH2 0x2221 JUMPI PUSH2 0x2221 PUSH2 0x215A JUMP JUMPDEST SWAP1 SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2244 JUMPI PUSH2 0x2244 PUSH2 0x215A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2258 JUMPI PUSH2 0x2258 PUSH2 0x21C6 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x226F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x228E JUMPI PUSH2 0x228E PUSH2 0x215A JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x22A8 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1F9A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x77A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FC6 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122074DB6C 0xB6 SIGNEXTEND 0xCF 0x2F STATICCALL PUSH25 0x80D27923AFFFA101041FBFBF71683315DABF25D47AB9596473 PUSH16 0x6C634300080C00330000000000000000 ","sourceMap":"641:14385:28:-:0;;;858:67;;;-1:-1:-1;;;;;;858:67:28;883:42;858:67;;;1164:66;1138:92;;1237:32;;;1487:19;-1:-1:-1;;;;;;1487:19:28;;;;;;9089:29;;5324:286;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5406:14;;-1:-1:-1;;;;;5406:14:28;5599:32:3;;936::10;719:10:18;936:18:10;:32::i;:::-;1006:5:11;996:15;;-1:-1:-1;;;;996:15:11;;;-1:-1:-1;1821:22:12;;5476:14:28::1;::::0;5436:11:::1;:55:::0;;:11:::1;5501:20:::0;;5511:10:::1;-1:-1:-1::0;;;;;;5501:20:28;;::::1;;::::0;;-1:-1:-1;;;;;;5531:33:28;-1:-1:-1;;;;;5476:14:28;;::::1;5436:55:::0;::::1;-1:-1:-1::0;;;;;;5531:33:28;;;;;-1:-1:-1;;;;;5531:33:28;::::1;;::::0;;5574:29:::1;5590:11:::0;5574:7:::1;:29::i;:::-;5324:286:::0;;641:14385;;2426:187:10;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:10;;;-1:-1:-1;;;;;;2534:17:10;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;5946:239:28:-;1094:13:10;:11;:13::i;:::-;6128:4:28::1;:12:::0;;-1:-1:-1;;;;;;6128:12:28::1;-1:-1:-1::0;;;;;6128:12:28;::::1;::::0;;::::1;::::0;;;6155:23:::1;::::0;628:51:30;;;6155:23:28::1;::::0;616:2:30;601:18;6155:23:28::1;;;;;;;5946:239:::0;:::o;1359:130:10:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:10;719:10:18;1422:23:10;1414:68;;;;-1:-1:-1;;;1414:68:10;;892:2:30;1414:68:10;;;874:21:30;;;911:18;;;904:30;970:34;950:18;;;943:62;1022:18;;1414:68:10;;;;;;;;1359:130::o;14:463:30:-;92:6;100;153:2;141:9;132:7;128:23;124:32;121:52;;;169:1;166;159:12;121:52;195:16;;-1:-1:-1;;;;;240:30:30;;230:41;;220:69;;285:1;282;275:12;220:69;358:2;343:18;;337:25;308:5;;-1:-1:-1;;;;;;393:33:30;;381:46;;371:74;;441:1;438;431:12;371:74;464:7;454:17;;;14:463;;;;;:::o;690:356::-;641:14385:28;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_1510":{"entryPoint":6702,"id":1510,"parameterSlots":2,"returnSlots":0},"@_checkOwner_813":{"entryPoint":3593,"id":813,"parameterSlots":0,"returnSlots":0},"@_getFees_6487":{"entryPoint":6396,"id":6487,"parameterSlots":2,"returnSlots":1},"@_getLastUserBets_6761":{"entryPoint":5736,"id":6761,"parameterSlots":2,"returnSlots":1},"@_getPayout_6905":{"entryPoint":4259,"id":6905,"parameterSlots":2,"returnSlots":1},"@_isGasToken_6467":{"entryPoint":null,"id":6467,"parameterSlots":1,"returnSlots":1},"@_msgSender_1901":{"entryPoint":null,"id":1901,"parameterSlots":0,"returnSlots":1},"@_newBet_6651":{"entryPoint":4296,"id":6651,"parameterSlots":3,"returnSlots":1},"@_nonReentrantAfter_1032":{"entryPoint":null,"id":1032,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_1024":{"entryPoint":6202,"id":1024,"parameterSlots":0,"returnSlots":0},"@_pause_962":{"entryPoint":5632,"id":962,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_935":{"entryPoint":4182,"id":935,"parameterSlots":0,"returnSlots":0},"@_requirePaused_946":{"entryPoint":6502,"id":946,"parameterSlots":0,"returnSlots":0},"@_revert_1888":{"entryPoint":7056,"id":1888,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_870":{"entryPoint":5467,"id":870,"parameterSlots":1,"returnSlots":0},"@_unpause_978":{"entryPoint":5547,"id":978,"parameterSlots":0,"returnSlots":0},"@bank_6185":{"entryPoint":null,"id":6185,"parameterSlots":0,"returnSlots":0},"@bets_6230":{"entryPoint":null,"id":6230,"parameterSlots":0,"returnSlots":0},"@diceBets_6276":{"entryPoint":null,"id":6276,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_7152":{"entryPoint":3683,"id":7152,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_1713":{"entryPoint":7098,"id":1713,"parameterSlots":4,"returnSlots":1},"@functionCall_1649":{"entryPoint":7041,"id":1649,"parameterSlots":3,"returnSlots":1},"@functionDelegateCall_1776":{"entryPoint":5699,"id":1776,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1805":{"entryPoint":6582,"id":1805,"parameterSlots":3,"returnSlots":1},"@getBalance_6976":{"entryPoint":null,"id":6976,"parameterSlots":0,"returnSlots":1},"@getBetData_6779":{"entryPoint":2151,"id":6779,"parameterSlots":1,"returnSlots":1},"@getBetStatus_6797":{"entryPoint":null,"id":6797,"parameterSlots":1,"returnSlots":1},"@getLastUserBets_7236":{"entryPoint":2813,"id":7236,"parameterSlots":2,"returnSlots":1},"@getTokenBalance_7014":{"entryPoint":1785,"id":7014,"parameterSlots":1,"returnSlots":1},"@hasPendingBets_6380":{"entryPoint":null,"id":6380,"parameterSlots":1,"returnSlots":1},"@isContract_1577":{"entryPoint":null,"id":1577,"parameterSlots":1,"returnSlots":1},"@multicall_1965":{"entryPoint":2568,"id":1965,"parameterSlots":2,"returnSlots":1},"@multiplier_6654":{"entryPoint":null,"id":6654,"parameterSlots":0,"returnSlots":0},"@owner_799":{"entryPoint":null,"id":799,"parameterSlots":0,"returnSlots":1},"@pause_7170":{"entryPoint":2526,"id":7170,"parameterSlots":0,"returnSlots":0},"@paused_923":{"entryPoint":null,"id":923,"parameterSlots":0,"returnSlots":1},"@rawFulfillRandomWords_103":{"entryPoint":1644,"id":103,"parameterSlots":2,"returnSlots":0},"@refundBet_6884":{"entryPoint":3116,"id":6884,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_827":{"entryPoint":2291,"id":827,"parameterSlots":0,"returnSlots":0},"@s_owner_6182":{"entryPoint":null,"id":6182,"parameterSlots":0,"returnSlots":0},"@s_randomWords_6178":{"entryPoint":null,"id":6178,"parameterSlots":0,"returnSlots":0},"@s_requestId_6180":{"entryPoint":null,"id":6180,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_1243":{"entryPoint":6440,"id":1243,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1216":{"entryPoint":6292,"id":1216,"parameterSlots":3,"returnSlots":0},"@setBank_6412":{"entryPoint":1552,"id":6412,"parameterSlots":1,"returnSlots":0},"@setHouseEdge_6451":{"entryPoint":2311,"id":6451,"parameterSlots":2,"returnSlots":0},"@tokens_6332":{"entryPoint":null,"id":6332,"parameterSlots":0,"returnSlots":0},"@transferOwnership_850":{"entryPoint":3475,"id":850,"parameterSlots":1,"returnSlots":0},"@updateMultiplier_6666":{"entryPoint":2278,"id":6666,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1844":{"entryPoint":6915,"id":1844,"parameterSlots":4,"returnSlots":1},"@wager_6964":{"entryPoint":1921,"id":6964,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint16":{"entryPoint":7910,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8276,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":7974,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8797,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IBankV2_$7313":{"entryPoint":7462,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7714,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":8414,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7513,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint8t_addresst_uint256":{"entryPoint":7739,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_bytes":{"entryPoint":8134,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_Bet":{"entryPoint":7810,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8854,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256__to_t_address_payable_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8178,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__to_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_contract$_IBankV2_$7313__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1_t_rational_99_by_1__to_t_uint8_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8882,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Bet_$6224_memory_ptr__to_t_struct$_Bet_$6224_memory_ptr__fromStack_reversed":{"entryPoint":7896,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint8__to_t_uint256_t_uint256_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint8_t_uint8__to_t_uint256_t_uint256_t_uint8_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint8_t_uint8__to_t_uint8_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":8461,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":8587,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":8777,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":8746,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8688,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint8":{"entryPoint":8711,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":8090,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":8831,"id":null,"parameterSlots":1,"returnSlots":1},"decrement_t_uint64":{"entryPoint":8611,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":8560,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":8668,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":8538,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8646,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8439,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7491,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_IBankV2":{"entryPoint":7441,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18688:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"68:86:30","statements":[{"body":{"nodeType":"YulBlock","src":"132:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"144:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"134:6:30"},"nodeType":"YulFunctionCall","src":"134:12:30"},"nodeType":"YulExpressionStatement","src":"134:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"91:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"102:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"117:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"122:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"113:3:30"},"nodeType":"YulFunctionCall","src":"113:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"126:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"109:3:30"},"nodeType":"YulFunctionCall","src":"109:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"98:3:30"},"nodeType":"YulFunctionCall","src":"98:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"88:2:30"},"nodeType":"YulFunctionCall","src":"88:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"81:6:30"},"nodeType":"YulFunctionCall","src":"81:50:30"},"nodeType":"YulIf","src":"78:70:30"}]},"name":"validator_revert_contract_IBankV2","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"57:5:30","type":""}],"src":"14:140:30"},{"body":{"nodeType":"YulBlock","src":"245:186:30","statements":[{"body":{"nodeType":"YulBlock","src":"291:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"303:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"293:6:30"},"nodeType":"YulFunctionCall","src":"293:12:30"},"nodeType":"YulExpressionStatement","src":"293:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"266:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"275:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"262:3:30"},"nodeType":"YulFunctionCall","src":"262:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"287:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"258:3:30"},"nodeType":"YulFunctionCall","src":"258:32:30"},"nodeType":"YulIf","src":"255:52:30"},{"nodeType":"YulVariableDeclaration","src":"316:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"342:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"329:12:30"},"nodeType":"YulFunctionCall","src":"329:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"320:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"395:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"361:33:30"},"nodeType":"YulFunctionCall","src":"361:40:30"},"nodeType":"YulExpressionStatement","src":"361:40:30"},{"nodeType":"YulAssignment","src":"410:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"420:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"410:6:30"}]}]},"name":"abi_decode_tuple_t_contract$_IBankV2_$7313","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"211:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"222:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"234:6:30","type":""}],"src":"159:272:30"},{"body":{"nodeType":"YulBlock","src":"537:76:30","statements":[{"nodeType":"YulAssignment","src":"547:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"570:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"555:3:30"},"nodeType":"YulFunctionCall","src":"555:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"547:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"589:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"600:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"582:6:30"},"nodeType":"YulFunctionCall","src":"582:25:30"},"nodeType":"YulExpressionStatement","src":"582:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"506:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"517:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"528:4:30","type":""}],"src":"436:177:30"},{"body":{"nodeType":"YulBlock","src":"650:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"667:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"674:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"679:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"670:3:30"},"nodeType":"YulFunctionCall","src":"670:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"660:6:30"},"nodeType":"YulFunctionCall","src":"660:31:30"},"nodeType":"YulExpressionStatement","src":"660:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"707:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"710:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"700:6:30"},"nodeType":"YulFunctionCall","src":"700:15:30"},"nodeType":"YulExpressionStatement","src":"700:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"731:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"734:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"724:6:30"},"nodeType":"YulFunctionCall","src":"724:15:30"},"nodeType":"YulExpressionStatement","src":"724:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"618:127:30"},{"body":{"nodeType":"YulBlock","src":"862:1071:30","statements":[{"body":{"nodeType":"YulBlock","src":"908:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"917:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"920:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"910:6:30"},"nodeType":"YulFunctionCall","src":"910:12:30"},"nodeType":"YulExpressionStatement","src":"910:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"883:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"892:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"879:3:30"},"nodeType":"YulFunctionCall","src":"879:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"904:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"875:3:30"},"nodeType":"YulFunctionCall","src":"875:32:30"},"nodeType":"YulIf","src":"872:52:30"},{"nodeType":"YulAssignment","src":"933:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"956:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"943:12:30"},"nodeType":"YulFunctionCall","src":"943:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"933:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"975:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"985:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"979:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"996:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1027:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1038:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:30"},"nodeType":"YulFunctionCall","src":"1023:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1010:12:30"},"nodeType":"YulFunctionCall","src":"1010:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1000:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1051:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1061:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1055:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1106:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1115:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1118:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1108:6:30"},"nodeType":"YulFunctionCall","src":"1108:12:30"},"nodeType":"YulExpressionStatement","src":"1108:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1094:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1102:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1091:2:30"},"nodeType":"YulFunctionCall","src":"1091:14:30"},"nodeType":"YulIf","src":"1088:34:30"},{"nodeType":"YulVariableDeclaration","src":"1131:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1145:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1156:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1141:3:30"},"nodeType":"YulFunctionCall","src":"1141:22:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1135:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1211:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1220:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1223:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1213:6:30"},"nodeType":"YulFunctionCall","src":"1213:12:30"},"nodeType":"YulExpressionStatement","src":"1213:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1190:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1194:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:30"},"nodeType":"YulFunctionCall","src":"1186:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1201:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1182:3:30"},"nodeType":"YulFunctionCall","src":"1182:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1175:6:30"},"nodeType":"YulFunctionCall","src":"1175:35:30"},"nodeType":"YulIf","src":"1172:55:30"},{"nodeType":"YulVariableDeclaration","src":"1236:26:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1259:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1246:12:30"},"nodeType":"YulFunctionCall","src":"1246:16:30"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1240:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1285:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1287:16:30"},"nodeType":"YulFunctionCall","src":"1287:18:30"},"nodeType":"YulExpressionStatement","src":"1287:18:30"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1277:2:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1281:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1274:2:30"},"nodeType":"YulFunctionCall","src":"1274:10:30"},"nodeType":"YulIf","src":"1271:36:30"},{"nodeType":"YulVariableDeclaration","src":"1316:20:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1330:1:30","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"1333:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1326:3:30"},"nodeType":"YulFunctionCall","src":"1326:10:30"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1320:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1345:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1365:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1359:5:30"},"nodeType":"YulFunctionCall","src":"1359:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1349:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1377:56:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:30"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"1415:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1419:2:30","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1411:3:30"},"nodeType":"YulFunctionCall","src":"1411:11:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1428:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1424:3:30"},"nodeType":"YulFunctionCall","src":"1424:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1407:3:30"},"nodeType":"YulFunctionCall","src":"1407:25:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1395:3:30"},"nodeType":"YulFunctionCall","src":"1395:38:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1381:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1492:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1494:16:30"},"nodeType":"YulFunctionCall","src":"1494:18:30"},"nodeType":"YulExpressionStatement","src":"1494:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1451:10:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1463:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1448:2:30"},"nodeType":"YulFunctionCall","src":"1448:18:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1471:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1483:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1468:2:30"},"nodeType":"YulFunctionCall","src":"1468:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1445:2:30"},"nodeType":"YulFunctionCall","src":"1445:46:30"},"nodeType":"YulIf","src":"1442:72:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1530:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1534:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1523:6:30"},"nodeType":"YulFunctionCall","src":"1523:22:30"},"nodeType":"YulExpressionStatement","src":"1523:22:30"},{"nodeType":"YulVariableDeclaration","src":"1554:17:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1565:6:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1558:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1587:6:30"},{"name":"_4","nodeType":"YulIdentifier","src":"1595:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1580:6:30"},"nodeType":"YulFunctionCall","src":"1580:18:30"},"nodeType":"YulExpressionStatement","src":"1580:18:30"},{"nodeType":"YulAssignment","src":"1607:22:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1618:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1626:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1614:3:30"},"nodeType":"YulFunctionCall","src":"1614:15:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1607:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"1638:34:30","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1660:2:30"},{"name":"_5","nodeType":"YulIdentifier","src":"1664:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1656:3:30"},"nodeType":"YulFunctionCall","src":"1656:11:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1669:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:30"},"nodeType":"YulFunctionCall","src":"1652:20:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1642:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1704:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1713:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1716:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1706:6:30"},"nodeType":"YulFunctionCall","src":"1706:12:30"},"nodeType":"YulExpressionStatement","src":"1706:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1687:6:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1695:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1684:2:30"},"nodeType":"YulFunctionCall","src":"1684:19:30"},"nodeType":"YulIf","src":"1681:39:30"},{"nodeType":"YulVariableDeclaration","src":"1729:22:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1744:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1748:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1740:3:30"},"nodeType":"YulFunctionCall","src":"1740:11:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1733:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1816:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1837:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1855:3:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1842:12:30"},"nodeType":"YulFunctionCall","src":"1842:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1830:6:30"},"nodeType":"YulFunctionCall","src":"1830:30:30"},"nodeType":"YulExpressionStatement","src":"1830:30:30"},{"nodeType":"YulAssignment","src":"1873:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1884:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1889:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1880:3:30"},"nodeType":"YulFunctionCall","src":"1880:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1873:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1771:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1776:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1768:2:30"},"nodeType":"YulFunctionCall","src":"1768:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1784:23:30","statements":[{"nodeType":"YulAssignment","src":"1786:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1797:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1802:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1793:3:30"},"nodeType":"YulFunctionCall","src":"1793:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1786:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1764:3:30","statements":[]},"src":"1760:142:30"},{"nodeType":"YulAssignment","src":"1911:16:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1921:6:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1911:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"820:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"831:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"843:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"851:6:30","type":""}],"src":"750:1183:30"},{"body":{"nodeType":"YulBlock","src":"2008:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"2054:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2063:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2066:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2056:6:30"},"nodeType":"YulFunctionCall","src":"2056:12:30"},"nodeType":"YulExpressionStatement","src":"2056:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2029:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2038:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2025:3:30"},"nodeType":"YulFunctionCall","src":"2025:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2050:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2021:3:30"},"nodeType":"YulFunctionCall","src":"2021:32:30"},"nodeType":"YulIf","src":"2018:52:30"},{"nodeType":"YulAssignment","src":"2079:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2102:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2089:12:30"},"nodeType":"YulFunctionCall","src":"2089:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2079:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1974:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1985:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1997:6:30","type":""}],"src":"1938:180:30"},{"body":{"nodeType":"YulBlock","src":"2396:426:30","statements":[{"nodeType":"YulAssignment","src":"2406:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2418:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2429:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2414:3:30"},"nodeType":"YulFunctionCall","src":"2414:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2406:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2449:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2474:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2467:6:30"},"nodeType":"YulFunctionCall","src":"2467:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2460:6:30"},"nodeType":"YulFunctionCall","src":"2460:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2442:6:30"},"nodeType":"YulFunctionCall","src":"2442:41:30"},"nodeType":"YulExpressionStatement","src":"2442:41:30"},{"nodeType":"YulVariableDeclaration","src":"2492:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2515:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2506:3:30"},"nodeType":"YulFunctionCall","src":"2506:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"2519:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2502:3:30"},"nodeType":"YulFunctionCall","src":"2502:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2496:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2541:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2552:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2537:3:30"},"nodeType":"YulFunctionCall","src":"2537:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2561:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2569:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2557:3:30"},"nodeType":"YulFunctionCall","src":"2557:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2530:6:30"},"nodeType":"YulFunctionCall","src":"2530:43:30"},"nodeType":"YulExpressionStatement","src":"2530:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2593:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2604:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2589:3:30"},"nodeType":"YulFunctionCall","src":"2589:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2613:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2621:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2609:3:30"},"nodeType":"YulFunctionCall","src":"2609:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2582:6:30"},"nodeType":"YulFunctionCall","src":"2582:43:30"},"nodeType":"YulExpressionStatement","src":"2582:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2645:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2656:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2641:3:30"},"nodeType":"YulFunctionCall","src":"2641:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"2661:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2634:6:30"},"nodeType":"YulFunctionCall","src":"2634:34:30"},"nodeType":"YulExpressionStatement","src":"2634:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2688:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2699:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2684:3:30"},"nodeType":"YulFunctionCall","src":"2684:19:30"},{"name":"value4","nodeType":"YulIdentifier","src":"2705:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2677:6:30"},"nodeType":"YulFunctionCall","src":"2677:35:30"},"nodeType":"YulExpressionStatement","src":"2677:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2732:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2743:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2728:3:30"},"nodeType":"YulFunctionCall","src":"2728:19:30"},{"name":"value5","nodeType":"YulIdentifier","src":"2749:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2721:6:30"},"nodeType":"YulFunctionCall","src":"2721:35:30"},"nodeType":"YulExpressionStatement","src":"2721:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2776:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2787:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:30"},"nodeType":"YulFunctionCall","src":"2772:19:30"},{"arguments":[{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"2807:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2800:6:30"},"nodeType":"YulFunctionCall","src":"2800:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2793:6:30"},"nodeType":"YulFunctionCall","src":"2793:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2765:6:30"},"nodeType":"YulFunctionCall","src":"2765:51:30"},"nodeType":"YulExpressionStatement","src":"2765:51:30"}]},"name":"abi_encode_tuple_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__to_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2317:9:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2328:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2336:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2344:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2352:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2360:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2368:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2376:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2387:4:30","type":""}],"src":"2123:699:30"},{"body":{"nodeType":"YulBlock","src":"2897:186:30","statements":[{"body":{"nodeType":"YulBlock","src":"2943:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2952:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2945:6:30"},"nodeType":"YulFunctionCall","src":"2945:12:30"},"nodeType":"YulExpressionStatement","src":"2945:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2918:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2927:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2914:3:30"},"nodeType":"YulFunctionCall","src":"2914:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2939:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2910:3:30"},"nodeType":"YulFunctionCall","src":"2910:32:30"},"nodeType":"YulIf","src":"2907:52:30"},{"nodeType":"YulVariableDeclaration","src":"2968:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2994:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2981:12:30"},"nodeType":"YulFunctionCall","src":"2981:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2972:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3047:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"3013:33:30"},"nodeType":"YulFunctionCall","src":"3013:40:30"},"nodeType":"YulExpressionStatement","src":"3013:40:30"},{"nodeType":"YulAssignment","src":"3062:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3072:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3062:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2863:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2874:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2886:6:30","type":""}],"src":"2827:256:30"},{"body":{"nodeType":"YulBlock","src":"3190:385:30","statements":[{"body":{"nodeType":"YulBlock","src":"3236:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3245:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3248:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3238:6:30"},"nodeType":"YulFunctionCall","src":"3238:12:30"},"nodeType":"YulExpressionStatement","src":"3238:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3211:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3220:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3207:3:30"},"nodeType":"YulFunctionCall","src":"3207:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3232:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3203:3:30"},"nodeType":"YulFunctionCall","src":"3203:32:30"},"nodeType":"YulIf","src":"3200:52:30"},{"nodeType":"YulVariableDeclaration","src":"3261:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3287:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3274:12:30"},"nodeType":"YulFunctionCall","src":"3274:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3265:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3345:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3354:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3357:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3347:6:30"},"nodeType":"YulFunctionCall","src":"3347:12:30"},"nodeType":"YulExpressionStatement","src":"3347:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3319:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3330:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"3337:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3326:3:30"},"nodeType":"YulFunctionCall","src":"3326:16:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3316:2:30"},"nodeType":"YulFunctionCall","src":"3316:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3309:6:30"},"nodeType":"YulFunctionCall","src":"3309:35:30"},"nodeType":"YulIf","src":"3306:55:30"},{"nodeType":"YulAssignment","src":"3370:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3380:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3370:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"3394:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3426:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3437:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3422:3:30"},"nodeType":"YulFunctionCall","src":"3422:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3409:12:30"},"nodeType":"YulFunctionCall","src":"3409:32:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3398:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3484:7:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"3450:33:30"},"nodeType":"YulFunctionCall","src":"3450:42:30"},"nodeType":"YulExpressionStatement","src":"3450:42:30"},{"nodeType":"YulAssignment","src":"3501:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3511:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3501:6:30"}]},{"nodeType":"YulAssignment","src":"3527:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3554:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3565:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3550:3:30"},"nodeType":"YulFunctionCall","src":"3550:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3537:12:30"},"nodeType":"YulFunctionCall","src":"3537:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3527:6:30"}]}]},"name":"abi_decode_tuple_t_uint8t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3140:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3151:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3163:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3171:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3179:6:30","type":""}],"src":"3088:487:30"},{"body":{"nodeType":"YulBlock","src":"3701:141:30","statements":[{"nodeType":"YulAssignment","src":"3711:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3723:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3734:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3719:3:30"},"nodeType":"YulFunctionCall","src":"3719:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3711:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3753:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3768:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3776:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3764:3:30"},"nodeType":"YulFunctionCall","src":"3764:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3746:6:30"},"nodeType":"YulFunctionCall","src":"3746:36:30"},"nodeType":"YulExpressionStatement","src":"3746:36:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3802:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3813:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3798:3:30"},"nodeType":"YulFunctionCall","src":"3798:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3822:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3830:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3818:3:30"},"nodeType":"YulFunctionCall","src":"3818:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3791:6:30"},"nodeType":"YulFunctionCall","src":"3791:45:30"},"nodeType":"YulExpressionStatement","src":"3791:45:30"}]},"name":"abi_encode_tuple_t_uint8_t_uint8__to_t_uint8_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3662:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3673:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3681:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3692:4:30","type":""}],"src":"3580:262:30"},{"body":{"nodeType":"YulBlock","src":"3942:92:30","statements":[{"nodeType":"YulAssignment","src":"3952:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3964:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3975:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3960:3:30"},"nodeType":"YulFunctionCall","src":"3960:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3952:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3994:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4019:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4012:6:30"},"nodeType":"YulFunctionCall","src":"4012:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4005:6:30"},"nodeType":"YulFunctionCall","src":"4005:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3987:6:30"},"nodeType":"YulFunctionCall","src":"3987:41:30"},"nodeType":"YulExpressionStatement","src":"3987:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3911:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3922:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3933:4:30","type":""}],"src":"3847:187:30"},{"body":{"nodeType":"YulBlock","src":"4086:506:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4103:3:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4128:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4122:5:30"},"nodeType":"YulFunctionCall","src":"4122:12:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4115:6:30"},"nodeType":"YulFunctionCall","src":"4115:20:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4108:6:30"},"nodeType":"YulFunctionCall","src":"4108:28:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4096:6:30"},"nodeType":"YulFunctionCall","src":"4096:41:30"},"nodeType":"YulExpressionStatement","src":"4096:41:30"},{"nodeType":"YulVariableDeclaration","src":"4146:43:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4176:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4183:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4172:3:30"},"nodeType":"YulFunctionCall","src":"4172:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4166:5:30"},"nodeType":"YulFunctionCall","src":"4166:23:30"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"4150:12:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4198:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4216:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4221:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4212:3:30"},"nodeType":"YulFunctionCall","src":"4212:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"4225:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4208:3:30"},"nodeType":"YulFunctionCall","src":"4208:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4202:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4247:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4252:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4243:3:30"},"nodeType":"YulFunctionCall","src":"4243:14:30"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"4263:12:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4277:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4259:3:30"},"nodeType":"YulFunctionCall","src":"4259:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4236:6:30"},"nodeType":"YulFunctionCall","src":"4236:45:30"},"nodeType":"YulExpressionStatement","src":"4236:45:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4301:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4306:4:30","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:30"},"nodeType":"YulFunctionCall","src":"4297:14:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4334:4:30","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4323:3:30"},"nodeType":"YulFunctionCall","src":"4323:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4317:5:30"},"nodeType":"YulFunctionCall","src":"4317:23:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4342:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4313:3:30"},"nodeType":"YulFunctionCall","src":"4313:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4290:6:30"},"nodeType":"YulFunctionCall","src":"4290:56:30"},"nodeType":"YulExpressionStatement","src":"4290:56:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4366:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4371:4:30","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4362:3:30"},"nodeType":"YulFunctionCall","src":"4362:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4388:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4395:4:30","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4384:3:30"},"nodeType":"YulFunctionCall","src":"4384:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4378:5:30"},"nodeType":"YulFunctionCall","src":"4378:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4355:6:30"},"nodeType":"YulFunctionCall","src":"4355:47:30"},"nodeType":"YulExpressionStatement","src":"4355:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4422:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4427:4:30","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4418:3:30"},"nodeType":"YulFunctionCall","src":"4418:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4444:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4451:4:30","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4440:3:30"},"nodeType":"YulFunctionCall","src":"4440:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4434:5:30"},"nodeType":"YulFunctionCall","src":"4434:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4411:6:30"},"nodeType":"YulFunctionCall","src":"4411:47:30"},"nodeType":"YulExpressionStatement","src":"4411:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4478:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4483:4:30","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4474:3:30"},"nodeType":"YulFunctionCall","src":"4474:14:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4500:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4507:4:30","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4496:3:30"},"nodeType":"YulFunctionCall","src":"4496:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4490:5:30"},"nodeType":"YulFunctionCall","src":"4490:23:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4467:6:30"},"nodeType":"YulFunctionCall","src":"4467:47:30"},"nodeType":"YulExpressionStatement","src":"4467:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4534:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4539:4:30","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4530:3:30"},"nodeType":"YulFunctionCall","src":"4530:14:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4570:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4577:4:30","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4566:3:30"},"nodeType":"YulFunctionCall","src":"4566:16:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4560:5:30"},"nodeType":"YulFunctionCall","src":"4560:23:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4553:6:30"},"nodeType":"YulFunctionCall","src":"4553:31:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4546:6:30"},"nodeType":"YulFunctionCall","src":"4546:39:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4523:6:30"},"nodeType":"YulFunctionCall","src":"4523:63:30"},"nodeType":"YulExpressionStatement","src":"4523:63:30"}]},"name":"abi_encode_struct_Bet","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4070:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4077:3:30","type":""}],"src":"4039:553:30"},{"body":{"nodeType":"YulBlock","src":"4740:92:30","statements":[{"nodeType":"YulAssignment","src":"4750:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4762:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4773:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4758:3:30"},"nodeType":"YulFunctionCall","src":"4758:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4750:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4808:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4816:9:30"}],"functionName":{"name":"abi_encode_struct_Bet","nodeType":"YulIdentifier","src":"4786:21:30"},"nodeType":"YulFunctionCall","src":"4786:40:30"},"nodeType":"YulExpressionStatement","src":"4786:40:30"}]},"name":"abi_encode_tuple_t_struct$_Bet_$6224_memory_ptr__to_t_struct$_Bet_$6224_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4709:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4720:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4731:4:30","type":""}],"src":"4597:235:30"},{"body":{"nodeType":"YulBlock","src":"4954:102:30","statements":[{"nodeType":"YulAssignment","src":"4964:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4976:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4987:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4972:3:30"},"nodeType":"YulFunctionCall","src":"4972:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4964:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5006:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5021:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5037:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5042:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5033:3:30"},"nodeType":"YulFunctionCall","src":"5033:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"5046:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5029:3:30"},"nodeType":"YulFunctionCall","src":"5029:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5017:3:30"},"nodeType":"YulFunctionCall","src":"5017:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4999:6:30"},"nodeType":"YulFunctionCall","src":"4999:51:30"},"nodeType":"YulExpressionStatement","src":"4999:51:30"}]},"name":"abi_encode_tuple_t_contract$_IBankV2_$7313__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4923:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4934:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4945:4:30","type":""}],"src":"4837:219:30"},{"body":{"nodeType":"YulBlock","src":"5147:338:30","statements":[{"body":{"nodeType":"YulBlock","src":"5193:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5202:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5205:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5195:6:30"},"nodeType":"YulFunctionCall","src":"5195:12:30"},"nodeType":"YulExpressionStatement","src":"5195:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5168:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5177:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5164:3:30"},"nodeType":"YulFunctionCall","src":"5164:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5189:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5160:3:30"},"nodeType":"YulFunctionCall","src":"5160:32:30"},"nodeType":"YulIf","src":"5157:52:30"},{"nodeType":"YulVariableDeclaration","src":"5218:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5244:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5231:12:30"},"nodeType":"YulFunctionCall","src":"5231:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5222:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5297:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"5263:33:30"},"nodeType":"YulFunctionCall","src":"5263:40:30"},"nodeType":"YulExpressionStatement","src":"5263:40:30"},{"nodeType":"YulAssignment","src":"5312:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"5322:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5312:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5336:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5368:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5379:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5364:3:30"},"nodeType":"YulFunctionCall","src":"5364:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5351:12:30"},"nodeType":"YulFunctionCall","src":"5351:32:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5340:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5437:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5446:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5449:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5439:6:30"},"nodeType":"YulFunctionCall","src":"5439:12:30"},"nodeType":"YulExpressionStatement","src":"5439:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5405:7:30"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5418:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"5427:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5414:3:30"},"nodeType":"YulFunctionCall","src":"5414:20:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5402:2:30"},"nodeType":"YulFunctionCall","src":"5402:33:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5395:6:30"},"nodeType":"YulFunctionCall","src":"5395:41:30"},"nodeType":"YulIf","src":"5392:61:30"},{"nodeType":"YulAssignment","src":"5462:17:30","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5472:7:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5462:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5105:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5116:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5128:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5136:6:30","type":""}],"src":"5061:424:30"},{"body":{"nodeType":"YulBlock","src":"5591:102:30","statements":[{"nodeType":"YulAssignment","src":"5601:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5613:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5624:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5609:3:30"},"nodeType":"YulFunctionCall","src":"5609:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5601:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5643:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5658:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5674:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5679:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5670:3:30"},"nodeType":"YulFunctionCall","src":"5670:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"5683:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5666:3:30"},"nodeType":"YulFunctionCall","src":"5666:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5654:3:30"},"nodeType":"YulFunctionCall","src":"5654:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5636:6:30"},"nodeType":"YulFunctionCall","src":"5636:51:30"},"nodeType":"YulExpressionStatement","src":"5636:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5560:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5571:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5582:4:30","type":""}],"src":"5490:203:30"},{"body":{"nodeType":"YulBlock","src":"5814:510:30","statements":[{"body":{"nodeType":"YulBlock","src":"5860:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5869:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5872:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5862:6:30"},"nodeType":"YulFunctionCall","src":"5862:12:30"},"nodeType":"YulExpressionStatement","src":"5862:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5835:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5844:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5831:3:30"},"nodeType":"YulFunctionCall","src":"5831:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5856:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5827:3:30"},"nodeType":"YulFunctionCall","src":"5827:32:30"},"nodeType":"YulIf","src":"5824:52:30"},{"nodeType":"YulVariableDeclaration","src":"5885:37:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5912:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5899:12:30"},"nodeType":"YulFunctionCall","src":"5899:23:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5889:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5931:28:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5941:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5935:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5986:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5995:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5998:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5988:6:30"},"nodeType":"YulFunctionCall","src":"5988:12:30"},"nodeType":"YulExpressionStatement","src":"5988:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5974:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"5982:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5971:2:30"},"nodeType":"YulFunctionCall","src":"5971:14:30"},"nodeType":"YulIf","src":"5968:34:30"},{"nodeType":"YulVariableDeclaration","src":"6011:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6025:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6036:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6021:3:30"},"nodeType":"YulFunctionCall","src":"6021:22:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6015:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6091:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6100:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6103:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6093:6:30"},"nodeType":"YulFunctionCall","src":"6093:12:30"},"nodeType":"YulExpressionStatement","src":"6093:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6070:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"6074:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6066:3:30"},"nodeType":"YulFunctionCall","src":"6066:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6081:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6062:3:30"},"nodeType":"YulFunctionCall","src":"6062:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6055:6:30"},"nodeType":"YulFunctionCall","src":"6055:35:30"},"nodeType":"YulIf","src":"6052:55:30"},{"nodeType":"YulVariableDeclaration","src":"6116:30:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6143:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6130:12:30"},"nodeType":"YulFunctionCall","src":"6130:16:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6120:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6173:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6182:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6185:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6175:6:30"},"nodeType":"YulFunctionCall","src":"6175:12:30"},"nodeType":"YulExpressionStatement","src":"6175:12:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6161:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6169:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6158:2:30"},"nodeType":"YulFunctionCall","src":"6158:14:30"},"nodeType":"YulIf","src":"6155:34:30"},{"body":{"nodeType":"YulBlock","src":"6247:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6256:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6259:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6249:6:30"},"nodeType":"YulFunctionCall","src":"6249:12:30"},"nodeType":"YulExpressionStatement","src":"6249:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6212:2:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6220:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6223:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6216:3:30"},"nodeType":"YulFunctionCall","src":"6216:14:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6208:3:30"},"nodeType":"YulFunctionCall","src":"6208:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6233:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6204:3:30"},"nodeType":"YulFunctionCall","src":"6204:32:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6238:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6201:2:30"},"nodeType":"YulFunctionCall","src":"6201:45:30"},"nodeType":"YulIf","src":"6198:65:30"},{"nodeType":"YulAssignment","src":"6272:21:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6286:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"6290:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6282:3:30"},"nodeType":"YulFunctionCall","src":"6282:11:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6272:6:30"}]},{"nodeType":"YulAssignment","src":"6302:16:30","value":{"name":"length","nodeType":"YulIdentifier","src":"6312:6:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6302:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5772:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5783:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5795:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5803:6:30","type":""}],"src":"5698:626:30"},{"body":{"nodeType":"YulBlock","src":"6382:205:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6392:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6401:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6396:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6461:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6486:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"6491:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6482:3:30"},"nodeType":"YulFunctionCall","src":"6482:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6505:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"6510:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6501:3:30"},"nodeType":"YulFunctionCall","src":"6501:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6495:5:30"},"nodeType":"YulFunctionCall","src":"6495:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6475:6:30"},"nodeType":"YulFunctionCall","src":"6475:39:30"},"nodeType":"YulExpressionStatement","src":"6475:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6422:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"6425:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6419:2:30"},"nodeType":"YulFunctionCall","src":"6419:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6433:19:30","statements":[{"nodeType":"YulAssignment","src":"6435:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6444:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"6447:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6440:3:30"},"nodeType":"YulFunctionCall","src":"6440:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6435:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"6415:3:30","statements":[]},"src":"6411:113:30"},{"body":{"nodeType":"YulBlock","src":"6550:31:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6563:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"6568:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6559:3:30"},"nodeType":"YulFunctionCall","src":"6559:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"6577:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6552:6:30"},"nodeType":"YulFunctionCall","src":"6552:27:30"},"nodeType":"YulExpressionStatement","src":"6552:27:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6539:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"6542:6:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6536:2:30"},"nodeType":"YulFunctionCall","src":"6536:13:30"},"nodeType":"YulIf","src":"6533:48:30"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6360:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6365:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"6370:6:30","type":""}],"src":"6329:258:30"},{"body":{"nodeType":"YulBlock","src":"6641:208:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6651:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6671:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6665:5:30"},"nodeType":"YulFunctionCall","src":"6665:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6655:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6693:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"6698:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6686:6:30"},"nodeType":"YulFunctionCall","src":"6686:19:30"},"nodeType":"YulExpressionStatement","src":"6686:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6740:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"6747:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6736:3:30"},"nodeType":"YulFunctionCall","src":"6736:16:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6758:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6763:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6754:3:30"},"nodeType":"YulFunctionCall","src":"6754:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"6770:6:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6714:21:30"},"nodeType":"YulFunctionCall","src":"6714:63:30"},"nodeType":"YulExpressionStatement","src":"6714:63:30"},{"nodeType":"YulAssignment","src":"6786:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6801:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6814:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6822:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6810:3:30"},"nodeType":"YulFunctionCall","src":"6810:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6831:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6827:3:30"},"nodeType":"YulFunctionCall","src":"6827:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6806:3:30"},"nodeType":"YulFunctionCall","src":"6806:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6797:3:30"},"nodeType":"YulFunctionCall","src":"6797:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"6838:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6793:3:30"},"nodeType":"YulFunctionCall","src":"6793:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6786:3:30"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6618:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6625:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6633:3:30","type":""}],"src":"6592:257:30"},{"body":{"nodeType":"YulBlock","src":"7023:631:30","statements":[{"nodeType":"YulVariableDeclaration","src":"7033:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7043:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7037:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7054:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7072:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7083:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7068:3:30"},"nodeType":"YulFunctionCall","src":"7068:18:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7058:6:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7102:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7113:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7095:6:30"},"nodeType":"YulFunctionCall","src":"7095:21:30"},"nodeType":"YulExpressionStatement","src":"7095:21:30"},{"nodeType":"YulVariableDeclaration","src":"7125:17:30","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"7136:6:30"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"7129:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7151:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7171:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7165:5:30"},"nodeType":"YulFunctionCall","src":"7165:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7155:6:30","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7194:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"7202:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7187:6:30"},"nodeType":"YulFunctionCall","src":"7187:22:30"},"nodeType":"YulExpressionStatement","src":"7187:22:30"},{"nodeType":"YulAssignment","src":"7218:25:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7229:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7240:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7225:3:30"},"nodeType":"YulFunctionCall","src":"7225:18:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7218:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"7252:53:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7274:9:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7289:1:30","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"7292:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7285:3:30"},"nodeType":"YulFunctionCall","src":"7285:14:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7270:3:30"},"nodeType":"YulFunctionCall","src":"7270:30:30"},{"kind":"number","nodeType":"YulLiteral","src":"7302:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7266:3:30"},"nodeType":"YulFunctionCall","src":"7266:39:30"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"7256:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7314:29:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7332:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7340:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7328:3:30"},"nodeType":"YulFunctionCall","src":"7328:15:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7318:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7352:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7361:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7356:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7420:205:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7441:3:30"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7454:6:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7462:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7450:3:30"},"nodeType":"YulFunctionCall","src":"7450:22:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7478:2:30","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7474:3:30"},"nodeType":"YulFunctionCall","src":"7474:7:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7446:3:30"},"nodeType":"YulFunctionCall","src":"7446:36:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7434:6:30"},"nodeType":"YulFunctionCall","src":"7434:49:30"},"nodeType":"YulExpressionStatement","src":"7434:49:30"},{"nodeType":"YulAssignment","src":"7496:49:30","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7529:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7523:5:30"},"nodeType":"YulFunctionCall","src":"7523:13:30"},{"name":"tail_2","nodeType":"YulIdentifier","src":"7538:6:30"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"7506:16:30"},"nodeType":"YulFunctionCall","src":"7506:39:30"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7496:6:30"}]},{"nodeType":"YulAssignment","src":"7558:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7572:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7580:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7568:3:30"},"nodeType":"YulFunctionCall","src":"7568:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7558:6:30"}]},{"nodeType":"YulAssignment","src":"7596:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7607:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"7612:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7603:3:30"},"nodeType":"YulFunctionCall","src":"7603:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7596:3:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7382:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"7385:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7379:2:30"},"nodeType":"YulFunctionCall","src":"7379:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7393:18:30","statements":[{"nodeType":"YulAssignment","src":"7395:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7404:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"7407:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7400:3:30"},"nodeType":"YulFunctionCall","src":"7400:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7395:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"7375:3:30","statements":[]},"src":"7371:254:30"},{"nodeType":"YulAssignment","src":"7634:14:30","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"7642:6:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7634:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6992:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7003:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7014:4:30","type":""}],"src":"6854:800:30"},{"body":{"nodeType":"YulBlock","src":"7746:237:30","statements":[{"body":{"nodeType":"YulBlock","src":"7792:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7801:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7804:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7794:6:30"},"nodeType":"YulFunctionCall","src":"7794:12:30"},"nodeType":"YulExpressionStatement","src":"7794:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7767:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7776:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7763:3:30"},"nodeType":"YulFunctionCall","src":"7763:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7788:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7759:3:30"},"nodeType":"YulFunctionCall","src":"7759:32:30"},"nodeType":"YulIf","src":"7756:52:30"},{"nodeType":"YulVariableDeclaration","src":"7817:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7843:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7830:12:30"},"nodeType":"YulFunctionCall","src":"7830:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7821:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7896:5:30"}],"functionName":{"name":"validator_revert_contract_IBankV2","nodeType":"YulIdentifier","src":"7862:33:30"},"nodeType":"YulFunctionCall","src":"7862:40:30"},"nodeType":"YulExpressionStatement","src":"7862:40:30"},{"nodeType":"YulAssignment","src":"7911:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"7921:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7911:6:30"}]},{"nodeType":"YulAssignment","src":"7935:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7962:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7973:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7958:3:30"},"nodeType":"YulFunctionCall","src":"7958:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7945:12:30"},"nodeType":"YulFunctionCall","src":"7945:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7935:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7704:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7715:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7727:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7735:6:30","type":""}],"src":"7659:324:30"},{"body":{"nodeType":"YulBlock","src":"8197:748:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8207:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8217:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8211:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8228:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8246:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8257:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8242:3:30"},"nodeType":"YulFunctionCall","src":"8242:18:30"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8232:6:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8276:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8287:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8269:6:30"},"nodeType":"YulFunctionCall","src":"8269:21:30"},"nodeType":"YulExpressionStatement","src":"8269:21:30"},{"nodeType":"YulVariableDeclaration","src":"8299:17:30","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"8310:6:30"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"8303:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8325:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8345:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8339:5:30"},"nodeType":"YulFunctionCall","src":"8339:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8329:6:30","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8368:6:30"},{"name":"length","nodeType":"YulIdentifier","src":"8376:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8361:6:30"},"nodeType":"YulFunctionCall","src":"8361:22:30"},"nodeType":"YulExpressionStatement","src":"8361:22:30"},{"nodeType":"YulAssignment","src":"8392:25:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8403:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8414:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8399:3:30"},"nodeType":"YulFunctionCall","src":"8399:18:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8392:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"8426:29:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8444:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8452:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8440:3:30"},"nodeType":"YulFunctionCall","src":"8440:15:30"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8430:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8464:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8473:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8468:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"8532:387:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8546:23:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8562:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8556:5:30"},"nodeType":"YulFunctionCall","src":"8556:13:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8550:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8610:2:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8604:5:30"},"nodeType":"YulFunctionCall","src":"8604:9:30"},{"name":"pos","nodeType":"YulIdentifier","src":"8615:3:30"}],"functionName":{"name":"abi_encode_struct_Bet","nodeType":"YulIdentifier","src":"8582:21:30"},"nodeType":"YulFunctionCall","src":"8582:37:30"},"nodeType":"YulExpressionStatement","src":"8582:37:30"},{"nodeType":"YulVariableDeclaration","src":"8632:38:30","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8662:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8666:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8658:3:30"},"nodeType":"YulFunctionCall","src":"8658:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8652:5:30"},"nodeType":"YulFunctionCall","src":"8652:18:30"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8636:12:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8683:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8693:4:30","type":"","value":"0xff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"8687:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8721:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8726:4:30","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8717:3:30"},"nodeType":"YulFunctionCall","src":"8717:14:30"},{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8743:12:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8737:5:30"},"nodeType":"YulFunctionCall","src":"8737:19:30"},{"name":"_3","nodeType":"YulIdentifier","src":"8758:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8733:3:30"},"nodeType":"YulFunctionCall","src":"8733:28:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8710:6:30"},"nodeType":"YulFunctionCall","src":"8710:52:30"},"nodeType":"YulExpressionStatement","src":"8710:52:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8786:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8791:3:30","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8782:3:30"},"nodeType":"YulFunctionCall","src":"8782:13:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8811:12:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8825:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8807:3:30"},"nodeType":"YulFunctionCall","src":"8807:21:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8801:5:30"},"nodeType":"YulFunctionCall","src":"8801:28:30"},{"name":"_3","nodeType":"YulIdentifier","src":"8831:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8797:3:30"},"nodeType":"YulFunctionCall","src":"8797:37:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8775:6:30"},"nodeType":"YulFunctionCall","src":"8775:60:30"},"nodeType":"YulExpressionStatement","src":"8775:60:30"},{"nodeType":"YulAssignment","src":"8848:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8859:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8864:6:30","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8855:3:30"},"nodeType":"YulFunctionCall","src":"8855:16:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8848:3:30"}]},{"nodeType":"YulAssignment","src":"8884:25:30","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8898:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"8906:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8894:3:30"},"nodeType":"YulFunctionCall","src":"8894:15:30"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8884:6:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8494:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"8497:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8491:2:30"},"nodeType":"YulFunctionCall","src":"8491:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8505:18:30","statements":[{"nodeType":"YulAssignment","src":"8507:14:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8516:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"8519:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8512:3:30"},"nodeType":"YulFunctionCall","src":"8512:9:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8507:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"8487:3:30","statements":[]},"src":"8483:436:30"},{"nodeType":"YulAssignment","src":"8928:11:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"8936:3:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8928:4:30"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8166:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8177:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8188:4:30","type":""}],"src":"7988:957:30"},{"body":{"nodeType":"YulBlock","src":"9075:157:30","statements":[{"nodeType":"YulAssignment","src":"9085:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9097:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9108:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9093:3:30"},"nodeType":"YulFunctionCall","src":"9093:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9085:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9127:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9142:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9150:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9138:3:30"},"nodeType":"YulFunctionCall","src":"9138:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9120:6:30"},"nodeType":"YulFunctionCall","src":"9120:38:30"},"nodeType":"YulExpressionStatement","src":"9120:38:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9178:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9189:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9174:3:30"},"nodeType":"YulFunctionCall","src":"9174:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9198:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9206:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9194:3:30"},"nodeType":"YulFunctionCall","src":"9194:31:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9167:6:30"},"nodeType":"YulFunctionCall","src":"9167:59:30"},"nodeType":"YulExpressionStatement","src":"9167:59:30"}]},"name":"abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9036:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9047:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9055:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9066:4:30","type":""}],"src":"8950:282:30"},{"body":{"nodeType":"YulBlock","src":"9366:175:30","statements":[{"nodeType":"YulAssignment","src":"9376:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9388:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9399:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9384:3:30"},"nodeType":"YulFunctionCall","src":"9384:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9376:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"9411:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9429:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9434:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9425:3:30"},"nodeType":"YulFunctionCall","src":"9425:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"9438:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9421:3:30"},"nodeType":"YulFunctionCall","src":"9421:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9415:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9456:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9471:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9479:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9467:3:30"},"nodeType":"YulFunctionCall","src":"9467:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9449:6:30"},"nodeType":"YulFunctionCall","src":"9449:34:30"},"nodeType":"YulExpressionStatement","src":"9449:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9503:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9514:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9499:3:30"},"nodeType":"YulFunctionCall","src":"9499:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9523:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"9531:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9519:3:30"},"nodeType":"YulFunctionCall","src":"9519:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9492:6:30"},"nodeType":"YulFunctionCall","src":"9492:43:30"},"nodeType":"YulExpressionStatement","src":"9492:43:30"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9327:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9338:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9346:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9357:4:30","type":""}],"src":"9237:304:30"},{"body":{"nodeType":"YulBlock","src":"9627:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"9673:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9682:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9685:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9675:6:30"},"nodeType":"YulFunctionCall","src":"9675:12:30"},"nodeType":"YulExpressionStatement","src":"9675:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9648:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9657:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9644:3:30"},"nodeType":"YulFunctionCall","src":"9644:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9669:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9640:3:30"},"nodeType":"YulFunctionCall","src":"9640:32:30"},"nodeType":"YulIf","src":"9637:52:30"},{"nodeType":"YulAssignment","src":"9698:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9714:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9708:5:30"},"nodeType":"YulFunctionCall","src":"9708:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9698:6:30"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9593:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9604:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9616:6:30","type":""}],"src":"9546:184:30"},{"body":{"nodeType":"YulBlock","src":"9877:141:30","statements":[{"nodeType":"YulAssignment","src":"9887:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9899:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9910:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9895:3:30"},"nodeType":"YulFunctionCall","src":"9895:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9887:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9929:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9944:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9952:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9940:3:30"},"nodeType":"YulFunctionCall","src":"9940:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9922:6:30"},"nodeType":"YulFunctionCall","src":"9922:36:30"},"nodeType":"YulExpressionStatement","src":"9922:36:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9978:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9989:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9974:3:30"},"nodeType":"YulFunctionCall","src":"9974:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9998:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10006:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9994:3:30"},"nodeType":"YulFunctionCall","src":"9994:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9967:6:30"},"nodeType":"YulFunctionCall","src":"9967:45:30"},"nodeType":"YulExpressionStatement","src":"9967:45:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1_t_rational_99_by_1__to_t_uint8_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9838:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9849:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9857:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9868:4:30","type":""}],"src":"9735:283:30"},{"body":{"nodeType":"YulBlock","src":"10176:173:30","statements":[{"nodeType":"YulAssignment","src":"10186:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10198:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10209:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10194:3:30"},"nodeType":"YulFunctionCall","src":"10194:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10186:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10228:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"10239:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10221:6:30"},"nodeType":"YulFunctionCall","src":"10221:25:30"},"nodeType":"YulExpressionStatement","src":"10221:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10266:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10277:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10262:3:30"},"nodeType":"YulFunctionCall","src":"10262:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"10282:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10255:6:30"},"nodeType":"YulFunctionCall","src":"10255:34:30"},"nodeType":"YulExpressionStatement","src":"10255:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10309:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10320:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10305:3:30"},"nodeType":"YulFunctionCall","src":"10305:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10329:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10337:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10325:3:30"},"nodeType":"YulFunctionCall","src":"10325:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10298:6:30"},"nodeType":"YulFunctionCall","src":"10298:45:30"},"nodeType":"YulExpressionStatement","src":"10298:45:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint8__to_t_uint256_t_uint256_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10129:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10140:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10148:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10156:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10167:4:30","type":""}],"src":"10023:326:30"},{"body":{"nodeType":"YulBlock","src":"10453:89:30","statements":[{"nodeType":"YulAssignment","src":"10463:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10475:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10486:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10471:3:30"},"nodeType":"YulFunctionCall","src":"10471:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10463:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10505:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10520:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10528:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10516:3:30"},"nodeType":"YulFunctionCall","src":"10516:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10498:6:30"},"nodeType":"YulFunctionCall","src":"10498:38:30"},"nodeType":"YulExpressionStatement","src":"10498:38:30"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10422:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10433:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10444:4:30","type":""}],"src":"10354:188:30"},{"body":{"nodeType":"YulBlock","src":"10579:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10596:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10603:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10608:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10599:3:30"},"nodeType":"YulFunctionCall","src":"10599:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10589:6:30"},"nodeType":"YulFunctionCall","src":"10589:31:30"},"nodeType":"YulExpressionStatement","src":"10589:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10636:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10639:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10629:6:30"},"nodeType":"YulFunctionCall","src":"10629:15:30"},"nodeType":"YulExpressionStatement","src":"10629:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10660:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10663:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10653:6:30"},"nodeType":"YulFunctionCall","src":"10653:15:30"},"nodeType":"YulExpressionStatement","src":"10653:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10547:127:30"},{"body":{"nodeType":"YulBlock","src":"10773:427:30","statements":[{"nodeType":"YulVariableDeclaration","src":"10783:51:30","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"10822:11:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10809:12:30"},"nodeType":"YulFunctionCall","src":"10809:25:30"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"10787:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10923:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10932:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10935:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10925:6:30"},"nodeType":"YulFunctionCall","src":"10925:12:30"},"nodeType":"YulExpressionStatement","src":"10925:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10857:18:30"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10885:12:30"},"nodeType":"YulFunctionCall","src":"10885:14:30"},{"name":"base_ref","nodeType":"YulIdentifier","src":"10901:8:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10881:3:30"},"nodeType":"YulFunctionCall","src":"10881:29:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10916:2:30","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10912:3:30"},"nodeType":"YulFunctionCall","src":"10912:7:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10877:3:30"},"nodeType":"YulFunctionCall","src":"10877:43:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10853:3:30"},"nodeType":"YulFunctionCall","src":"10853:68:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10846:6:30"},"nodeType":"YulFunctionCall","src":"10846:76:30"},"nodeType":"YulIf","src":"10843:96:30"},{"nodeType":"YulVariableDeclaration","src":"10948:47:30","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"10966:8:30"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10976:18:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10962:3:30"},"nodeType":"YulFunctionCall","src":"10962:33:30"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"10952:6:30","type":""}]},{"nodeType":"YulAssignment","src":"11004:30:30","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"11027:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11014:12:30"},"nodeType":"YulFunctionCall","src":"11014:20:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11004:6:30"}]},{"body":{"nodeType":"YulBlock","src":"11077:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11086:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11089:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11079:6:30"},"nodeType":"YulFunctionCall","src":"11079:12:30"},"nodeType":"YulExpressionStatement","src":"11079:12:30"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11049:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11057:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11046:2:30"},"nodeType":"YulFunctionCall","src":"11046:30:30"},"nodeType":"YulIf","src":"11043:50:30"},{"nodeType":"YulAssignment","src":"11102:25:30","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"11114:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11122:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11110:3:30"},"nodeType":"YulFunctionCall","src":"11110:17:30"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"11102:4:30"}]},{"body":{"nodeType":"YulBlock","src":"11178:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11187:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11190:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11180:6:30"},"nodeType":"YulFunctionCall","src":"11180:12:30"},"nodeType":"YulExpressionStatement","src":"11180:12:30"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"11143:4:30"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"11153:12:30"},"nodeType":"YulFunctionCall","src":"11153:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"11169:6:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11149:3:30"},"nodeType":"YulFunctionCall","src":"11149:27:30"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"11139:3:30"},"nodeType":"YulFunctionCall","src":"11139:38:30"},"nodeType":"YulIf","src":"11136:58:30"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"10730:8:30","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"10740:11:30","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"10756:4:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"10762:6:30","type":""}],"src":"10679:521:30"},{"body":{"nodeType":"YulBlock","src":"11237:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11254:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11261:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11266:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11257:3:30"},"nodeType":"YulFunctionCall","src":"11257:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11247:6:30"},"nodeType":"YulFunctionCall","src":"11247:31:30"},"nodeType":"YulExpressionStatement","src":"11247:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11294:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11297:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11287:6:30"},"nodeType":"YulFunctionCall","src":"11287:15:30"},"nodeType":"YulExpressionStatement","src":"11287:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11318:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11321:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11311:6:30"},"nodeType":"YulFunctionCall","src":"11311:15:30"},"nodeType":"YulExpressionStatement","src":"11311:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"11205:127:30"},{"body":{"nodeType":"YulBlock","src":"11384:88:30","statements":[{"body":{"nodeType":"YulBlock","src":"11415:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11417:16:30"},"nodeType":"YulFunctionCall","src":"11417:18:30"},"nodeType":"YulExpressionStatement","src":"11417:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11400:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11411:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11407:3:30"},"nodeType":"YulFunctionCall","src":"11407:6:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11397:2:30"},"nodeType":"YulFunctionCall","src":"11397:17:30"},"nodeType":"YulIf","src":"11394:43:30"},{"nodeType":"YulAssignment","src":"11446:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11457:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11464:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11453:3:30"},"nodeType":"YulFunctionCall","src":"11453:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11446:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11366:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11376:3:30","type":""}],"src":"11337:135:30"},{"body":{"nodeType":"YulBlock","src":"11525:80:30","statements":[{"body":{"nodeType":"YulBlock","src":"11552:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11554:16:30"},"nodeType":"YulFunctionCall","src":"11554:18:30"},"nodeType":"YulExpressionStatement","src":"11554:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11541:1:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11548:1:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11544:3:30"},"nodeType":"YulFunctionCall","src":"11544:6:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11538:2:30"},"nodeType":"YulFunctionCall","src":"11538:13:30"},"nodeType":"YulIf","src":"11535:39:30"},{"nodeType":"YulAssignment","src":"11583:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11594:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"11597:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11590:3:30"},"nodeType":"YulFunctionCall","src":"11590:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11583:3:30"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11508:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"11511:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11517:3:30","type":""}],"src":"11477:128:30"},{"body":{"nodeType":"YulBlock","src":"11656:147:30","statements":[{"nodeType":"YulVariableDeclaration","src":"11666:45:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11685:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11692:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11681:3:30"},"nodeType":"YulFunctionCall","src":"11681:30:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11670:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"11739:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11741:16:30"},"nodeType":"YulFunctionCall","src":"11741:18:30"},"nodeType":"YulExpressionStatement","src":"11741:18:30"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11730:7:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11723:6:30"},"nodeType":"YulFunctionCall","src":"11723:15:30"},"nodeType":"YulIf","src":"11720:41:30"},{"nodeType":"YulAssignment","src":"11770:27:30","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11781:7:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11794:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11790:3:30"},"nodeType":"YulFunctionCall","src":"11790:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11777:3:30"},"nodeType":"YulFunctionCall","src":"11777:20:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11770:3:30"}]}]},"name":"decrement_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11638:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11648:3:30","type":""}],"src":"11610:193:30"},{"body":{"nodeType":"YulBlock","src":"11982:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11999:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12010:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11992:6:30"},"nodeType":"YulFunctionCall","src":"11992:21:30"},"nodeType":"YulExpressionStatement","src":"11992:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12033:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12044:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12029:3:30"},"nodeType":"YulFunctionCall","src":"12029:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12049:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12022:6:30"},"nodeType":"YulFunctionCall","src":"12022:30:30"},"nodeType":"YulExpressionStatement","src":"12022:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12072:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12083:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12068:3:30"},"nodeType":"YulFunctionCall","src":"12068:18:30"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"12088:34:30","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12061:6:30"},"nodeType":"YulFunctionCall","src":"12061:62:30"},"nodeType":"YulExpressionStatement","src":"12061:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12143:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12154:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12139:3:30"},"nodeType":"YulFunctionCall","src":"12139:18:30"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"12159:8:30","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12132:6:30"},"nodeType":"YulFunctionCall","src":"12132:36:30"},"nodeType":"YulExpressionStatement","src":"12132:36:30"},{"nodeType":"YulAssignment","src":"12177:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12189:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12200:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12185:3:30"},"nodeType":"YulFunctionCall","src":"12185:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12177:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11959:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11973:4:30","type":""}],"src":"11808:402:30"},{"body":{"nodeType":"YulBlock","src":"12389:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12406:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12417:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12399:6:30"},"nodeType":"YulFunctionCall","src":"12399:21:30"},"nodeType":"YulExpressionStatement","src":"12399:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12440:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12451:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12436:3:30"},"nodeType":"YulFunctionCall","src":"12436:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"12456:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12429:6:30"},"nodeType":"YulFunctionCall","src":"12429:30:30"},"nodeType":"YulExpressionStatement","src":"12429:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12479:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12490:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12475:3:30"},"nodeType":"YulFunctionCall","src":"12475:18:30"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12495:34:30","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12468:6:30"},"nodeType":"YulFunctionCall","src":"12468:62:30"},"nodeType":"YulExpressionStatement","src":"12468:62:30"},{"nodeType":"YulAssignment","src":"12539:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12551:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12562:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12547:3:30"},"nodeType":"YulFunctionCall","src":"12547:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12539:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12366:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12380:4:30","type":""}],"src":"12215:356:30"},{"body":{"nodeType":"YulBlock","src":"12608:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12625:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12632:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12637:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12628:3:30"},"nodeType":"YulFunctionCall","src":"12628:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12618:6:30"},"nodeType":"YulFunctionCall","src":"12618:31:30"},"nodeType":"YulExpressionStatement","src":"12618:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12665:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12668:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12658:6:30"},"nodeType":"YulFunctionCall","src":"12658:15:30"},"nodeType":"YulExpressionStatement","src":"12658:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12689:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12692:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12682:6:30"},"nodeType":"YulFunctionCall","src":"12682:15:30"},"nodeType":"YulExpressionStatement","src":"12682:15:30"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"12576:127:30"},{"body":{"nodeType":"YulBlock","src":"12746:74:30","statements":[{"body":{"nodeType":"YulBlock","src":"12769:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"12771:16:30"},"nodeType":"YulFunctionCall","src":"12771:18:30"},"nodeType":"YulExpressionStatement","src":"12771:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12766:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12759:6:30"},"nodeType":"YulFunctionCall","src":"12759:9:30"},"nodeType":"YulIf","src":"12756:35:30"},{"nodeType":"YulAssignment","src":"12800:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12809:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12812:1:30"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"12805:3:30"},"nodeType":"YulFunctionCall","src":"12805:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"12800:1:30"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12731:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"12734:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"12740:1:30","type":""}],"src":"12708:112:30"},{"body":{"nodeType":"YulBlock","src":"12874:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"12896:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12898:16:30"},"nodeType":"YulFunctionCall","src":"12898:18:30"},"nodeType":"YulExpressionStatement","src":"12898:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12890:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12893:1:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12887:2:30"},"nodeType":"YulFunctionCall","src":"12887:8:30"},"nodeType":"YulIf","src":"12884:34:30"},{"nodeType":"YulAssignment","src":"12927:17:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12939:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12942:1:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12935:3:30"},"nodeType":"YulFunctionCall","src":"12935:9:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"12927:4:30"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12856:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"12859:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"12865:4:30","type":""}],"src":"12825:125:30"},{"body":{"nodeType":"YulBlock","src":"13156:262:30","statements":[{"nodeType":"YulAssignment","src":"13166:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13178:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13189:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13174:3:30"},"nodeType":"YulFunctionCall","src":"13174:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13166:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"13202:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13220:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13225:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13216:3:30"},"nodeType":"YulFunctionCall","src":"13216:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"13229:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13212:3:30"},"nodeType":"YulFunctionCall","src":"13212:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13206:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13247:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13262:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13270:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13258:3:30"},"nodeType":"YulFunctionCall","src":"13258:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13240:6:30"},"nodeType":"YulFunctionCall","src":"13240:34:30"},"nodeType":"YulExpressionStatement","src":"13240:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13294:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13305:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13290:3:30"},"nodeType":"YulFunctionCall","src":"13290:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13314:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13322:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13310:3:30"},"nodeType":"YulFunctionCall","src":"13310:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13283:6:30"},"nodeType":"YulFunctionCall","src":"13283:43:30"},"nodeType":"YulExpressionStatement","src":"13283:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13346:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13357:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13342:3:30"},"nodeType":"YulFunctionCall","src":"13342:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"13362:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13335:6:30"},"nodeType":"YulFunctionCall","src":"13335:34:30"},"nodeType":"YulExpressionStatement","src":"13335:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13389:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13400:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13385:3:30"},"nodeType":"YulFunctionCall","src":"13385:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"13405:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13378:6:30"},"nodeType":"YulFunctionCall","src":"13378:34:30"},"nodeType":"YulExpressionStatement","src":"13378:34:30"}]},"name":"abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256__to_t_address_payable_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13101:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13112:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13120:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13128:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13136:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13147:4:30","type":""}],"src":"12955:463:30"},{"body":{"nodeType":"YulBlock","src":"13600:228:30","statements":[{"nodeType":"YulAssignment","src":"13610:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13622:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13633:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13618:3:30"},"nodeType":"YulFunctionCall","src":"13618:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13610:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13653:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"13664:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13646:6:30"},"nodeType":"YulFunctionCall","src":"13646:25:30"},"nodeType":"YulExpressionStatement","src":"13646:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13691:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13702:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13687:3:30"},"nodeType":"YulFunctionCall","src":"13687:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"13707:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13680:6:30"},"nodeType":"YulFunctionCall","src":"13680:34:30"},"nodeType":"YulExpressionStatement","src":"13680:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13734:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13745:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13730:3:30"},"nodeType":"YulFunctionCall","src":"13730:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13754:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13762:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13750:3:30"},"nodeType":"YulFunctionCall","src":"13750:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13723:6:30"},"nodeType":"YulFunctionCall","src":"13723:45:30"},"nodeType":"YulExpressionStatement","src":"13723:45:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13788:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13799:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13784:3:30"},"nodeType":"YulFunctionCall","src":"13784:18:30"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13808:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13816:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13804:3:30"},"nodeType":"YulFunctionCall","src":"13804:17:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13777:6:30"},"nodeType":"YulFunctionCall","src":"13777:45:30"},"nodeType":"YulExpressionStatement","src":"13777:45:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint8_t_uint8__to_t_uint256_t_uint256_t_uint8_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13545:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13556:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13564:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13572:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13580:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13591:4:30","type":""}],"src":"13423:405:30"},{"body":{"nodeType":"YulBlock","src":"14007:166:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14024:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14035:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14017:6:30"},"nodeType":"YulFunctionCall","src":"14017:21:30"},"nodeType":"YulExpressionStatement","src":"14017:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14058:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14069:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14054:3:30"},"nodeType":"YulFunctionCall","src":"14054:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"14074:2:30","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14047:6:30"},"nodeType":"YulFunctionCall","src":"14047:30:30"},"nodeType":"YulExpressionStatement","src":"14047:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14097:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14108:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14093:3:30"},"nodeType":"YulFunctionCall","src":"14093:18:30"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"14113:18:30","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14086:6:30"},"nodeType":"YulFunctionCall","src":"14086:46:30"},"nodeType":"YulExpressionStatement","src":"14086:46:30"},{"nodeType":"YulAssignment","src":"14141:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14153:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14164:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14149:3:30"},"nodeType":"YulFunctionCall","src":"14149:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14141:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13984:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13998:4:30","type":""}],"src":"13833:340:30"},{"body":{"nodeType":"YulBlock","src":"14225:148:30","statements":[{"nodeType":"YulVariableDeclaration","src":"14235:23:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14250:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"14253:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14246:3:30"},"nodeType":"YulFunctionCall","src":"14246:12:30"},"variables":[{"name":"x_1","nodeType":"YulTypedName","src":"14239:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14267:23:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14282:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"14285:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14278:3:30"},"nodeType":"YulFunctionCall","src":"14278:12:30"},"variables":[{"name":"y_1","nodeType":"YulTypedName","src":"14271:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"14315:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14317:16:30"},"nodeType":"YulFunctionCall","src":"14317:18:30"},"nodeType":"YulExpressionStatement","src":"14317:18:30"}]},"condition":{"arguments":[{"name":"x_1","nodeType":"YulIdentifier","src":"14305:3:30"},{"name":"y_1","nodeType":"YulIdentifier","src":"14310:3:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14302:2:30"},"nodeType":"YulFunctionCall","src":"14302:12:30"},"nodeType":"YulIf","src":"14299:38:30"},{"nodeType":"YulAssignment","src":"14346:21:30","value":{"arguments":[{"name":"x_1","nodeType":"YulIdentifier","src":"14358:3:30"},{"name":"y_1","nodeType":"YulIdentifier","src":"14363:3:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14354:3:30"},"nodeType":"YulFunctionCall","src":"14354:13:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14346:4:30"}]}]},"name":"checked_sub_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14207:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"14210:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14216:4:30","type":""}],"src":"14178:195:30"},{"body":{"nodeType":"YulBlock","src":"14430:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"14489:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14491:16:30"},"nodeType":"YulFunctionCall","src":"14491:18:30"},"nodeType":"YulExpressionStatement","src":"14491:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14461:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14454:6:30"},"nodeType":"YulFunctionCall","src":"14454:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14447:6:30"},"nodeType":"YulFunctionCall","src":"14447:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14469:1:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14480:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14476:3:30"},"nodeType":"YulFunctionCall","src":"14476:6:30"},{"name":"x","nodeType":"YulIdentifier","src":"14484:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14472:3:30"},"nodeType":"YulFunctionCall","src":"14472:14:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14466:2:30"},"nodeType":"YulFunctionCall","src":"14466:21:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14443:3:30"},"nodeType":"YulFunctionCall","src":"14443:45:30"},"nodeType":"YulIf","src":"14440:71:30"},{"nodeType":"YulAssignment","src":"14520:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14535:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"14538:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"14531:3:30"},"nodeType":"YulFunctionCall","src":"14531:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"14520:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14409:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"14412:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"14418:7:30","type":""}],"src":"14378:168:30"},{"body":{"nodeType":"YulBlock","src":"14597:74:30","statements":[{"body":{"nodeType":"YulBlock","src":"14620:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"14622:16:30"},"nodeType":"YulFunctionCall","src":"14622:18:30"},"nodeType":"YulExpressionStatement","src":"14622:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14617:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14610:6:30"},"nodeType":"YulFunctionCall","src":"14610:9:30"},"nodeType":"YulIf","src":"14607:35:30"},{"nodeType":"YulAssignment","src":"14651:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14660:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"14663:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14656:3:30"},"nodeType":"YulFunctionCall","src":"14656:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"14651:1:30"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14582:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"14585:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"14591:1:30","type":""}],"src":"14551:120:30"},{"body":{"nodeType":"YulBlock","src":"14754:199:30","statements":[{"body":{"nodeType":"YulBlock","src":"14800:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14809:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14812:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14802:6:30"},"nodeType":"YulFunctionCall","src":"14802:12:30"},"nodeType":"YulExpressionStatement","src":"14802:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14775:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"14784:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14771:3:30"},"nodeType":"YulFunctionCall","src":"14771:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"14796:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14767:3:30"},"nodeType":"YulFunctionCall","src":"14767:32:30"},"nodeType":"YulIf","src":"14764:52:30"},{"nodeType":"YulVariableDeclaration","src":"14825:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14844:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14838:5:30"},"nodeType":"YulFunctionCall","src":"14838:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14829:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"14907:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14916:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14919:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14909:6:30"},"nodeType":"YulFunctionCall","src":"14909:12:30"},"nodeType":"YulExpressionStatement","src":"14909:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14876:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14897:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14890:6:30"},"nodeType":"YulFunctionCall","src":"14890:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14883:6:30"},"nodeType":"YulFunctionCall","src":"14883:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14873:2:30"},"nodeType":"YulFunctionCall","src":"14873:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14866:6:30"},"nodeType":"YulFunctionCall","src":"14866:40:30"},"nodeType":"YulIf","src":"14863:60:30"},{"nodeType":"YulAssignment","src":"14932:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"14942:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14932:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14720:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14731:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14743:6:30","type":""}],"src":"14676:277:30"},{"body":{"nodeType":"YulBlock","src":"15087:145:30","statements":[{"nodeType":"YulAssignment","src":"15097:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15109:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15120:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15105:3:30"},"nodeType":"YulFunctionCall","src":"15105:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15097:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15139:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15154:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15170:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15175:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15166:3:30"},"nodeType":"YulFunctionCall","src":"15166:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"15179:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15162:3:30"},"nodeType":"YulFunctionCall","src":"15162:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15150:3:30"},"nodeType":"YulFunctionCall","src":"15150:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15132:6:30"},"nodeType":"YulFunctionCall","src":"15132:51:30"},"nodeType":"YulExpressionStatement","src":"15132:51:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15203:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15214:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15199:3:30"},"nodeType":"YulFunctionCall","src":"15199:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"15219:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15192:6:30"},"nodeType":"YulFunctionCall","src":"15192:34:30"},"nodeType":"YulExpressionStatement","src":"15192:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15048:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15059:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15067:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15078:4:30","type":""}],"src":"14958:274:30"},{"body":{"nodeType":"YulBlock","src":"15442:335:30","statements":[{"nodeType":"YulAssignment","src":"15452:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15464:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15475:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15460:3:30"},"nodeType":"YulFunctionCall","src":"15460:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15452:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15495:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"15506:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15488:6:30"},"nodeType":"YulFunctionCall","src":"15488:25:30"},"nodeType":"YulExpressionStatement","src":"15488:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15533:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15544:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15529:3:30"},"nodeType":"YulFunctionCall","src":"15529:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15553:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15561:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15549:3:30"},"nodeType":"YulFunctionCall","src":"15549:31:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15522:6:30"},"nodeType":"YulFunctionCall","src":"15522:59:30"},"nodeType":"YulExpressionStatement","src":"15522:59:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15601:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15612:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15597:3:30"},"nodeType":"YulFunctionCall","src":"15597:18:30"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15621:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15629:6:30","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15617:3:30"},"nodeType":"YulFunctionCall","src":"15617:19:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15590:6:30"},"nodeType":"YulFunctionCall","src":"15590:47:30"},"nodeType":"YulExpressionStatement","src":"15590:47:30"},{"nodeType":"YulVariableDeclaration","src":"15646:20:30","value":{"kind":"number","nodeType":"YulLiteral","src":"15656:10:30","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15650:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15686:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15697:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15682:3:30"},"nodeType":"YulFunctionCall","src":"15682:18:30"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15706:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"15714:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15702:3:30"},"nodeType":"YulFunctionCall","src":"15702:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15675:6:30"},"nodeType":"YulFunctionCall","src":"15675:43:30"},"nodeType":"YulExpressionStatement","src":"15675:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15738:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15749:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15734:3:30"},"nodeType":"YulFunctionCall","src":"15734:19:30"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15759:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"15767:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15755:3:30"},"nodeType":"YulFunctionCall","src":"15755:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15727:6:30"},"nodeType":"YulFunctionCall","src":"15727:44:30"},"nodeType":"YulExpressionStatement","src":"15727:44:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15379:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15390:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15398:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15406:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15414:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15422:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15433:4:30","type":""}],"src":"15237:540:30"},{"body":{"nodeType":"YulBlock","src":"15829:89:30","statements":[{"body":{"nodeType":"YulBlock","src":"15856:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15858:16:30"},"nodeType":"YulFunctionCall","src":"15858:18:30"},"nodeType":"YulExpressionStatement","src":"15858:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15849:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15842:6:30"},"nodeType":"YulFunctionCall","src":"15842:13:30"},"nodeType":"YulIf","src":"15839:39:30"},{"nodeType":"YulAssignment","src":"15887:25:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15898:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15909:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15905:3:30"},"nodeType":"YulFunctionCall","src":"15905:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15894:3:30"},"nodeType":"YulFunctionCall","src":"15894:18:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15887:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15811:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15821:3:30","type":""}],"src":"15782:136:30"},{"body":{"nodeType":"YulBlock","src":"16097:181:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16114:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16125:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16107:6:30"},"nodeType":"YulFunctionCall","src":"16107:21:30"},"nodeType":"YulExpressionStatement","src":"16107:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16148:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16159:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16144:3:30"},"nodeType":"YulFunctionCall","src":"16144:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16164:2:30","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16137:6:30"},"nodeType":"YulFunctionCall","src":"16137:30:30"},"nodeType":"YulExpressionStatement","src":"16137:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16187:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16198:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16183:3:30"},"nodeType":"YulFunctionCall","src":"16183:18:30"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"16203:33:30","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16176:6:30"},"nodeType":"YulFunctionCall","src":"16176:61:30"},"nodeType":"YulExpressionStatement","src":"16176:61:30"},{"nodeType":"YulAssignment","src":"16246:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16258:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16269:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16254:3:30"},"nodeType":"YulFunctionCall","src":"16254:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16246:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16074:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16088:4:30","type":""}],"src":"15923:355:30"},{"body":{"nodeType":"YulBlock","src":"16440:218:30","statements":[{"nodeType":"YulAssignment","src":"16450:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16462:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16473:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16458:3:30"},"nodeType":"YulFunctionCall","src":"16458:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16450:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"16485:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16503:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16508:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16499:3:30"},"nodeType":"YulFunctionCall","src":"16499:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"16512:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16495:3:30"},"nodeType":"YulFunctionCall","src":"16495:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16489:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16530:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16545:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"16553:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16541:3:30"},"nodeType":"YulFunctionCall","src":"16541:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16523:6:30"},"nodeType":"YulFunctionCall","src":"16523:34:30"},"nodeType":"YulExpressionStatement","src":"16523:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16577:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16588:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16573:3:30"},"nodeType":"YulFunctionCall","src":"16573:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16597:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"16605:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16593:3:30"},"nodeType":"YulFunctionCall","src":"16593:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16566:6:30"},"nodeType":"YulFunctionCall","src":"16566:43:30"},"nodeType":"YulExpressionStatement","src":"16566:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16629:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16640:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16625:3:30"},"nodeType":"YulFunctionCall","src":"16625:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"16645:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16618:6:30"},"nodeType":"YulFunctionCall","src":"16618:34:30"},"nodeType":"YulExpressionStatement","src":"16618:34:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16393:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16404:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16412:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16420:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16431:4:30","type":""}],"src":"16283:375:30"},{"body":{"nodeType":"YulBlock","src":"16837:170:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16854:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16865:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16847:6:30"},"nodeType":"YulFunctionCall","src":"16847:21:30"},"nodeType":"YulExpressionStatement","src":"16847:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16888:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16899:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16884:3:30"},"nodeType":"YulFunctionCall","src":"16884:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16904:2:30","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16877:6:30"},"nodeType":"YulFunctionCall","src":"16877:30:30"},"nodeType":"YulExpressionStatement","src":"16877:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16927:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16938:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16923:3:30"},"nodeType":"YulFunctionCall","src":"16923:18:30"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"16943:22:30","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16916:6:30"},"nodeType":"YulFunctionCall","src":"16916:50:30"},"nodeType":"YulExpressionStatement","src":"16916:50:30"},{"nodeType":"YulAssignment","src":"16975:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16987:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16998:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16983:3:30"},"nodeType":"YulFunctionCall","src":"16983:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16975:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16814:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16828:4:30","type":""}],"src":"16663:344:30"},{"body":{"nodeType":"YulBlock","src":"17149:137:30","statements":[{"nodeType":"YulVariableDeclaration","src":"17159:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17179:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17173:5:30"},"nodeType":"YulFunctionCall","src":"17173:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17163:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17221:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"17229:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17217:3:30"},"nodeType":"YulFunctionCall","src":"17217:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"17236:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"17241:6:30"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"17195:21:30"},"nodeType":"YulFunctionCall","src":"17195:53:30"},"nodeType":"YulExpressionStatement","src":"17195:53:30"},{"nodeType":"YulAssignment","src":"17257:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17268:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"17273:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17264:3:30"},"nodeType":"YulFunctionCall","src":"17264:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17257:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17125:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17130:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17141:3:30","type":""}],"src":"17012:274:30"},{"body":{"nodeType":"YulBlock","src":"17465:232:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17482:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17493:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17475:6:30"},"nodeType":"YulFunctionCall","src":"17475:21:30"},"nodeType":"YulExpressionStatement","src":"17475:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17516:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17527:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17512:3:30"},"nodeType":"YulFunctionCall","src":"17512:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17532:2:30","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17505:6:30"},"nodeType":"YulFunctionCall","src":"17505:30:30"},"nodeType":"YulExpressionStatement","src":"17505:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17555:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17566:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17551:3:30"},"nodeType":"YulFunctionCall","src":"17551:18:30"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"17571:34:30","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17544:6:30"},"nodeType":"YulFunctionCall","src":"17544:62:30"},"nodeType":"YulExpressionStatement","src":"17544:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17626:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17637:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17622:3:30"},"nodeType":"YulFunctionCall","src":"17622:18:30"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"17642:12:30","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17615:6:30"},"nodeType":"YulFunctionCall","src":"17615:40:30"},"nodeType":"YulExpressionStatement","src":"17615:40:30"},{"nodeType":"YulAssignment","src":"17664:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17676:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17687:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17672:3:30"},"nodeType":"YulFunctionCall","src":"17672:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17664:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17442:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17456:4:30","type":""}],"src":"17291:406:30"},{"body":{"nodeType":"YulBlock","src":"17876:179:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17893:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17904:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17886:6:30"},"nodeType":"YulFunctionCall","src":"17886:21:30"},"nodeType":"YulExpressionStatement","src":"17886:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17927:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17938:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17923:3:30"},"nodeType":"YulFunctionCall","src":"17923:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"17943:2:30","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17916:6:30"},"nodeType":"YulFunctionCall","src":"17916:30:30"},"nodeType":"YulExpressionStatement","src":"17916:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17966:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17977:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17962:3:30"},"nodeType":"YulFunctionCall","src":"17962:18:30"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"17982:31:30","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17955:6:30"},"nodeType":"YulFunctionCall","src":"17955:59:30"},"nodeType":"YulExpressionStatement","src":"17955:59:30"},{"nodeType":"YulAssignment","src":"18023:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18035:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18046:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18031:3:30"},"nodeType":"YulFunctionCall","src":"18031:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18023:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17853:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17867:4:30","type":""}],"src":"17702:353:30"},{"body":{"nodeType":"YulBlock","src":"18181:98:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18198:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18209:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18191:6:30"},"nodeType":"YulFunctionCall","src":"18191:21:30"},"nodeType":"YulExpressionStatement","src":"18191:21:30"},{"nodeType":"YulAssignment","src":"18221:52:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18246:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18258:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18269:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18254:3:30"},"nodeType":"YulFunctionCall","src":"18254:18:30"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"18229:16:30"},"nodeType":"YulFunctionCall","src":"18229:44:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18221:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18150:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18161:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18172:4:30","type":""}],"src":"18060:219:30"},{"body":{"nodeType":"YulBlock","src":"18458:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18475:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18486:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18468:6:30"},"nodeType":"YulFunctionCall","src":"18468:21:30"},"nodeType":"YulExpressionStatement","src":"18468:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18509:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18520:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18505:3:30"},"nodeType":"YulFunctionCall","src":"18505:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18525:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18498:6:30"},"nodeType":"YulFunctionCall","src":"18498:30:30"},"nodeType":"YulExpressionStatement","src":"18498:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18548:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18559:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18544:3:30"},"nodeType":"YulFunctionCall","src":"18544:18:30"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"18564:34:30","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18537:6:30"},"nodeType":"YulFunctionCall","src":"18537:62:30"},"nodeType":"YulExpressionStatement","src":"18537:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18619:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18630:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18615:3:30"},"nodeType":"YulFunctionCall","src":"18615:18:30"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"18635:8:30","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18608:6:30"},"nodeType":"YulFunctionCall","src":"18608:36:30"},"nodeType":"YulExpressionStatement","src":"18608:36:30"},{"nodeType":"YulAssignment","src":"18653:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18665:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18676:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18661:3:30"},"nodeType":"YulFunctionCall","src":"18661:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18653:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18435:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18449:4:30","type":""}],"src":"18284:402:30"}]},"contents":"{\n    { }\n    function validator_revert_contract_IBankV2(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IBankV2_$7313(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__to_t_bool_t_address_payable_t_address_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, iszero(iszero(value0)))\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), iszero(iszero(value6)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint8t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_IBankV2(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8_t_uint8__to_t_uint8_t_uint8__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), and(value1, 0xff))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_struct_Bet(value, pos)\n    {\n        mstore(pos, iszero(iszero(mload(value))))\n        let memberValue0 := mload(add(value, 0x20))\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(pos, 0x20), and(memberValue0, _1))\n        mstore(add(pos, 0x40), and(mload(add(value, 0x40)), _1))\n        mstore(add(pos, 0x60), mload(add(value, 0x60)))\n        mstore(add(pos, 0x80), mload(add(value, 0x80)))\n        mstore(add(pos, 0xa0), mload(add(value, 0xa0)))\n        mstore(add(pos, 0xc0), iszero(iszero(mload(add(value, 0xc0)))))\n    }\n    function abi_encode_tuple_t_struct$_Bet_$6224_memory_ptr__to_t_struct$_Bet_$6224_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        abi_encode_struct_Bet(value0, headStart)\n    }\n    function abi_encode_tuple_t_contract$_IBankV2_$7313__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint16(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, 0xffff))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IBankV2(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FullDiceBet_$6265_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _2 := mload(srcPtr)\n            abi_encode_struct_Bet(mload(_2), pos)\n            let memberValue0 := mload(add(_2, _1))\n            let _3 := 0xff\n            mstore(add(pos, 0xe0), and(mload(memberValue0), _3))\n            mstore(add(pos, 256), and(mload(add(memberValue0, _1)), _3))\n            pos := add(pos, 0x0120)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_rational_1_by_1_t_rational_99_by_1__to_t_uint8_t_uint8__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), and(value1, 0xff))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint8__to_t_uint256_t_uint256_t_uint8__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function decrement_t_uint64(value) -> ret\n    {\n        let value_1 := and(value, 0xffffffffffffffff)\n        if iszero(value_1) { panic_error_0x11() }\n        ret := add(value_1, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256__to_t_address_payable_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint8_t_uint8__to_t_uint256_t_uint256_t_uint8_t_uint8__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n        mstore(add(headStart, 96), and(value3, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if lt(x_1, y_1) { panic_error_0x11() }\n        diff := sub(x_1, y_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        let _1 := 0xffffffff\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"57":[{"length":32,"start":1655},{"length":32,"start":1721}]},"linkReferences":{},"object":"6080604052600436106101815760003560e01c806361f14f11116100d1578063ac9650d81161008a578063e397824011610064578063e397824014610556578063e486033914610576578063e89e106a146105da578063f2fde38b146105f057600080fd5b8063ac9650d8146104dc578063c2fb579f14610509578063e1fdb4b41461053657600080fd5b806361f14f1114610409578063715018a61461043c57806376cdb03b1461045157806378bcde22146104895780638456cb59146104a95780638da5cb5b146104be57600080fd5b80633aecd0e31161013e578063594043fd11610118578063594043fd146103465780635bfe16301461039d5780635c975abb146103ca5780635ffe6146146103e957600080fd5b80633aecd0e3146102c05780634031e85b146102e057806342258eca146102f357600080fd5b8063090d23b91461018657806312065fe0146101a85780631b3ed722146101ca5780631d3c7b91146101e05780631fe543e3146101f657806322af00fa14610216575b600080fd5b34801561019257600080fd5b506101a66101a1366004611d26565b610610565b005b3480156101b457600080fd5b50475b6040519081526020015b60405180910390f35b3480156101d657600080fd5b506101b7600f5481565b3480156101ec57600080fd5b506101b760065481565b34801561020257600080fd5b506101a6610211366004611d59565b61066c565b34801561022257600080fd5b5061027b610231366004611e22565b600a6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff808616966101009096046001600160a01b0390811696951694911687565b6040805197151588526001600160a01b03968716602089015294909516938601939093526060850191909152608084015260a0830152151560c082015260e0016101c1565b3480156102cc57600080fd5b506101b76102db366004611d26565b6106f9565b6101a66102ee366004611e3b565b610781565b3480156102ff57600080fd5b5061032c61030e366004611e22565b600c6020526000908152604090205460ff8082169161010090041682565b6040805160ff9384168152929091166020830152016101c1565b34801561035257600080fd5b5061038d610361366004611d26565b6001600160a01b03166000908152600e60205260409020546201000090046001600160401b0316151590565b60405190151581526020016101c1565b3480156103a957600080fd5b506103bd6103b8366004611e22565b610867565b6040516101c19190611ed8565b3480156103d657600080fd5b50600054600160a01b900460ff1661038d565b3480156103f557600080fd5b506101a6610404366004611e22565b6108e6565b34801561041557600080fd5b5061038d610424366004611e22565b6000908152600a602052604090206005015460ff1690565b34801561044857600080fd5b506101a66108f3565b34801561045d57600080fd5b50600954610471906001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561049557600080fd5b506101a66104a4366004611ee6565b610907565b3480156104b557600080fd5b506101a66109de565b3480156104ca57600080fd5b506000546001600160a01b0316610471565b3480156104e857600080fd5b506104fc6104f7366004611f26565b610a08565b6040516101c19190611ff2565b34801561051557600080fd5b50610529610524366004612054565b610afd565b6040516101c19190612080565b34801561054257600080fd5b506101a6610551366004611e22565b610c2c565b34801561056257600080fd5b50600854610471906001600160a01b031681565b34801561058257600080fd5b506105b8610591366004611d26565b600e6020526000908152604090205461ffff8116906201000090046001600160401b031682565b6040805161ffff90931683526001600160401b039091166020830152016101c1565b3480156105e657600080fd5b506101b760075481565b3480156105fc57600080fd5b506101a661060b366004611d26565b610d93565b610618610e09565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527f10f5824683d64a0712038f2244e046b174a1cc57fbb8556bfda5ffb2612440679060200160405180910390a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106eb5760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6106f58282610e63565b5050565b6000806001600160a01b03831661071257504792915050565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a91906120de565b9392505050565b610789611056565b60ff8316158061079c575060638360ff16115b156107c457604051638a4b39a760e01b815260016004820152606360248201526044016106e2565b60006107dc83836107d7612710886110a3565b6110c8565b606081810180516000908152600c6020908152604091829020805460ff191660ff8b16908117909155828601518287015194516080880151855191825293810193909352928201529394506001600160a01b03908116939116917f7bc15b06f5a3547b8fc8eb36e2c45f4b3385d615fba6158c797e5aa279dcf748910160405180910390a350505050565b61086f611c95565b506000908152600a6020908152604091829020825160e081018452815460ff808216151583526001600160a01b03610100909204821694830194909452600183015416938101939093526002810154606084015260038101546080840152600481015460a08401526005015416151560c082015290565b6108ee610e09565b600f55565b6108fb610e09565b610905600061155b565b565b61090f610e09565b6101908161ffff16111561093657604051631c2d5dd360e21b815260040160405180910390fd5b6001600160a01b0382166000908152600e60205260409020546201000090046001600160401b03161561097c5760405163055212b760e51b815260040160405180910390fd5b6001600160a01b0382166000818152600e6020908152604091829020805461ffff191661ffff861690811790915591519182527f7dfd3ecb8ac83242184c019f85ca408558f2ac0a5a19af6be2a4aee697eac812910160405180910390a25050565b6109e6610e09565b600054600160a01b900460ff1615610a00576109056115ab565b610905611600565b6060816001600160401b03811115610a2257610a22611d43565b604051908082528060200260200182016040528015610a5557816020015b6060815260200190600190039081610a405790505b50905060005b82811015610af557610ac530858584818110610a7957610a796120f7565b9050602002810190610a8b919061210d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061164392505050565b828281518110610ad757610ad76120f7565b60200260200101819052508080610aed90612170565b915050610a5b565b505b92915050565b60606000610b0b8484611668565b9050600081516001600160401b03811115610b2857610b28611d43565b604051908082528060200260200182016040528015610b6157816020015b610b4e611cd1565b815260200190600190039081610b465790505b50905060005b8251811015610c23576040518060400160405280848381518110610b8d57610b8d6120f7565b60200260200101518152602001600c6000868581518110610bb057610bb06120f7565b60209081029190910181015160600151825281810192909252604090810160002081518083019092525460ff8082168352610100909104169181019190915290528251839083908110610c0557610c056120f7565b60200260200101819052508080610c1b90612170565b915050610b67565b50949350505050565b610c3461183a565b6000818152600a60205260409020805460ff16151560011415610c6a576040516310d5f2bd60e11b815260040160405180910390fd5b6004810154610c7a90601e61218b565b421015610c9a576040516303de361f60e11b815260040160405180910390fd5b60018101546001600160a01b03166000908152600e6020526040902080546201000090046001600160401b0316816002610cd3836121a3565b82546001600160401b039182166101009390930a928302919092021990911617905550815460ff1916600190811783558201546001600160a01b0316610d5a57815460038301546040516101009092046001600160a01b0316916108fc82150291906000818181858888f19350505050158015610d54573d6000803e3d6000fd5b50610d85565b815460038301546001840154610d85926001600160a01b039182169261010090910490911690611894565b5050610d9060018055565b50565b610d9b610e09565b6001600160a01b038116610e005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e2565b610d908161155b565b6000546001600160a01b031633146109055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e2565b6000828152600c60209081526040808320600a909252822083519192909160649085908390610e9457610e946120f7565b6020026020010151610ea691906121dc565b610eb190600161218b565b835460ff808316610100810261ff00198416811788559394509281169116171015610fc3578154600160ff1991821681178085556005850180549093168217909255830154600384015485546001600160a01b0392831693610100900490921691600090610f2390839060ff166110a3565b9050806000610f3286856118fc565b90506000610f4082846121f0565b600954604051631f61502360e01b81526001600160a01b0389811660048301528a811660248301526044820184905260648201869052929350911690631f61502390608401600060405180830381600087803b158015610f9f57600080fd5b505af1158015610fb3573d6000803e3d6000fd5b5050505050505050505050610fdc565b815460ff19908116600117835560058301805490911690555b6001820154825460028401546003850154865460408051938452602084019290925260ff9081168383015285166060830152516001600160a01b0393841693610100909304909216917f9b488c9d2f317852722d0866bc6acda97e4e9de6b986918e8a7143cd697437e19181900360800190a35050505050565b600054600160a01b900460ff16156109055760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106e2565b60006110b0826064612207565b60ff166110be84606461222a565b61077a9190612249565b6110d0611c95565b6110d8611056565b6110e061183a565b6001600160a01b038481166000818152600e602052604090819020600954915163cbe230c360e01b8152600481019390935292169063cbe230c390602401602060405180830381865afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f919061225d565b158061116e5750805461ffff16155b1561118c5760405163c455905560e01b815260040160405180910390fd5b60095460405163f6b2a2f160e01b81526001600160a01b038781166004830181905233939015928892600092169063f6b2a2f190602401602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120491906120de565b905080821015611229576040516289563d60e21b8152600481018290526024016106e2565b6009546040516313c59cef60e11b81526001600160a01b038b81166004830152602482018a9052600092169063278b39de90604401602060405180830381865afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f91906120de565b9050808311156112f45783156112f0576001600160a01b0385166108fc6112c683866121f0565b6040518115909202916000818181858888f193505050501580156112ee573d6000803e3d6000fd5b505b8092505b5050600254600480546005546040516305d3b1d360e41b8152928301919091526001600160401b0383166024830152640100000000810461ffff16604483015263ffffffff80821660648401526601000000000000909104166084820152680100000000000000009091046001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906120de565b60078190555060006040518060e00160405280600015158152602001856001600160a01b031681526020018a6001600160a01b031681526020016007548152602001838152602001438152602001600015158152509050600b6000856001600160a01b03166001600160a01b03168152602001908152602001600020600754908060018154018082558091505060019003906000526020600020016000909190919091505580600a6000600754815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff0219169083151502179055509050508261154c5760095461154c906001600160a01b038b81169187911685611928565b94505050505061077a60018055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6115b3611966565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b611608611056565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115e33390565b606061077a83836040518060600160405280602781526020016122c6602791396119b6565b6001600160a01b0382166000908152600b602090815260408083208054825181850281018501909352808352606094938301828280156116c757602002820191906000526020600020905b8154815260200190600101908083116116b3575b50508351939450505050838110156116dd578093505b6000846001600160401b038111156116f7576116f7611d43565b60405190808252806020026020018201604052801561173057816020015b61171d611c95565b8152602001906001900390816117155790505b5090508415611831576000825b61174787856121f0565b81111561182e57600a60008661175e6001856121f0565b8151811061176e5761176e6120f7565b6020908102919091018101518252818101929092526040908101600020815160e081018352815460ff808216151583526001600160a01b03610100909204821695830195909552600183015416928101929092526002810154606083015260038101546080830152600481015460a083015260050154909116151560c08201528351849084908110611802576118026120f7565b6020026020010181905250818061181890612170565b92505080806118269061227f565b91505061173d565b50505b95945050505050565b6002600154141561188d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e2565b6002600155565b6040516001600160a01b0383166024820152604481018290526118f790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a2e565b505050565b6001600160a01b0382166000908152600e6020526040812054612710906110be90849061ffff1661222a565b6040516001600160a01b03808516602483015283166044820152606481018290526119609085906323b872dd60e01b906084016118c0565b50505050565b600054600160a01b900460ff166109055760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106e2565b6060600080856001600160a01b0316856040516119d39190612296565b600060405180830381855af49150503d8060008114611a0e576040519150601f19603f3d011682016040523d82523d6000602084013e611a13565b606091505b5091509150611a2486838387611b03565b9695505050505050565b6000611a83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b819092919063ffffffff16565b9050805160001480611aa4575080806020019051810190611aa4919061225d565b6118f75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e2565b60608315611b6f578251611b68576001600160a01b0385163b611b685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e2565b5081611b79565b611b798383611b90565b949350505050565b6060611b798484600085611bba565b815115611ba05781518083602001fd5b8060405162461bcd60e51b81526004016106e291906122b2565b606082471015611c1b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e2565b600080866001600160a01b03168587604051611c379190612296565b60006040518083038185875af1925050503d8060008114611c74576040519150601f19603f3d011682016040523d82523d6000602084013e611c79565b606091505b5091509150611c8a87838387611b03565b979650505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060400160405280611ce4611c95565b8152602001611d0c6040518060400160405280600060ff168152602001600060ff1681525090565b905290565b6001600160a01b0381168114610d9057600080fd5b600060208284031215611d3857600080fd5b813561077a81611d11565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611d6c57600080fd5b823591506020808401356001600160401b0380821115611d8b57600080fd5b818601915086601f830112611d9f57600080fd5b813581811115611db157611db1611d43565b8060051b604051601f19603f83011681018181108582111715611dd657611dd6611d43565b604052918252848201925083810185019189831115611df457600080fd5b938501935b82851015611e1257843584529385019392850192611df9565b8096505050505050509250929050565b600060208284031215611e3457600080fd5b5035919050565b600080600060608486031215611e5057600080fd5b833560ff81168114611e6157600080fd5b92506020840135611e7181611d11565b929592945050506040919091013590565b805115158252602081015160018060a01b0380821660208501528060408401511660408501525050606081015160608301526080810151608083015260a081015160a083015260c0810151151560c08301525050565b60e08101610af78284611e82565b60008060408385031215611ef957600080fd5b8235611f0481611d11565b9150602083013561ffff81168114611f1b57600080fd5b809150509250929050565b60008060208385031215611f3957600080fd5b82356001600160401b0380821115611f5057600080fd5b818501915085601f830112611f6457600080fd5b813581811115611f7357600080fd5b8660208260051b8501011115611f8857600080fd5b60209290920196919550909350505050565b60005b83811015611fb5578181015183820152602001611f9d565b838111156119605750506000910152565b60008151808452611fde816020860160208601611f9a565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561204757603f19888603018452612035858351611fc6565b94509285019290850190600101612019565b5092979650505050505050565b6000806040838503121561206757600080fd5b823561207281611d11565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561182e5783516120b1848251611e82565b850151805160ff90811660e08601529086015116610100840152928401926101209092019160010161209c565b6000602082840312156120f057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261212457600080fd5b8301803591506001600160401b0382111561213e57600080fd5b60200191503681900382131561215357600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156121845761218461215a565b5060010190565b6000821982111561219e5761219e61215a565b500190565b60006001600160401b038216806121bc576121bc61215a565b6000190192915050565b634e487b7160e01b600052601260045260246000fd5b6000826121eb576121eb6121c6565b500690565b6000828210156122025761220261215a565b500390565b600060ff821660ff8416808210156122215761222161215a565b90039392505050565b60008160001904831182151516156122445761224461215a565b500290565b600082612258576122586121c6565b500490565b60006020828403121561226f57600080fd5b8151801515811461077a57600080fd5b60008161228e5761228e61215a565b506000190190565b600082516122a8818460208701611f9a565b9190910192915050565b60208152600061077a6020830184611fc656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122074db6cb60bcf2ffa7880d27923afffa101041fbfbf71683315dabf25d47ab95964736f6c634300080c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x181 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61F14F11 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xAC9650D8 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE3978240 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE3978240 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0xE89E106A EQ PUSH2 0x5DA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xC2FB579F EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xE1FDB4B4 EQ PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61F14F11 EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x76CDB03B EQ PUSH2 0x451 JUMPI DUP1 PUSH4 0x78BCDE22 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x594043FD GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x594043FD EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x5BFE1630 EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x5FFE6146 EQ PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3AECD0E3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x4031E85B EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x42258ECA EQ PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90D23B9 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x1B3ED722 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x1D3C7B91 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x22AF00FA EQ PUSH2 0x216 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH2 0x610 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x66C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x231 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 SWAP1 SWAP6 ADD SLOAD PUSH1 0xFF DUP1 DUP7 AND SWAP7 PUSH2 0x100 SWAP1 SWAP7 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP7 SWAP6 AND SWAP5 SWAP2 AND DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE SWAP5 SWAP1 SWAP6 AND SWAP4 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1E3B JUMP JUMPDEST PUSH2 0x781 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32C PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF DUP1 DUP3 AND SWAP2 PUSH2 0x100 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BD PUSH2 0x3B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH2 0x867 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1ED8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x38D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH2 0x8E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x8F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x471 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x907 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x9DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x471 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4FC PUSH2 0x4F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F26 JUMP JUMPDEST PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x1FF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x529 PUSH2 0x524 CALLDATASIZE PUSH1 0x4 PUSH2 0x2054 JUMP JUMPDEST PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x2080 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x551 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E22 JUMP JUMPDEST PUSH2 0xC2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x471 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B8 PUSH2 0x591 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D26 JUMP JUMPDEST PUSH2 0xD93 JUMP JUMPDEST PUSH2 0x618 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x10F5824683D64A0712038F2244E046B174A1CC57FBB8556BFDA5FFB261244067 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F5 DUP3 DUP3 PUSH2 0xE63 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x712 JUMPI POP SELFBALANCE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x756 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77A SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x789 PUSH2 0x1056 JUMP JUMPDEST PUSH1 0xFF DUP4 AND ISZERO DUP1 PUSH2 0x79C JUMPI POP PUSH1 0x63 DUP4 PUSH1 0xFF AND GT JUMPDEST ISZERO PUSH2 0x7C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A4B39A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x63 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7DC DUP4 DUP4 PUSH2 0x7D7 PUSH2 0x2710 DUP9 PUSH2 0x10A3 JUMP JUMPDEST PUSH2 0x10C8 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP2 ADD DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF DUP12 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 DUP7 ADD MLOAD DUP3 DUP8 ADD MLOAD SWAP5 MLOAD PUSH1 0x80 DUP9 ADD MLOAD DUP6 MLOAD SWAP2 DUP3 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP3 ADD MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP2 AND SWAP2 PUSH32 0x7BC15B06F5A3547B8FC8EB36E2C45F4B3385D615FBA6158C797E5AA279DCF748 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x86F PUSH2 0x1C95 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0xE09 JUMP JUMPDEST PUSH1 0xF SSTORE JUMP JUMPDEST PUSH2 0x8FB PUSH2 0xE09 JUMP JUMPDEST PUSH2 0x905 PUSH1 0x0 PUSH2 0x155B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x90F PUSH2 0xE09 JUMP JUMPDEST PUSH2 0x190 DUP2 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x936 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1C2D5DD3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO PUSH2 0x97C JUMPI PUSH1 0x40 MLOAD PUSH4 0x55212B7 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7DFD3ECB8AC83242184C019F85CA408558F2AC0A5A19AF6BE2A4AEE697EAC812 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x9E6 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xA00 JUMPI PUSH2 0x905 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x905 PUSH2 0x1600 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA55 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA40 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAF5 JUMPI PUSH2 0xAC5 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xA79 JUMPI PUSH2 0xA79 PUSH2 0x20F7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xA8B SWAP2 SWAP1 PUSH2 0x210D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1643 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAD7 JUMPI PUSH2 0xAD7 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xAED SWAP1 PUSH2 0x2170 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA5B JUMP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xB0B DUP5 DUP5 PUSH2 0x1668 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB28 JUMPI PUSH2 0xB28 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB61 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xB4E PUSH2 0x1CD1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB46 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB8D JUMPI PUSH2 0xB8D PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xC PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBB0 JUMPI PUSH2 0xBB0 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH1 0xFF DUP1 DUP3 AND DUP4 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 MSTORE DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xC05 JUMPI PUSH2 0xC05 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xC1B SWAP1 PUSH2 0x2170 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB67 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xC34 PUSH2 0x183A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x10D5F2BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SLOAD PUSH2 0xC7A SWAP1 PUSH1 0x1E PUSH2 0x218B JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0xC9A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DE361F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH1 0x2 PUSH2 0xCD3 DUP4 PUSH2 0x21A3 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 AND PUSH2 0x100 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP3 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP DUP2 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP4 SSTORE DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD5A JUMPI DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x100 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x8FC DUP3 ISZERO MUL SWAP2 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xD54 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD85 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0xD85 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x100 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH2 0x1894 JUMP JUMPDEST POP POP PUSH2 0xD90 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD9B PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x155B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x905 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP4 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x64 SWAP1 DUP6 SWAP1 DUP4 SWAP1 PUSH2 0xE94 JUMPI PUSH2 0xE94 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xEA6 SWAP2 SWAP1 PUSH2 0x21DC JUMP JUMPDEST PUSH2 0xEB1 SWAP1 PUSH1 0x1 PUSH2 0x218B JUMP JUMPDEST DUP4 SLOAD PUSH1 0xFF DUP1 DUP4 AND PUSH2 0x100 DUP2 MUL PUSH2 0xFF00 NOT DUP5 AND DUP2 OR DUP9 SSTORE SWAP4 SWAP5 POP SWAP3 DUP2 AND SWAP2 AND OR LT ISZERO PUSH2 0xFC3 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR DUP1 DUP6 SSTORE PUSH1 0x5 DUP6 ADD DUP1 SLOAD SWAP1 SWAP4 AND DUP3 OR SWAP1 SWAP3 SSTORE DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH2 0x100 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 SWAP1 PUSH2 0xF23 SWAP1 DUP4 SWAP1 PUSH1 0xFF AND PUSH2 0x10A3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 PUSH2 0xF32 DUP7 DUP6 PUSH2 0x18FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF40 DUP3 DUP5 PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1F615023 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x1F615023 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFB3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP PUSH2 0xFDC JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 OR DUP4 SSTORE PUSH1 0x5 DUP4 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD DUP7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF SWAP1 DUP2 AND DUP4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 PUSH2 0x100 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP2 PUSH32 0x9B488C9D2F317852722D0866BC6ACDA97E4E9DE6B986918E8A7143CD697437E1 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x905 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B0 DUP3 PUSH1 0x64 PUSH2 0x2207 JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x10BE DUP5 PUSH1 0x64 PUSH2 0x222A JUMP JUMPDEST PUSH2 0x77A SWAP2 SWAP1 PUSH2 0x2249 JUMP JUMPDEST PUSH2 0x10D0 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x10D8 PUSH2 0x1056 JUMP JUMPDEST PUSH2 0x10E0 PUSH2 0x183A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x9 SLOAD SWAP2 MLOAD PUSH4 0xCBE230C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND SWAP1 PUSH4 0xCBE230C3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x115F SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x116E JUMPI POP DUP1 SLOAD PUSH2 0xFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x118C JUMPI PUSH1 0x40 MLOAD PUSH4 0xC4559055 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF6B2A2F1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD DUP2 SWAP1 MSTORE CALLER SWAP4 SWAP1 ISZERO SWAP3 DUP9 SWAP3 PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xF6B2A2F1 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1204 SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT ISZERO PUSH2 0x1229 JUMPI PUSH1 0x40 MLOAD PUSH3 0x89563D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x13C59CEF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x278B39DE SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x127B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x129F SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x12F4 JUMPI DUP4 ISZERO PUSH2 0x12F0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x8FC PUSH2 0x12C6 DUP4 DUP7 PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 ISZERO SWAP1 SWAP3 MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x12EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP1 SWAP3 POP JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE SWAP3 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH5 0x100000000 DUP2 DIV PUSH2 0xFFFF AND PUSH1 0x44 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x64 DUP5 ADD MSTORE PUSH7 0x1000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x84 DUP3 ADD MSTORE PUSH9 0x10000000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13B5 SWAP2 SWAP1 PUSH2 0x20DE JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD NUMBER DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH1 0xB PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 SLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP1 PUSH1 0xA PUSH1 0x0 PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP3 PUSH2 0x154C JUMPI PUSH1 0x9 SLOAD PUSH2 0x154C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP2 DUP8 SWAP2 AND DUP6 PUSH2 0x1928 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x77A PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x15B3 PUSH2 0x1966 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1608 PUSH2 0x1056 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x15E3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x77A DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22C6 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x19B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x16C7 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x16B3 JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP4 SWAP5 POP POP POP POP DUP4 DUP2 LT ISZERO PUSH2 0x16DD JUMPI DUP1 SWAP4 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x16F7 JUMPI PUSH2 0x16F7 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1730 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x171D PUSH2 0x1C95 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1715 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 ISZERO PUSH2 0x1831 JUMPI PUSH1 0x0 DUP3 JUMPDEST PUSH2 0x1747 DUP8 DUP6 PUSH2 0x21F0 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x182E JUMPI PUSH1 0xA PUSH1 0x0 DUP7 PUSH2 0x175E PUSH1 0x1 DUP6 PUSH2 0x21F0 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x176E JUMPI PUSH2 0x176E PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP3 DIV DUP3 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x5 ADD SLOAD SWAP1 SWAP2 AND ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE DUP4 MLOAD DUP5 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1802 JUMPI PUSH2 0x1802 PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP1 PUSH2 0x1818 SWAP1 PUSH2 0x2170 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x1826 SWAP1 PUSH2 0x227F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x173D JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x188D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x18F7 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1A2E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2710 SWAP1 PUSH2 0x10BE SWAP1 DUP5 SWAP1 PUSH2 0xFFFF AND PUSH2 0x222A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1960 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x18C0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x905 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x19D3 SWAP2 SWAP1 PUSH2 0x2296 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A0E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A13 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A24 DUP7 DUP4 DUP4 DUP8 PUSH2 0x1B03 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A83 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B81 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1AA4 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1AA4 SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0x18F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B6F JUMPI DUP3 MLOAD PUSH2 0x1B68 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST POP DUP2 PUSH2 0x1B79 JUMP JUMPDEST PUSH2 0x1B79 DUP4 DUP4 PUSH2 0x1B90 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B79 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1BBA JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1BA0 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x22B2 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1C1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1C37 SWAP2 SWAP1 PUSH2 0x2296 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C74 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C79 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1C8A DUP8 DUP4 DUP4 DUP8 PUSH2 0x1B03 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1CE4 PUSH2 0x1C95 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D0C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x77A DUP2 PUSH2 0x1D11 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1DB1 JUMPI PUSH2 0x1DB1 PUSH2 0x1D43 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1DD6 JUMPI PUSH2 0x1DD6 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x1DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1E12 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x1DF9 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1E61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1E71 DUP2 PUSH2 0x1D11 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP6 ADD MSTORE DUP1 PUSH1 0x40 DUP5 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE POP POP PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0xAF7 DUP3 DUP5 PUSH2 0x1E82 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1F04 DUP2 PUSH2 0x1D11 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FB5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1F9D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1960 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FDE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2047 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2035 DUP6 DUP4 MLOAD PUSH2 0x1FC6 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2019 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2072 DUP2 PUSH2 0x1D11 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x182E JUMPI DUP4 MLOAD PUSH2 0x20B1 DUP5 DUP3 MLOAD PUSH2 0x1E82 JUMP JUMPDEST DUP6 ADD MLOAD DUP1 MLOAD PUSH1 0xFF SWAP1 DUP2 AND PUSH1 0xE0 DUP7 ADD MSTORE SWAP1 DUP7 ADD MLOAD AND PUSH2 0x100 DUP5 ADD MSTORE SWAP3 DUP5 ADD SWAP3 PUSH2 0x120 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x209C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x213E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2184 JUMPI PUSH2 0x2184 PUSH2 0x215A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x219E JUMPI PUSH2 0x219E PUSH2 0x215A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP1 PUSH2 0x21BC JUMPI PUSH2 0x21BC PUSH2 0x215A JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x21EB JUMPI PUSH2 0x21EB PUSH2 0x21C6 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2202 JUMPI PUSH2 0x2202 PUSH2 0x215A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 DUP3 LT ISZERO PUSH2 0x2221 JUMPI PUSH2 0x2221 PUSH2 0x215A JUMP JUMPDEST SWAP1 SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2244 JUMPI PUSH2 0x2244 PUSH2 0x215A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2258 JUMPI PUSH2 0x2258 PUSH2 0x21C6 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x226F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x228E JUMPI PUSH2 0x228E PUSH2 0x215A JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x22A8 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1F9A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x77A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FC6 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122074DB6C 0xB6 SIGNEXTEND 0xCF 0x2F STATICCALL PUSH25 0x80D27923AFFFA101041FBFBF71683315DABF25D47AB9596473 PUSH16 0x6C634300080C00330000000000000000 ","sourceMap":"641:14385:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5946:239;;;;;;;;;;-1:-1:-1;5946:239:28;;;;;:::i;:::-;;:::i;:::-;;12237:97;;;;;;;;;;-1:-1:-1;12306:21:28;12237:97;;;582:25:30;;;570:2;555:18;12237:97:28;;;;;;;;9089:29;;;;;;;;;;;;;;;;1513:28;;;;;;;;;;;;;;;;6618:256:3;;;;;;;;;;-1:-1:-1;6618:256:3;;;;;:::i;:::-;;:::i;2436:35:28:-;;;;;;;;;;-1:-1:-1;2436:35:28;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2436:35:28;;;;;;;;;;;;;;;2467:14:30;;2460:22;2442:41;;-1:-1:-1;;;;;2557:15:30;;;2552:2;2537:18;;2530:43;2609:15;;;;2589:18;;;2582:43;;;;2656:2;2641:18;;2634:34;;;;2699:3;2684:19;;2677:35;2510:3;2728:19;;2721:35;2800:14;2793:22;2787:3;2772:19;;2765:51;2429:3;2414:19;2436:35:28;2123:699:30;12567:287:28;;;;;;;;;;-1:-1:-1;12567:287:28;;;;;:::i;:::-;;:::i;11747:484::-;;;;;;:::i;:::-;;:::i;3836:43::-;;;;;;;;;;-1:-1:-1;3836:43:28;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;3776:4:30;3764:17;;;3746:36;;3818:17;;;;3813:2;3798:18;;3791:45;3719:18;3836:43:28;3580:262:30;5728:121:28;;;;;;;;;;-1:-1:-1;5728:121:28;;;;;:::i;:::-;-1:-1:-1;;;;;5811:13:28;5788:4;5811:13;;;:6;:13;;;;;:26;;;;-1:-1:-1;;;;;5811:26:28;:31;;;5728:121;;;;4012:14:30;;4005:22;3987:41;;3975:2;3960:18;5728:121:28;3847:187:30;10186:138:28;;;;;;;;;;-1:-1:-1;10186:138:28;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1615:84:11:-;;;;;;;;;;-1:-1:-1;1662:4:11;1685:7;-1:-1:-1;;;1685:7:11;;;;1615:84;;9125:97:28;;;;;;;;;;-1:-1:-1;9125:97:28;;;;;:::i;:::-;;:::i;10330:143::-;;;;;;;;;;-1:-1:-1;10330:143:28;;;;;:::i;:::-;10385:11;10427:8;;;:4;:8;;;;;10452:14;;;;;;10330:143;1824:101:10;;;;;;;;;;;;;:::i;1608:19:28:-;;;;;;;;;;-1:-1:-1;1608:19:28;;;;-1:-1:-1;;;;;1608:19:28;;;;;;-1:-1:-1;;;;;5017:32:30;;;4999:51;;4987:2;4972:18;1608:19:28;4837:219:30;6397:342:28;;;;;;;;;;-1:-1:-1;6397:342:28;;;;;:::i;:::-;;:::i;14185:140::-;;;;;;;;;;;;;:::i;1201:85:10:-;;;;;;;;;;-1:-1:-1;1247:7:10;1273:6;-1:-1:-1;;;;;1273:6:10;1201:85;;470:308:19;;;;;;;;;;-1:-1:-1;470:308:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;14518:506:28:-;;;;;;;;;;-1:-1:-1;14518:506:28;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10591:603::-;;;;;;;;;;-1:-1:-1;10591:603:28;;;;;:::i;:::-;;:::i;1579:22::-;;;;;;;;;;-1:-1:-1;1579:22:28;;;;-1:-1:-1;;;;;1579:22:28;;;5260:39;;;;;;;;;;-1:-1:-1;5260:39:28;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5260:39:28;;;;;;;9150:6:30;9138:19;;;9120:38;;-1:-1:-1;;;;;9194:31:30;;;9189:2;9174:18;;9167:59;9093:18;5260:39:28;8950:282:30;1547:26:28;;;;;;;;;;;;;;;;2074:198:10;;;;;;;;;;-1:-1:-1;2074:198:10;;;;;:::i;:::-;;:::i;5946:239:28:-;1094:13:10;:11;:13::i;:::-;6128:4:28::1;:12:::0;;-1:-1:-1;;;;;;6128:12:28::1;-1:-1:-1::0;;;;;6128:12:28;::::1;::::0;;::::1;::::0;;;6155:23:::1;::::0;4999:51:30;;;6155:23:28::1;::::0;4987:2:30;4972:18;6155:23:28::1;;;;;;;5946:239:::0;:::o;6618:256:3:-;6717:10;-1:-1:-1;;;;;6731:14:3;6717:28;;6713:109;;6762:53;;-1:-1:-1;;;6762:53:3;;6788:10;6762:53;;;9449:34:30;-1:-1:-1;;;;;6800:14:3;9519:15:30;9499:18;;;9492:43;9384:18;;6762:53:3;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;12567:287:28:-;12628:7;;-1:-1:-1;;;;;6987:19:28;;12673:175;;-1:-1:-1;12729:21:28;;12567:287;-1:-1:-1;;12567:287:28:o;12673:175::-;12799:38;;-1:-1:-1;;;12799:38:28;;12831:4;12799:38;;;4999:51:30;-1:-1:-1;;;;;12799:23:28;;;;;4972:18:30;;12799:38:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12788:49;12567:287;-1:-1:-1;;;12567:287:28:o;11747:484::-;1239:19:11;:17;:19::i;:::-;11966:8:28::1;::::0;::::1;::::0;;:20:::1;;;11984:2;11978:3;:8;;;11966:20;11962:78;;;12009:20;::::0;-1:-1:-1;;;12009:20:28;;12023:1:::1;12009:20;::::0;::::1;3746:36:30::0;12026:2:28::1;3798:18:30::0;;;3791:45;3719:18;;12009:20:28::1;3580:262:30::0;11962:78:28::1;12050:14;12067:51;12075:5;12082:11;12095:22;12106:5;12113:3;12095:10;:22::i;:::-;12067:7;:51::i;:::-;12137:6;::::0;;::::1;::::0;;12128:16:::1;::::0;;;:8:::1;:16;::::0;;;;;;;;:26;;-1:-1:-1;;12128:26:28::1;;::::0;::::1;::::0;;::::1;::::0;;;12197:9;;::::1;::::0;12187:8;;::::1;::::0;12179:6;;12208:10:::1;::::0;::::1;::::0;12170:54;;10221:25:30;;;10262:18;;;10255:34;;;;10305:18;;;10298:45;12137:6:28;;-1:-1:-1;;;;;;12170:54:28;;::::1;::::0;;::::1;::::0;::::1;::::0;10194:18:30;12170:54:28::1;;;;;;;11870:361;11747:484:::0;;;:::o;10186:138::-;10239:18;;:::i;:::-;-1:-1:-1;10269:16:28;10288:8;;;:4;:8;;;;;;;;;10306:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10306:11:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10186:138::o;9125:97::-;1094:13:10;:11;:13::i;:::-;9196:10:28::1;:19:::0;9125:97::o;1824:101:10:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;6397:342:28:-;1094:13:10;:11;:13::i;:::-;6497:3:28::1;6485:9;:15;;;6481:73;;;6523:20;;-1:-1:-1::0;;;6523:20:28::1;;;;;;;;;;;6481:73;-1:-1:-1::0;;;;;5811:13:28;;5788:4;5811:13;;;:6;:13;;;;;:26;;;;-1:-1:-1;;;;;5811:26:28;:31;6563:80:::1;;6611:21;;-1:-1:-1::0;;;6611:21:28::1;;;;;;;;;;;6563:80;-1:-1:-1::0;;;;;6652:13:28;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;;:35;;-1:-1:-1;;6652:35:28::1;;::::0;::::1;::::0;;::::1;::::0;;;6702:30;;10498:38:30;;;6702:30:28::1;::::0;10471:18:30;6702:30:28::1;;;;;;;6397:342:::0;;:::o;14185:140::-;1094:13:10;:11;:13::i;:::-;1662:4:11;1685:7;-1:-1:-1;;;1685:7:11;;;;14231:88:28::1;;;14259:10;:8;:10::i;14231:88::-;14300:8;:6;:8::i;470:308:19:-:0;538:22;594:4;-1:-1:-1;;;;;582:24:19;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:34;;621:9;616:132;636:15;;;616:132;;;685:52;722:4;729;;734:1;729:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;685:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:28:19;;-1:-1:-1;;;685:52:19:i;:::-;672:7;680:1;672:10;;;;;;;;:::i;:::-;;;;;;:65;;;;653:3;;;;;:::i;:::-;;;;616:132;;;;470:308;;;;;:::o;14518:506:28:-;14624:20;14660:21;14684:34;14701:4;14707:10;14684:16;:34::i;:::-;14660:58;;14728:33;14782:8;:15;-1:-1:-1;;;;;14764:34:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;14728:70;;14813:9;14808:181;14828:8;:15;14824:1;:19;14808:181;;;14882:96;;;;;;;;14911:8;14920:1;14911:11;;;;;;;;:::i;:::-;;;;;;;14882:96;;;;14940:8;:24;14949:8;14958:1;14949:11;;;;;;;;:::i;:::-;;;;;;;;;;;;:14;;;14940:24;;;;;;;;;;;;;-1:-1:-1;14940:24:28;14882:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14864:15;;:12;;14877:1;;14864:15;;;;;;:::i;:::-;;;;;;:114;;;;14845:3;;;;;:::i;:::-;;;;14808:181;;;-1:-1:-1;15005:12:28;14518:506;-1:-1:-1;;;;14518:506:28:o;10591:603::-;2261:21:12;:19;:21::i;:::-;10654:15:28::1;10672:8:::0;;;:4:::1;:8;::::0;;;;10694:12;;::::1;;:20;;:12:::0;:20:::1;10690:167;;;10737:15;;-1:-1:-1::0;;;10737:15:28::1;;;;;;;;;;;10690:167;10791:13;::::0;::::1;::::0;:18:::1;::::0;10807:2:::1;10791:18;:::i;:::-;10773:15;:36;10769:88;;;10832:14;;-1:-1:-1::0;;;10832:14:28::1;;;;;;;;;;;10769:88;10896:9;::::0;::::1;::::0;-1:-1:-1;;;;;10896:9:28::1;10867:19;10889:17:::0;;;:6:::1;:17;::::0;;;;10916:20;;;;::::1;-1:-1:-1::0;;;;;10916:20:28::1;10889:17:::0;10916:18:::1;:20;::::0;::::1;:::i;:::-;::::0;;-1:-1:-1;;;;;10916:20:28;;::::1;;::::0;;;::::1;::::0;;::::1;::::0;;;::::1;;::::0;;::::1;;::::0;;-1:-1:-1;10947:19:28;;-1:-1:-1;;10947:19:28::1;-1:-1:-1::0;10947:19:28;;::::1;::::0;;11017:9;::::1;::::0;-1:-1:-1;;;;;11017:9:28::1;11013:175;;11064:8:::0;;11083:10:::1;::::0;::::1;::::0;11056:38:::1;::::0;11064:8:::1;::::0;;::::1;-1:-1:-1::0;;;;;11064:8:28::1;::::0;11056:38:::1;::::0;::::1;;::::0;11083:10;11064:8:::1;11056:38:::0;11064:8;11056:38;11083:10;11064:8;11056:38;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;11013:175;;;11156:8:::0;;11166:10:::1;::::0;::::1;::::0;11156:8:::1;11132:9:::0;::::1;::::0;11125:52:::1;::::0;-1:-1:-1;;;;;11132:9:28;;::::1;::::0;11156:8:::1;::::0;;::::1;::::0;;::::1;::::0;11125:30:::1;:52::i;:::-;10644:550;;2303:20:12::0;1716:1;2809:22;;2629:209;2303:20;10591:603:28;:::o;2074:198:10:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:10;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:10;;12010:2:30;2154:73:10::1;::::0;::::1;11992:21:30::0;12049:2;12029:18;;;12022:30;12088:34;12068:18;;;12061:62;-1:-1:-1;;;12139:18:30;;;12132:36;12185:19;;2154:73:10::1;11808:402:30::0;2154:73:10::1;2237:28;2256:8;2237:18;:28::i;1359:130::-:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:10;719:10:18;1422:23:10;1414:68;;;;-1:-1:-1;;;1414:68:10;;12417:2:30;1414:68:10;;;12399:21:30;;;12436:18;;;12429:30;12495:34;12475:18;;;12468:62;12547:18;;1414:68:10;12215:356:30;12860:1262:28;12996:23;13022:12;;;:8;:12;;;;;;;;13062:4;:8;;;;;13102:14;;13022:12;;13062:8;;13119:3;;13102:11;;12996:23;;13102:14;;;;:::i;:::-;;;;;;;:20;;;;:::i;:::-;13101:26;;13126:1;13101:26;:::i;:::-;13138:23;;;;;;;;;-1:-1:-1;;13138:23:28;;;;;;13080:48;;-1:-1:-1;13185:11:28;;;;;;-1:-1:-1;13172:758:28;;;13212:19;;13227:4;-1:-1:-1;;13212:19:28;;;;;;;;13245:13;;;:20;;;;;;;;;;13354:9;;;13442:10;;;;13506:11;;-1:-1:-1;;;;;13354:9:28;;;;13212:19;13400:8;;;;;;-1:-1:-1;;13484:34:28;;13442:10;;13212:19;13506:11;13484:10;:34::i;:::-;13467:51;-1:-1:-1;13467:51:28;13532:14;13589:26;13598:5;13605:9;13589:8;:26::i;:::-;13569:46;-1:-1:-1;13629:20:28;13652:18;13569:46;13652:6;:18;:::i;:::-;13785:4;;:49;;-1:-1:-1;;;13785:49:28;;-1:-1:-1;;;;;13258:15:30;;;13785:49:28;;;13240:34:30;13310:15;;;13290:18;;;13283:43;13342:18;;;13335:34;;;13385:18;;;13378:34;;;13629:41:28;;-1:-1:-1;13785:4:28;;;:11;;13174:19:30;;13785:49:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13198:647;;;;;;;13172:758;;;13865:19;;-1:-1:-1;;13865:19:28;;;13880:4;13865:19;;;13898:13;;;:21;;;;;;;13172:758;14005:9;;;;13983:8;;13963:6;;;;14028:10;;;;14052:11;;13945:170;;;13646:25:30;;;13702:2;13687:18;;13680:34;;;;14052:11:28;;;;13730:18:30;;;13723:45;13804:17;;13799:2;13784:18;;13777:45;13945:170:28;-1:-1:-1;;;;;14005:9:28;;;;;13983:8;;;;;;;13945:170;;;;;13633:3:30;13945:170:28;;;12986:1136;;;12860:1262;;:::o;1767:106:11:-;1662:4;1685:7;-1:-1:-1;;;1685:7:11;;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:11;;14035:2:30;1828:38:11;;;14017:21:30;14074:2;14054:18;;;14047:30;-1:-1:-1;;;14093:18:30;;;14086:46;14149:18;;1828:38:11;13833:340:30;11375:164:28;11471:7;11522:9;11528:3;11522;:9;:::i;:::-;11501:31;;11502:15;:9;11514:3;11502:15;:::i;:::-;11501:31;;;;:::i;7199:1869::-;7349:10;;:::i;:::-;1239:19:11;:17;:19::i;:::-;2261:21:12::1;:19;:21::i;:::-;-1:-1:-1::0;;;;;7393:20:28;;::::2;7371:19;7393:20:::0;;;:6:::2;:20;::::0;;;;;;7440:4:::2;::::0;:33;;-1:-1:-1;;;7440:33:28;;::::2;::::0;::::2;4999:51:30::0;;;;7393:20:28;7440:4:::2;::::0;:19:::2;::::0;4972:18:30;;7440:33:28::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:42;::::0;:66:::2;;-1:-1:-1::0;7486:15:28;;::::2;;:20:::0;7440:66:::2;7423:142;;;7538:16;;-1:-1:-1::0;;;7538:16:28::2;;;;;;;;;;;7423:142;7743:4;::::0;:34:::2;::::0;-1:-1:-1;;;7743:34:28;;-1:-1:-1;;;;;7628:26:28;;::::2;7743:34;::::0;::::2;4999:51:30::0;;;7590:10:28::2;::::0;7628:26;;;7684:11;;7575:12:::2;::::0;7743:4:::2;::::0;:20:::2;::::0;4972:18:30;;7743:34:28::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7720:57;;7807:12;7795:9;:24;7791:101;;;7846:31;::::0;-1:-1:-1;;;7846:31:28;;::::2;::::0;::::2;582:25:30::0;;;555:18;;7846:31:28::2;436:177:30::0;7791:101:28::2;7929:4;::::0;:41:::2;::::0;-1:-1:-1;;;7929:41:28;;-1:-1:-1;;;;;15150:32:30;;;7929:41:28::2;::::0;::::2;15132:51:30::0;15199:18;;;15192:34;;;7906:20:28::2;::::0;7929:4:::2;::::0;:20:::2;::::0;15105:18:30;;7929:41:28::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7906:64;;8000:12;7988:9;:24;7984:209;;;8036:10;8032:105;;;-1:-1:-1::0;;;;;8070:22:28;::::2;:48;8093:24;8105:12:::0;8093:9;:24:::2;:::i;:::-;8070:48;::::0;;::::2;::::0;;::::2;::::0;::::2;::::0;;;;;;::::2;;;;;;;;;;;;;::::0;::::2;;;;;;8032:105;8166:12;8154:24;;7984:209;-1:-1:-1::0;;8227:11:28::2;::::0;8271:7:::2;::::0;;8322:20:::2;::::0;8227:177:::2;::::0;-1:-1:-1;;;8227:177:28;;;;::::2;15488:25:30::0;;;;-1:-1:-1;;;;;8292:16:28;::::2;15529:18:30::0;;;15522:59;8322:20:28;;::::2;;;15597:18:30::0;;;15590:47;8356:16:28::2;::::0;;::::2;15682:18:30::0;;;15675:43;8386:8:28;;;::::2;;15734:19:30::0;;;15727:44;8227:11:28;;;::::2;-1:-1:-1::0;;;;;8227:11:28::2;::::0;:30:::2;::::0;15460:19:30;;8227:177:28::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8213:11;:191;;;;8415:17;8435:195;;;;;;;;8452:5;8435:195;;;;;;8479:4;-1:-1:-1::0;;;;;8435:195:28::2;;;;;8498:12;-1:-1:-1::0;;;;;8435:195:28::2;;;;;8524:11;;8435:195;;;;8549:9;8435:195;;;;8572:12;8435:195;;;;8598:5;8435:195;;;;::::0;8415:215:::2;;8640:9;:15;8650:4;-1:-1:-1::0;;;;;8640:15:28::2;-1:-1:-1::0;;;;;8640:15:28::2;;;;;;;;;;;;8661:11;;8640:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8703:6;8683:4;:17;8688:11;;8683:17;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;8683:26:28::2;;;;;-1:-1:-1::0;;;;;8683:26:28::2;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;8683:26:28::2;;;;;-1:-1:-1::0;;;;;8683:26:28::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8766:10;8761:277;;8877:4;::::0;8792:131:::2;::::0;-1:-1:-1;;;;;8792:37:28;;::::2;::::0;8847:4;;8877::::2;8900:9:::0;8792:37:::2;:131::i;:::-;9055:6:::0;-1:-1:-1;;;;;2303:20:12::1;1716:1:::0;2809:22;;2629:209;2426:187:10;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:10;;;-1:-1:-1;;;;;;2534:17:10;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;2433:117:11:-;1486:16;:14;:16::i;:::-;2501:5:::1;2491:15:::0;;-1:-1:-1;;;;2491:15:11::1;::::0;;2521:22:::1;719:10:18::0;2530:12:11::1;2521:22;::::0;-1:-1:-1;;;;;5017:32:30;;;4999:51;;4987:2;4972:18;2521:22:11::1;;;;;;;2433:117::o:0;2186:115::-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;;;2245:14:11::1;-1:-1:-1::0;;;2245:14:11::1;::::0;;2274:20:::1;2281:12;719:10:18::0;;640:96;6674:198:17;6757:12;6788:77;6809:6;6817:4;6788:77;;;;;;;;;;;;;;;;;:20;:77::i;9506:674:28:-;-1:-1:-1;;;;;9672:15:28;;9641:28;9672:15;;;:9;:15;;;;;;;;9641:46;;;;;;;;;;;;;;;;;9613:12;;9641:28;:46;;9672:15;9641:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9718:18:28;;9641:46;;-1:-1:-1;;;;9751:23:28;;;9747:77;;;9803:10;9790:23;;9747:77;9834:21;9868:10;-1:-1:-1;;;;;9858:21:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;9834:45:28;-1:-1:-1;9893:15:28;;9889:259;;9924:21;9976:10;9959:179;9992:23;10005:10;9992;:23;:::i;:::-;9988:1;:27;9959:179;;;10066:4;:24;10071:11;10083:5;10087:1;10083;:5;:::i;:::-;10071:18;;;;;;;;:::i;:::-;;;;;;;;;;;;10066:24;;;;;;;;;;;;;-1:-1:-1;10066:24:28;10040:50;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10040:50:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;;:8;;10049:13;;10040:23;;;;;;:::i;:::-;;;;;;:50;;;;10108:15;;;;;:::i;:::-;;;;10017:3;;;;;:::i;:::-;;;;9959:179;;;;9910:238;9889:259;10165:8;9506:674;-1:-1:-1;;;;;9506:674:28:o;2336:287:12:-;1759:1;2468:7;;:19;;2460:63;;;;-1:-1:-1;;;2460:63:12;;16125:2:30;2460:63:12;;;16107:21:30;16164:2;16144:18;;;16137:30;16203:33;16183:18;;;16176:61;16254:18;;2460:63:12;15923:355:30;2460:63:12;1759:1;2598:7;:18;2336:287::o;941:175:16:-;1050:58;;-1:-1:-1;;;;;15150:32:30;;1050:58:16;;;15132:51:30;15199:18;;;15192:34;;;1023:86:16;;1043:5;;-1:-1:-1;;;1073:23:16;15105:18:30;;1050:58:16;;;;-1:-1:-1;;1050:58:16;;;;;;;;;;;;;;-1:-1:-1;;;;;1050:58:16;-1:-1:-1;;;;;;1050:58:16;;;;;;;;;;1023:19;:86::i;:::-;941:175;;;:::o;7019:174:28:-;-1:-1:-1;;;;;7145:13:28;;7114:7;7145:13;;;:6;:13;;;;;:23;7181:5;;7145:32;;7171:6;;7145:23;;:32;:::i;1355:203:16:-;1482:68;;-1:-1:-1;;;;;16541:15:30;;;1482:68:16;;;16523:34:30;16593:15;;16573:18;;;16566:43;16625:18;;;16618:34;;;1455:96:16;;1475:5;;-1:-1:-1;;;1505:27:16;16458:18:30;;1482:68:16;16283:375:30;1455:96:16;1355:203;;;;:::o;1945:106:11:-;1662:4;1685:7;-1:-1:-1;;;1685:7:11;;;;2003:41;;;;-1:-1:-1;;;2003:41:11;;16865:2:30;2003:41:11;;;16847:21:30;16904:2;16884:18;;;16877:30;-1:-1:-1;;;16923:18:30;;;16916:50;16983:18;;2003:41:11;16663:344:30;7058:325:17;7199:12;7224;7238:23;7265:6;-1:-1:-1;;;;;7265:19:17;7285:4;7265:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7223:67;;;;7307:69;7334:6;7342:7;7351:10;7363:12;7307:26;:69::i;:::-;7300:76;7058:325;-1:-1:-1;;;;;;7058:325:17:o;5173:642:16:-;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;-1:-1:-1;;;;;5618:27:16;;;:69;;;;;:::i;:::-;5592:95;;5705:10;:17;5726:1;5705:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5697:111;;;;-1:-1:-1;;;5697:111:16;;17493:2:30;5697:111:16;;;17475:21:30;17532:2;17512:18;;;17505:30;17571:34;17551:18;;;17544:62;-1:-1:-1;;;17622:18:30;;;17615:40;17672:19;;5697:111:16;17291:406:30;7671:628:17;7851:12;7879:7;7875:418;;;7906:17;;7902:286;;-1:-1:-1;;;;;1702:19:17;;;8113:60;;;;-1:-1:-1;;;8113:60:17;;17904:2:30;8113:60:17;;;17886:21:30;17943:2;17923:18;;;17916:30;17982:31;17962:18;;;17955:59;18031:18;;8113:60:17;17702:353:30;8113:60:17;-1:-1:-1;8208:10:17;8201:17;;7875:418;8249:33;8257:10;8269:12;8249:7;:33::i;:::-;7671:628;;;;;;:::o;4108:223::-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;8821:540::-;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:17;;;;;;;;:::i;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;-1:-1:-1;;;5354:81:17;;18486:2:30;5354:81:17;;;18468:21:30;18525:2;18505:18;;;18498:30;18564:34;18544:18;;;18537:62;-1:-1:-1;;;18615:18:30;;;18608:36;18661:19;;5354:81:17;18284:402:30;5354:81:17;5446:12;5460:23;5487:6;-1:-1:-1;;;;;5487:11:17;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:17:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:140:30:-;-1:-1:-1;;;;;98:31:30;;88:42;;78:70;;144:1;141;134:12;159:272;234:6;287:2;275:9;266:7;262:23;258:32;255:52;;;303:1;300;293:12;255:52;342:9;329:23;361:40;395:5;361:40;:::i;618:127::-;679:10;674:3;670:20;667:1;660:31;710:4;707:1;700:15;734:4;731:1;724:15;750:1183;843:6;851;904:2;892:9;883:7;879:23;875:32;872:52;;;920:1;917;910:12;872:52;956:9;943:23;933:33;;985:2;1038;1027:9;1023:18;1010:32;-1:-1:-1;;;;;1102:2:30;1094:6;1091:14;1088:34;;;1118:1;1115;1108:12;1088:34;1156:6;1145:9;1141:22;1131:32;;1201:7;1194:4;1190:2;1186:13;1182:27;1172:55;;1223:1;1220;1213:12;1172:55;1259:2;1246:16;1281:2;1277;1274:10;1271:36;;;1287:18;;:::i;:::-;1333:2;1330:1;1326:10;1365:2;1359:9;1428:2;1424:7;1419:2;1415;1411:11;1407:25;1399:6;1395:38;1483:6;1471:10;1468:22;1463:2;1451:10;1448:18;1445:46;1442:72;;;1494:18;;:::i;:::-;1530:2;1523:22;1580:18;;;1614:15;;;;-1:-1:-1;1656:11:30;;;1652:20;;;1684:19;;;1681:39;;;1716:1;1713;1706:12;1681:39;1740:11;;;;1760:142;1776:6;1771:3;1768:15;1760:142;;;1842:17;;1830:30;;1793:12;;;;1880;;;;1760:142;;;1921:6;1911:16;;;;;;;;750:1183;;;;;:::o;1938:180::-;1997:6;2050:2;2038:9;2029:7;2025:23;2021:32;2018:52;;;2066:1;2063;2056:12;2018:52;-1:-1:-1;2089:23:30;;1938:180;-1:-1:-1;1938:180:30:o;3088:487::-;3163:6;3171;3179;3232:2;3220:9;3211:7;3207:23;3203:32;3200:52;;;3248:1;3245;3238:12;3200:52;3287:9;3274:23;3337:4;3330:5;3326:16;3319:5;3316:27;3306:55;;3357:1;3354;3347:12;3306:55;3380:5;-1:-1:-1;3437:2:30;3422:18;;3409:32;3450:42;3409:32;3450:42;:::i;:::-;3088:487;;3511:7;;-1:-1:-1;;;3565:2:30;3550:18;;;;3537:32;;3088:487::o;4039:553::-;4128:5;4122:12;4115:20;4108:28;4103:3;4096:41;4183:4;4176:5;4172:16;4166:23;4225:1;4221;4216:3;4212:11;4208:19;4277:2;4263:12;4259:21;4252:4;4247:3;4243:14;4236:45;4342:2;4334:4;4327:5;4323:16;4317:23;4313:32;4306:4;4301:3;4297:14;4290:56;;;4395:4;4388:5;4384:16;4378:23;4371:4;4366:3;4362:14;4355:47;4451:4;4444:5;4440:16;4434:23;4427:4;4422:3;4418:14;4411:47;4507:4;4500:5;4496:16;4490:23;4483:4;4478:3;4474:14;4467:47;4577:4;4570:5;4566:16;4560:23;4553:31;4546:39;4539:4;4534:3;4530:14;4523:63;4039:553;;:::o;4597:235::-;4773:3;4758:19;;4786:40;4762:9;4808:6;4786:40;:::i;5061:424::-;5128:6;5136;5189:2;5177:9;5168:7;5164:23;5160:32;5157:52;;;5205:1;5202;5195:12;5157:52;5244:9;5231:23;5263:40;5297:5;5263:40;:::i;:::-;5322:5;-1:-1:-1;5379:2:30;5364:18;;5351:32;5427:6;5414:20;;5402:33;;5392:61;;5449:1;5446;5439:12;5392:61;5472:7;5462:17;;;5061:424;;;;;:::o;5698:626::-;5795:6;5803;5856:2;5844:9;5835:7;5831:23;5827:32;5824:52;;;5872:1;5869;5862:12;5824:52;5912:9;5899:23;-1:-1:-1;;;;;5982:2:30;5974:6;5971:14;5968:34;;;5998:1;5995;5988:12;5968:34;6036:6;6025:9;6021:22;6011:32;;6081:7;6074:4;6070:2;6066:13;6062:27;6052:55;;6103:1;6100;6093:12;6052:55;6143:2;6130:16;6169:2;6161:6;6158:14;6155:34;;;6185:1;6182;6175:12;6155:34;6238:7;6233:2;6223:6;6220:1;6216:14;6212:2;6208:23;6204:32;6201:45;6198:65;;;6259:1;6256;6249:12;6198:65;6290:2;6282:11;;;;;6312:6;;-1:-1:-1;5698:626:30;;-1:-1:-1;;;;5698:626:30:o;6329:258::-;6401:1;6411:113;6425:6;6422:1;6419:13;6411:113;;;6501:11;;;6495:18;6482:11;;;6475:39;6447:2;6440:10;6411:113;;;6542:6;6539:1;6536:13;6533:48;;;-1:-1:-1;;6577:1:30;6559:16;;6552:27;6329:258::o;6592:257::-;6633:3;6671:5;6665:12;6698:6;6693:3;6686:19;6714:63;6770:6;6763:4;6758:3;6754:14;6747:4;6740:5;6736:16;6714:63;:::i;:::-;6831:2;6810:15;-1:-1:-1;;6806:29:30;6797:39;;;;6838:4;6793:50;;6592:257;-1:-1:-1;;6592:257:30:o;6854:800::-;7014:4;7043:2;7083;7072:9;7068:18;7113:2;7102:9;7095:21;7136:6;7171;7165:13;7202:6;7194;7187:22;7240:2;7229:9;7225:18;7218:25;;7302:2;7292:6;7289:1;7285:14;7274:9;7270:30;7266:39;7252:53;;7340:2;7332:6;7328:15;7361:1;7371:254;7385:6;7382:1;7379:13;7371:254;;;7478:2;7474:7;7462:9;7454:6;7450:22;7446:36;7441:3;7434:49;7506:39;7538:6;7529;7523:13;7506:39;:::i;:::-;7496:49;-1:-1:-1;7603:12:30;;;;7568:15;;;;7407:1;7400:9;7371:254;;;-1:-1:-1;7642:6:30;;6854:800;-1:-1:-1;;;;;;;6854:800:30:o;7659:324::-;7727:6;7735;7788:2;7776:9;7767:7;7763:23;7759:32;7756:52;;;7804:1;7801;7794:12;7756:52;7843:9;7830:23;7862:40;7896:5;7862:40;:::i;:::-;7921:5;7973:2;7958:18;;;;7945:32;;-1:-1:-1;;;7659:324:30:o;7988:957::-;8217:2;8269:21;;;8339:13;;8242:18;;;8361:22;;;8188:4;;8217:2;8440:15;;;;8414:2;8399:18;;;8188:4;8483:436;8497:6;8494:1;8491:13;8483:436;;;8562:6;8556:13;8582:37;8615:3;8610:2;8604:9;8582:37;:::i;:::-;8658:11;;8652:18;8737:19;;8693:4;8733:28;;;8726:4;8717:14;;8710:52;8807:21;;;8801:28;8797:37;8791:3;8782:13;;8775:60;8894:15;;;;8864:6;8855:16;;;;8519:1;8512:9;8483:436;;9546:184;9616:6;9669:2;9657:9;9648:7;9644:23;9640:32;9637:52;;;9685:1;9682;9675:12;9637:52;-1:-1:-1;9708:16:30;;9546:184;-1:-1:-1;9546:184:30:o;10547:127::-;10608:10;10603:3;10599:20;10596:1;10589:31;10639:4;10636:1;10629:15;10663:4;10660:1;10653:15;10679:521;10756:4;10762:6;10822:11;10809:25;10916:2;10912:7;10901:8;10885:14;10881:29;10877:43;10857:18;10853:68;10843:96;;10935:1;10932;10925:12;10843:96;10962:33;;11014:20;;;-1:-1:-1;;;;;;11046:30:30;;11043:50;;;11089:1;11086;11079:12;11043:50;11122:4;11110:17;;-1:-1:-1;11153:14:30;11149:27;;;11139:38;;11136:58;;;11190:1;11187;11180:12;11136:58;10679:521;;;;;:::o;11205:127::-;11266:10;11261:3;11257:20;11254:1;11247:31;11297:4;11294:1;11287:15;11321:4;11318:1;11311:15;11337:135;11376:3;-1:-1:-1;;11397:17:30;;11394:43;;;11417:18;;:::i;:::-;-1:-1:-1;11464:1:30;11453:13;;11337:135::o;11477:128::-;11517:3;11548:1;11544:6;11541:1;11538:13;11535:39;;;11554:18;;:::i;:::-;-1:-1:-1;11590:9:30;;11477:128::o;11610:193::-;11648:3;-1:-1:-1;;;;;11685:5:30;11681:30;11730:7;11720:41;;11741:18;;:::i;:::-;-1:-1:-1;;11777:20:30;;11610:193;-1:-1:-1;;11610:193:30:o;12576:127::-;12637:10;12632:3;12628:20;12625:1;12618:31;12668:4;12665:1;12658:15;12692:4;12689:1;12682:15;12708:112;12740:1;12766;12756:35;;12771:18;;:::i;:::-;-1:-1:-1;12805:9:30;;12708:112::o;12825:125::-;12865:4;12893:1;12890;12887:8;12884:34;;;12898:18;;:::i;:::-;-1:-1:-1;12935:9:30;;12825:125::o;14178:195::-;14216:4;14253;14250:1;14246:12;14285:4;14282:1;14278:12;14310:3;14305;14302:12;14299:38;;;14317:18;;:::i;:::-;14354:13;;;14178:195;-1:-1:-1;;;14178:195:30:o;14378:168::-;14418:7;14484:1;14480;14476:6;14472:14;14469:1;14466:21;14461:1;14454:9;14447:17;14443:45;14440:71;;;14491:18;;:::i;:::-;-1:-1:-1;14531:9:30;;14378:168::o;14551:120::-;14591:1;14617;14607:35;;14622:18;;:::i;:::-;-1:-1:-1;14656:9:30;;14551:120::o;14676:277::-;14743:6;14796:2;14784:9;14775:7;14771:23;14767:32;14764:52;;;14812:1;14809;14802:12;14764:52;14844:9;14838:16;14897:5;14890:13;14883:21;14876:5;14873:32;14863:60;;14919:1;14916;14909:12;15782:136;15821:3;15849:5;15839:39;;15858:18;;:::i;:::-;-1:-1:-1;;;15894:18:30;;15782:136::o;17012:274::-;17141:3;17179:6;17173:13;17195:53;17241:6;17236:3;17229:4;17221:6;17217:17;17195:53;:::i;:::-;17264:16;;;;;17012:274;-1:-1:-1;;17012:274:30:o;18060:219::-;18209:2;18198:9;18191:21;18172:4;18229:44;18269:2;18258:9;18254:18;18246:6;18229:44;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1798800","executionCost":"infinite","totalCost":"infinite"},"external":{"bank()":"2404","bets(uint256)":"13353","diceBets(uint256)":"2593","getBalance()":"218","getBetData(uint256)":"13751","getBetStatus(uint256)":"2479","getLastUserBets(address,uint256)":"infinite","getTokenBalance(address)":"infinite","hasPendingBets(address)":"2617","multicall(bytes[])":"infinite","multiplier()":"2352","owner()":"2464","pause()":"infinite","paused()":"2410","rawFulfillRandomWords(uint256,uint256[])":"infinite","refundBet(uint256)":"infinite","renounceOwnership()":"infinite","s_owner()":"2381","s_randomWords()":"2374","s_requestId()":"2372","setBank(address)":"27806","setHouseEdge(address,uint16)":"30648","tokens(address)":"2668","transferOwnership(address)":"infinite","updateMultiplier(uint256)":"24599","wager(uint8,address,uint256)":"infinite"},"internal":{"_getFees(address,uint256)":"2384","_getLastUserBets(address,uint256)":"infinite","_getPayout(uint256,uint8)":"288","_isGasToken(address)":"infinite","_newBet(address,uint256,uint256)":"infinite","fulfillRandomWords(uint256,uint256[] memory)":"infinite","getMultiplier()":"infinite"}},"methodIdentifiers":{"bank()":"76cdb03b","bets(uint256)":"22af00fa","diceBets(uint256)":"42258eca","getBalance()":"12065fe0","getBetData(uint256)":"5bfe1630","getBetStatus(uint256)":"61f14f11","getLastUserBets(address,uint256)":"c2fb579f","getTokenBalance(address)":"3aecd0e3","hasPendingBets(address)":"594043fd","multicall(bytes[])":"ac9650d8","multiplier()":"1b3ed722","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","refundBet(uint256)":"e1fdb4b4","renounceOwnership()":"715018a6","s_owner()":"e3978240","s_randomWords()":"1d3c7b91","s_requestId()":"e89e106a","setBank(address)":"090d23b9","setHouseEdge(address,uint16)":"78bcde22","tokens(address)":"e4860339","transferOwnership(address)":"f2fde38b","updateMultiplier(uint256)":"5ffe6146","wager(uint8,address,uint256)":"4031e85b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minCap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxCap\",\"type\":\"uint8\"}],\"name\":\"CapNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveHouseEdge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPendingBet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasPendingBets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"UnderMinBetAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongGasValueToCoverFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainlinkVRFCost\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rolled\",\"type\":\"uint8\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"SetHouseEdge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBankV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"betStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"diceBets\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rolled\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"betStatus\",\"type\":\"bool\"}],\"internalType\":\"struct DiceV4.Bet\",\"name\":\"betData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getLastUserBets\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"betStatus\",\"type\":\"bool\"}],\"internalType\":\"struct DiceV4.Bet\",\"name\":\"bet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rolled\",\"type\":\"uint8\"}],\"internalType\":\"struct DiceV4.DiceBet\",\"name\":\"diceBet\",\"type\":\"tuple\"}],\"internalType\":\"struct DiceV4.FullDiceBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPendingBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBankV2\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"setHouseEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"pendingCount\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"wager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CapNotInRange(uint8,uint8)\":[{\"params\":{\"maxCap\":\"The maximum cap.\",\"minCap\":\"The minimum cap.\"}}],\"UnderMinBetAmount(uint256)\":[{\"params\":{\"minBetAmount\":\"Bet amount.\"}}]},\"events\":{\"BetRefunded(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"Number of tokens refunded.\",\"chainlinkVRFCost\":\"The Chainlink VRF cost refunded to player.\",\"id\":\"The bet ID.\",\"user\":\"Address of the gamer.\"}},\"PlaceBet(uint256,address,address,uint256,uint8)\":{\"params\":{\"amount\":\"The bet amount.\",\"cap\":\"The chosen coin face.\",\"id\":\"The bet ID.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"Roll(uint256,address,address,uint256,uint8,uint8)\":{\"params\":{\"amount\":\"The bet amount.\",\"cap\":\"The chosen dice number.\",\"id\":\"The bet ID.\",\"rolled\":\"The rolled dice number.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"SetBank(address)\":{\"params\":{\"bank\":\"Address of the bank contract.\"}},\"SetHouseEdge(address,uint16)\":{\"params\":{\"houseEdge\":\"House edge rate.\",\"token\":\"Address of the token.\"}}},\"kind\":\"dev\",\"methods\":{\"getLastUserBets(address,uint256)\":{\"params\":{\"dataLength\":\"The amount of bets to return.\",\"user\":\"Address of the gamer.\"},\"returns\":{\"_0\":\"A list of Dice bet.\"}},\"getTokenBalance(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"The amount of token available for profits.\"}},\"hasPendingBets(address)\":{\"returns\":{\"_0\":\"Whether the token has pending bets.\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refundBet(uint256)\":{\"params\":{\"id\":\"The Bet ID.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBank(address)\":{\"params\":{\"_bank\":\"Address of the Bank contract.\"}},\"setHouseEdge(address,uint16)\":{\"details\":\"The house edge rate couldn't exceed 4%.\",\"params\":{\"houseEdge\":\"House edge rate.\",\"token\":\"Address of the token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wager(uint8,address,uint256)\":{\"params\":{\"cap\":\"The chosen number .\",\"token\":\"Address of the token.\",\"tokenAmount\":\"The number of tokens bet.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CapNotInRange(uint8,uint8)\":[{\"notice\":\"Provided cap is not within 1 and 99 included.\"}],\"NotFulfilled()\":[{\"notice\":\"Bet isn't resolved yet.\"}],\"NotPendingBet()\":[{\"notice\":\"Bet provided doesn't exist or was already resolved.\"}],\"UnderMinBetAmount(uint256)\":[{\"notice\":\"Insufficient bet amount.\"}]},\"events\":{\"BetRefunded(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted after the bet amount is transfered to the user.\"},\"PlaceBet(uint256,address,address,uint256,uint8)\":{\"notice\":\"Emitted after a bet is placed.\"},\"Roll(uint256,address,address,uint256,uint8,uint8)\":{\"notice\":\"Emitted after a bet is rolled.\"},\"SetBank(address)\":{\"notice\":\"Emitted after the bank is set.\"},\"SetHouseEdge(address,uint16)\":{\"notice\":\"Emitted after the house edge is set for a token.\"}},\"kind\":\"user\",\"methods\":{\"bets(uint256)\":{\"notice\":\"Maps bets IDs to Bet information.\"},\"diceBets(uint256)\":{\"notice\":\"Maps bets IDs to chosen and rolled dice numbers.\"},\"getLastUserBets(address,uint256)\":{\"notice\":\"Gets the list of the last user bets.\"},\"getTokenBalance(address)\":{\"notice\":\"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance.\"},\"hasPendingBets(address)\":{\"notice\":\"Returns whether the token has pending bets.\"},\"pause()\":{\"notice\":\"Pauses the contract to disable new bets.\"},\"refundBet(uint256)\":{\"notice\":\"Refunds the bet to the user if the Chainlink VRF callback failed.\"},\"setBank(address)\":{\"notice\":\"Sets the Bank contract.\"},\"setHouseEdge(address,uint16)\":{\"notice\":\"Sets the game house edge rate for a specific token.\"},\"tokens(address)\":{\"notice\":\"Maps tokens addresses to token configuration.\"},\"wager(uint8,address,uint256)\":{\"notice\":\"Creates a new bet and stores the chosen coin face.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dice.sol\":\"DiceV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"},\"contracts/Dice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport {IBankV2} from \\\"./interface/IBankV2.sol\\\";\\n\\ncontract DiceV4 is\\n    VRFConsumerBaseV2,\\n    Ownable,\\n    Pausable,\\n    Multicall,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint64 s_subscriptionId;\\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    address vrfCoordinator = 0xbd13f08b8352A3635218ab9418E340c60d6Eb418;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 keyHash =\\n        0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4;\\n\\n    uint32 callbackGasLimit = 200000;\\n\\n    // The default is 3, but you can set this higher.\\n    uint16 requestConfirmations = 3;\\n\\n    // For this example, retrieve 2 random values in one request.\\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n    uint32 numWords = 2;\\n\\n    uint256 public s_randomWords;\\n    uint256 public s_requestId;\\n    address public s_owner;\\n\\n    IBankV2 public bank;\\n    /// @notice Emitted after the bank is set.\\n    /// @param bank Address of the bank contract.\\n    event SetBank(address bank);\\n    /// @notice Emitted after the house edge is set for a token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    event SetHouseEdge(address indexed token, uint16 houseEdge);\\n\\n    error ExcessiveHouseEdge();\\n    error ForbiddenToken();\\n    error WrongGasValueToCoverFee();\\n    error AccessDenied();\\n    error InvalidAddress();\\n    error TokenHasPendingBets();\\n\\n    struct Bet {\\n        bool resolved;\\n        address payable user;\\n        address token;\\n        uint256 id;\\n        uint256 amount;\\n        uint256 blockTime;\\n        bool betStatus;\\n        // uint256 payout;\\n    }\\n\\n    /// @notice Maps bets IDs to Bet information.\\n    mapping(uint256 => Bet) public bets;\\n\\n    /// @notice Maps users addrejsses to bets IDs\\n    mapping(address => uint256[]) internal _userBets;\\n\\n    /// @notice Emitted after the bet amount is transfered to the user.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param amount Number of tokens refunded.\\n    /// @param chainlinkVRFCost The Chainlink VRF cost refunded to player.\\n    event BetRefunded(\\n        uint256 id,\\n        address user,\\n        uint256 amount,\\n        uint256 chainlinkVRFCost\\n    );\\n\\n    /// @notice Insufficient bet amount.\\n    /// @param minBetAmount Bet amount.\\n    error UnderMinBetAmount(uint256 minBetAmount);\\n\\n    /// @notice Bet isn't resolved yet.\\n    error NotFulfilled();\\n\\n    /// @notice Bet provided doesn't exist or was already resolved.\\n    error NotPendingBet();\\n\\n    /// @notice Full dice bet information struct.\\n    /// @param bet The Bet struct information.\\n    /// @param diceBet The Dice bet struct information.\\n    /// @dev Used to package bet information for the front-end.\\n    struct FullDiceBet {\\n        Bet bet;\\n        DiceBet diceBet;\\n    }\\n\\n    /// @notice Dice bet information struct.\\n    /// @param cap The chosen dice number.\\n    /// @param rolled The rolled dice number.\\n    struct DiceBet {\\n        uint8 cap;\\n        uint8 rolled;\\n    }\\n\\n    /// @notice Maps bets IDs to chosen and rolled dice numbers.\\n    mapping(uint256 => DiceBet) public diceBets;\\n\\n    struct betAudit {\\n        bool paid;\\n        uint256 betId;\\n    }\\n\\n    mapping(uint256 => betAudit) betAuditCheck;\\n\\n    /// @notice Emitted after a bet is placed.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param cap The chosen coin face.\\n    event PlaceBet(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint8 cap\\n    );\\n\\n    /// @notice Emitted after a bet is rolled.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param cap The chosen dice number.\\n    /// @param rolled The rolled dice number.\\n    // / @param payout The payout amount.\\n    event Roll(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint8 cap,\\n        uint8 rolled\\n        // uint256 payout\\n    );\\n\\n    /// @notice Provided cap is not within 1 and 99 included.\\n    /// @param minCap The minimum cap.\\n    /// @param maxCap The maximum cap.\\n    error CapNotInRange(uint8 minCap, uint8 maxCap);\\n\\n    struct Token {\\n        uint16 houseEdge;\\n        uint64 pendingCount;\\n    }\\n    /// @notice Maps tokens addresses to token configuration.\\n    mapping(address => Token) public tokens;\\n\\n    // Ends here\\n\\n    constructor(uint64 subscriptionId, address bankAddress)\\n        VRFConsumerBaseV2(vrfCoordinator)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_owner = msg.sender;\\n        s_subscriptionId = subscriptionId;\\n        setBank(IBankV2(bankAddress));\\n    }\\n\\n    /// @notice Returns whether the token has pending bets.\\n    /// @return Whether the token has pending bets.\\n    function hasPendingBets(address token) public view returns (bool) {\\n        return tokens[token].pendingCount != 0;\\n    }\\n\\n    /// @notice Sets the Bank contract.\\n    /// @param _bank Address of the Bank contract.\\n    function setBank(IBankV2 _bank) public onlyOwner {\\n        if (address(_bank) == address(0)) {\\n            // revert InvalidAddress();\\n            // return false;\\n        }\\n        bank = _bank;\\n        emit SetBank(address(_bank));\\n    }\\n\\n    /// @notice Sets the game house edge rate for a specific token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    /// @dev The house edge rate couldn't exceed 4%.\\n    function setHouseEdge(address token, uint16 houseEdge) external onlyOwner {\\n        if (houseEdge > 400) {\\n            revert ExcessiveHouseEdge();\\n        }\\n        if (hasPendingBets(token)) {\\n            revert TokenHasPendingBets();\\n        }\\n        tokens[token].houseEdge = houseEdge;\\n        emit SetHouseEdge(token, houseEdge);\\n    }\\n\\n    /// @notice Check if the token has the 0x address.\\n    /// @param token Address of the token.\\n    /// @return Whether the token's address is the 0x address.\\n    function _isGasToken(address token) private pure returns (bool) {\\n        return token == address(0);\\n    }\\n\\n    function _getFees(address token, uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (tokens[token].houseEdge * amount) / 10000;\\n    }\\n\\n    function _newBet(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        uint256 multi\\n    ) internal whenNotPaused nonReentrant returns (Bet memory) {\\n        Token storage token = tokens[tokenAddress];\\n        if (\\n            bank.isAllowedToken(tokenAddress) == false || token.houseEdge == 0\\n        ) {\\n            revert ForbiddenToken();\\n        }\\n\\n        address user = msg.sender;\\n        bool isGasToken = tokenAddress == address(0);\\n        uint256 betAmount = tokenAmount;\\n\\n        {\\n            uint256 minBetAmount = bank.getMinBetAmount(tokenAddress);\\n            if (betAmount < minBetAmount) {\\n                revert UnderMinBetAmount(minBetAmount);\\n            }\\n\\n            uint256 maxBetAmount = bank.getMaxBetAmount(tokenAddress, multi);\\n            if (betAmount > maxBetAmount) {\\n                if (isGasToken) {\\n                    payable(user).transfer(betAmount - maxBetAmount);\\n                }\\n                betAmount = maxBetAmount;\\n            }\\n        }\\n\\n        s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        Bet memory newBet = Bet(\\n            false,\\n            payable(user),\\n            tokenAddress,\\n            s_requestId,\\n            betAmount,\\n            block.number,\\n            false\\n            // 0\\n        );\\n        _userBets[user].push(s_requestId);\\n        bets[s_requestId] = newBet;\\n\\n        // If ERC20, transfer the tokens\\n        if (!isGasToken) {\\n            IERC20(tokenAddress).safeTransferFrom(\\n                user,\\n                address(bank),\\n                betAmount\\n            );\\n            // tokens goes to either this contract or bank\\n            // might change to address(this)\\n        }\\n\\n        return newBet;\\n    }\\n\\n    // Wallet\\n\\n    uint256 public multiplier = 3;\\n\\n    function updateMultiplier(uint256 amount) external onlyOwner {\\n        multiplier = amount;\\n    }\\n\\n    function getMultiplier() private view returns (uint256) {\\n        return multiplier;\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Bet.\\n    function _getLastUserBets(address user, uint256 dataLength)\\n        internal\\n        view\\n        returns (Bet[] memory)\\n    {\\n        uint256[] memory userBetsIds = _userBets[user];\\n        uint256 betsLength = userBetsIds.length;\\n\\n        if (betsLength < dataLength) {\\n            dataLength = betsLength;\\n        }\\n\\n        Bet[] memory userBets = new Bet[](dataLength);\\n        if (dataLength != 0) {\\n            uint256 userBetsIndex;\\n            for (uint256 i = betsLength; i > betsLength - dataLength; i--) {\\n                userBets[userBetsIndex] = bets[userBetsIds[i - 1]];\\n                userBetsIndex++;\\n            }\\n        }\\n\\n        return userBets;\\n    }\\n\\n    function getBetData(uint256 id) public view returns (Bet memory betData) {\\n        Bet storage data = bets[id];\\n        return data;\\n    }\\n\\n    function getBetStatus(uint256 id) public view returns (bool status) {\\n        Bet storage data = bets[id];\\n        return data.betStatus;\\n    }\\n\\n    /// @notice Refunds the bet to the user if the Chainlink VRF callback failed.\\n    /// @param id The Bet ID.\\n    function refundBet(uint256 id) external nonReentrant {\\n        Bet storage bet = bets[id];\\n        if (bet.resolved == true) {\\n            revert NotPendingBet();\\n        } else if (block.timestamp < bet.blockTime + 30) {\\n            revert NotFulfilled();\\n        }\\n\\n        Token storage token = tokens[bet.token];\\n        token.pendingCount--;\\n\\n        bet.resolved = true;\\n        // bet.payout = bet.amount;\\n\\n        if (bet.token == address(0)) {\\n            payable(bet.user).transfer(bet.amount);\\n        } else {\\n            IERC20(bet.token).safeTransfer(bet.user, bet.amount);\\n        }\\n    }\\n\\n    /// @notice Calculates the target payout amount.\\n    /// @param betAmount Bet amount.\\n    /// @param cap The chosen dice number.\\n    /// @return The target payout amount.\\n    function _getPayout(uint256 betAmount, uint8 cap)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return (betAmount * 100) / (100 - cap);\\n    }\\n\\n    /// @notice Creates a new bet and stores the chosen coin face.\\n    /// @param cap The chosen number .\\n    /// @param token Address of the token.\\n    /// @param tokenAmount The number of tokens bet.\\n    function wager(\\n        uint8 cap,\\n        address token,\\n        uint256 tokenAmount\\n    ) external payable whenNotPaused {\\n        /// Dice cap 1 gives 99% chance.\\n        /// Dice cap 99 gives 1% chance.\\n        if (cap == 0 || cap > 99) {\\n            revert CapNotInRange(1, 99);\\n        }\\n\\n        Bet memory bet = _newBet(token, tokenAmount, _getPayout(10000, cap));\\n        diceBets[bet.id].cap = cap;\\n\\n        emit PlaceBet(bet.id, bet.user, bet.token, bet.amount, cap);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Gets the token's balance.\\n    /// The token's house edge allocation amounts are subtracted from the balance.\\n    /// @param token Address of the token.\\n    /// @return The amount of token available for profits.\\n    function getTokenBalance(address token) public view returns (uint256) {\\n        uint256 tokenBal;\\n        if (_isGasToken(token)) {\\n            return tokenBal = address(this).balance;\\n        } else {\\n            return tokenBal = IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 id, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        DiceBet storage diceBet = diceBets[id];\\n        Bet storage bet = bets[id];\\n        uint8 rolled = uint8((randomWords[0] % 100) + 1);\\n        diceBet.rolled = rolled;\\n\\n        if (rolled > diceBet.cap) {\\n            bet.resolved = true;\\n            bet.betStatus = true;\\n            // processPayouts(bet, bet.betStatus, payout);\\n            address token = bet.token;\\n            address payable user = bet.user;\\n            uint256 betAmount = bet.amount;\\n\\n            uint256 payout = _getPayout(betAmount, diceBet.cap);\\n            uint256 profit = payout;\\n            uint256 profitFee = _getFees(token, betAmount);\\n            uint256 profitPayout = profit - profitFee;\\n\\n            // Transfer the payout from the bank, the bet amount fee to the bank, and account fees.\\n            bank.payout(user, token, profitPayout, profitFee);\\n        } else {\\n            bet.resolved = true;\\n            bet.betStatus = false;\\n        }\\n\\n        emit Roll(\\n            bet.id,\\n            bet.user,\\n            bet.token,\\n            bet.amount,\\n            diceBet.cap,\\n            rolled\\n            // payout\\n        );\\n    }\\n\\n    /// @notice Pauses the contract to disable new bets.\\n    function pause() external onlyOwner {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Dice bet.\\n    function getLastUserBets(address user, uint256 dataLength)\\n        external\\n        view\\n        returns (FullDiceBet[] memory)\\n    {\\n        Bet[] memory lastBets = _getLastUserBets(user, dataLength);\\n        FullDiceBet[] memory lastDiceBets = new FullDiceBet[](lastBets.length);\\n        for (uint256 i; i < lastBets.length; i++) {\\n            lastDiceBets[i] = FullDiceBet(\\n                lastBets[i],\\n                diceBets[lastBets[i].id]\\n            );\\n        }\\n        return lastDiceBets;\\n    }\\n}\\n\",\"keccak256\":\"0x0291828f99530684afb47864c416f179f62cad98845132d68b38129c4ce6e089\",\"license\":\"MIT\"},\"contracts/interface/IBankV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/// @notice Minimal interface for Bank.\\n/// @author Romuald Hog.\\ninterface IBankV2 {\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param token Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address token) external view returns (bool);\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address payable user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees\\n    ) external payable;\\n\\n    /// @notice Accounts a loss bet.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    function cashIn(address tokenAddress, uint256 amount) external payable;\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Harvests tokens dividends.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function harvestDividends()\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    /// @notice Get the available tokens dividends amounts.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function getDividends()\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n\\n    function getTokenOwner(address token) external view returns (address);\\n\\n    function getMinBetAmount(address token) external view returns (uint256);\\n}\",\"keccak256\":\"0x4170b0a886dba886bd243c3df535a85defd0ded9c06f01748168dd891d429bb1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":766,"contract":"contracts/Dice.sol:DiceV4","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":889,"contract":"contracts/Dice.sol:DiceV4","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":990,"contract":"contracts/Dice.sol:DiceV4","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":6158,"contract":"contracts/Dice.sol:DiceV4","label":"s_subscriptionId","offset":0,"slot":"2","type":"t_uint64"},{"astId":6161,"contract":"contracts/Dice.sol:DiceV4","label":"COORDINATOR","offset":8,"slot":"2","type":"t_contract(VRFCoordinatorV2Interface)219"},{"astId":6164,"contract":"contracts/Dice.sol:DiceV4","label":"vrfCoordinator","offset":0,"slot":"3","type":"t_address"},{"astId":6167,"contract":"contracts/Dice.sol:DiceV4","label":"keyHash","offset":0,"slot":"4","type":"t_bytes32"},{"astId":6170,"contract":"contracts/Dice.sol:DiceV4","label":"callbackGasLimit","offset":0,"slot":"5","type":"t_uint32"},{"astId":6173,"contract":"contracts/Dice.sol:DiceV4","label":"requestConfirmations","offset":4,"slot":"5","type":"t_uint16"},{"astId":6176,"contract":"contracts/Dice.sol:DiceV4","label":"numWords","offset":6,"slot":"5","type":"t_uint32"},{"astId":6178,"contract":"contracts/Dice.sol:DiceV4","label":"s_randomWords","offset":0,"slot":"6","type":"t_uint256"},{"astId":6180,"contract":"contracts/Dice.sol:DiceV4","label":"s_requestId","offset":0,"slot":"7","type":"t_uint256"},{"astId":6182,"contract":"contracts/Dice.sol:DiceV4","label":"s_owner","offset":0,"slot":"8","type":"t_address"},{"astId":6185,"contract":"contracts/Dice.sol:DiceV4","label":"bank","offset":0,"slot":"9","type":"t_contract(IBankV2)7313"},{"astId":6230,"contract":"contracts/Dice.sol:DiceV4","label":"bets","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_struct(Bet)6224_storage)"},{"astId":6236,"contract":"contracts/Dice.sol:DiceV4","label":"_userBets","offset":0,"slot":"11","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":6276,"contract":"contracts/Dice.sol:DiceV4","label":"diceBets","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_struct(DiceBet)6270_storage)"},{"astId":6286,"contract":"contracts/Dice.sol:DiceV4","label":"betAuditCheck","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_struct(betAudit)6281_storage)"},{"astId":6332,"contract":"contracts/Dice.sol:DiceV4","label":"tokens","offset":0,"slot":"14","type":"t_mapping(t_address,t_struct(Token)6326_storage)"},{"astId":6654,"contract":"contracts/Dice.sol:DiceV4","label":"multiplier","offset":0,"slot":"15","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IBankV2)7313":{"encoding":"inplace","label":"contract IBankV2","numberOfBytes":"20"},"t_contract(VRFCoordinatorV2Interface)219":{"encoding":"inplace","label":"contract VRFCoordinatorV2Interface","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_address,t_struct(Token)6326_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct DiceV4.Token)","numberOfBytes":"32","value":"t_struct(Token)6326_storage"},"t_mapping(t_uint256,t_struct(Bet)6224_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct DiceV4.Bet)","numberOfBytes":"32","value":"t_struct(Bet)6224_storage"},"t_mapping(t_uint256,t_struct(DiceBet)6270_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct DiceV4.DiceBet)","numberOfBytes":"32","value":"t_struct(DiceBet)6270_storage"},"t_mapping(t_uint256,t_struct(betAudit)6281_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct DiceV4.betAudit)","numberOfBytes":"32","value":"t_struct(betAudit)6281_storage"},"t_struct(Bet)6224_storage":{"encoding":"inplace","label":"struct DiceV4.Bet","members":[{"astId":6211,"contract":"contracts/Dice.sol:DiceV4","label":"resolved","offset":0,"slot":"0","type":"t_bool"},{"astId":6213,"contract":"contracts/Dice.sol:DiceV4","label":"user","offset":1,"slot":"0","type":"t_address_payable"},{"astId":6215,"contract":"contracts/Dice.sol:DiceV4","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":6217,"contract":"contracts/Dice.sol:DiceV4","label":"id","offset":0,"slot":"2","type":"t_uint256"},{"astId":6219,"contract":"contracts/Dice.sol:DiceV4","label":"amount","offset":0,"slot":"3","type":"t_uint256"},{"astId":6221,"contract":"contracts/Dice.sol:DiceV4","label":"blockTime","offset":0,"slot":"4","type":"t_uint256"},{"astId":6223,"contract":"contracts/Dice.sol:DiceV4","label":"betStatus","offset":0,"slot":"5","type":"t_bool"}],"numberOfBytes":"192"},"t_struct(DiceBet)6270_storage":{"encoding":"inplace","label":"struct DiceV4.DiceBet","members":[{"astId":6267,"contract":"contracts/Dice.sol:DiceV4","label":"cap","offset":0,"slot":"0","type":"t_uint8"},{"astId":6269,"contract":"contracts/Dice.sol:DiceV4","label":"rolled","offset":1,"slot":"0","type":"t_uint8"}],"numberOfBytes":"32"},"t_struct(Token)6326_storage":{"encoding":"inplace","label":"struct DiceV4.Token","members":[{"astId":6323,"contract":"contracts/Dice.sol:DiceV4","label":"houseEdge","offset":0,"slot":"0","type":"t_uint16"},{"astId":6325,"contract":"contracts/Dice.sol:DiceV4","label":"pendingCount","offset":2,"slot":"0","type":"t_uint64"}],"numberOfBytes":"32"},"t_struct(betAudit)6281_storage":{"encoding":"inplace","label":"struct DiceV4.betAudit","members":[{"astId":6278,"contract":"contracts/Dice.sol:DiceV4","label":"paid","offset":0,"slot":"0","type":"t_bool"},{"astId":6280,"contract":"contracts/Dice.sol:DiceV4","label":"betId","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"CapNotInRange(uint8,uint8)":[{"notice":"Provided cap is not within 1 and 99 included."}],"NotFulfilled()":[{"notice":"Bet isn't resolved yet."}],"NotPendingBet()":[{"notice":"Bet provided doesn't exist or was already resolved."}],"UnderMinBetAmount(uint256)":[{"notice":"Insufficient bet amount."}]},"events":{"BetRefunded(uint256,address,uint256,uint256)":{"notice":"Emitted after the bet amount is transfered to the user."},"PlaceBet(uint256,address,address,uint256,uint8)":{"notice":"Emitted after a bet is placed."},"Roll(uint256,address,address,uint256,uint8,uint8)":{"notice":"Emitted after a bet is rolled."},"SetBank(address)":{"notice":"Emitted after the bank is set."},"SetHouseEdge(address,uint16)":{"notice":"Emitted after the house edge is set for a token."}},"kind":"user","methods":{"bets(uint256)":{"notice":"Maps bets IDs to Bet information."},"diceBets(uint256)":{"notice":"Maps bets IDs to chosen and rolled dice numbers."},"getLastUserBets(address,uint256)":{"notice":"Gets the list of the last user bets."},"getTokenBalance(address)":{"notice":"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance."},"hasPendingBets(address)":{"notice":"Returns whether the token has pending bets."},"pause()":{"notice":"Pauses the contract to disable new bets."},"refundBet(uint256)":{"notice":"Refunds the bet to the user if the Chainlink VRF callback failed."},"setBank(address)":{"notice":"Sets the Bank contract."},"setHouseEdge(address,uint16)":{"notice":"Sets the game house edge rate for a specific token."},"tokens(address)":{"notice":"Maps tokens addresses to token configuration."},"wager(uint8,address,uint256)":{"notice":"Creates a new bet and stores the chosen coin face."}},"version":1}}},"contracts/interface/IBankV2.sol":{"IBankV2":{"abi":[{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"cashIn","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getDividends","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"getMaxBetAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getMinBetAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvestDividends","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"isAllowedToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"profit","type":"uint256"},{"internalType":"uint256","name":"fees","type":"uint256"}],"name":"payout","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"author":"Romuald Hog.","kind":"dev","methods":{"cashIn(address,uint256)":{"details":"In case of an ERC20, the bet amount should be transfered prior to this tx.In case of the gas token, the bet amount is sent along with this tx.","params":{"amount":"Loss bet amount.","tokenAddress":"Address of the token."}},"getDividends()":{"returns":{"amounts":"The list of tokens' amounts harvested.","tokens":"The list of tokens addresses."}},"getMaxBetAmount(address,uint256)":{"details":"The multiplier should be at least 10000.","params":{"multiplier":"The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.","token":"Address of the token."},"returns":{"_0":"Maximum bet amount for the token."}},"harvestDividends()":{"returns":{"amounts":"The list of tokens' amounts harvested.","tokens":"The list of tokens addresses."}},"isAllowedToken(address)":{"params":{"token":"Address of the token."},"returns":{"_0":"Whether the token is enabled for bets."}},"payout(address,address,uint256,uint256)":{"params":{"fees":"Bet amount and bet profit fees amount.","profit":"Number of tokens to be sent to the gamer.","token":"Address of the token.","user":"Address of the gamer."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cashIn(address,uint256)":"3138809d","getDividends()":"ed442e14","getMaxBetAmount(address,uint256)":"278b39de","getMinBetAmount(address)":"f6b2a2f1","getTokenOwner(address)":"dc17c9ca","harvestDividends()":"802ad8fb","isAllowedToken(address)":"cbe230c3","payout(address,address,uint256,uint256)":"1f615023"}},"metadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cashIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividends\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestDividends\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Romuald Hog.\",\"kind\":\"dev\",\"methods\":{\"cashIn(address,uint256)\":{\"details\":\"In case of an ERC20, the bet amount should be transfered prior to this tx.In case of the gas token, the bet amount is sent along with this tx.\",\"params\":{\"amount\":\"Loss bet amount.\",\"tokenAddress\":\"Address of the token.\"}},\"getDividends()\":{\"returns\":{\"amounts\":\"The list of tokens' amounts harvested.\",\"tokens\":\"The list of tokens addresses.\"}},\"getMaxBetAmount(address,uint256)\":{\"details\":\"The multiplier should be at least 10000.\",\"params\":{\"multiplier\":\"The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\",\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"Maximum bet amount for the token.\"}},\"harvestDividends()\":{\"returns\":{\"amounts\":\"The list of tokens' amounts harvested.\",\"tokens\":\"The list of tokens addresses.\"}},\"isAllowedToken(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"Whether the token is enabled for bets.\"}},\"payout(address,address,uint256,uint256)\":{\"params\":{\"fees\":\"Bet amount and bet profit fees amount.\",\"profit\":\"Number of tokens to be sent to the gamer.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cashIn(address,uint256)\":{\"notice\":\"Accounts a loss bet.\"},\"getDividends()\":{\"notice\":\"Get the available tokens dividends amounts.\"},\"getMaxBetAmount(address,uint256)\":{\"notice\":\"Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\"},\"harvestDividends()\":{\"notice\":\"Harvests tokens dividends.\"},\"isAllowedToken(address)\":{\"notice\":\"Gets the token's allow status used on the games smart contracts.\"},\"payout(address,address,uint256,uint256)\":{\"notice\":\"Payouts a winning bet, and allocate the house edge fee.\"}},\"notice\":\"Minimal interface for Bank.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IBankV2.sol\":\"IBankV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IBankV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/// @notice Minimal interface for Bank.\\n/// @author Romuald Hog.\\ninterface IBankV2 {\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param token Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address token) external view returns (bool);\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address payable user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees\\n    ) external payable;\\n\\n    /// @notice Accounts a loss bet.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    function cashIn(address tokenAddress, uint256 amount) external payable;\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Harvests tokens dividends.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function harvestDividends()\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    /// @notice Get the available tokens dividends amounts.\\n    /// @return tokens The list of tokens addresses.\\n    /// @return amounts The list of tokens' amounts harvested.\\n    function getDividends()\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n\\n    function getTokenOwner(address token) external view returns (address);\\n\\n    function getMinBetAmount(address token) external view returns (uint256);\\n}\",\"keccak256\":\"0x4170b0a886dba886bd243c3df535a85defd0ded9c06f01748168dd891d429bb1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"cashIn(address,uint256)":{"notice":"Accounts a loss bet."},"getDividends()":{"notice":"Get the available tokens dividends amounts."},"getMaxBetAmount(address,uint256)":{"notice":"Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier."},"harvestDividends()":{"notice":"Harvests tokens dividends."},"isAllowedToken(address)":{"notice":"Gets the token's allow status used on the games smart contracts."},"payout(address,address,uint256,uint256)":{"notice":"Payouts a winning bet, and allocate the house edge fee."}},"notice":"Minimal interface for Bank.","version":1}}}}}}